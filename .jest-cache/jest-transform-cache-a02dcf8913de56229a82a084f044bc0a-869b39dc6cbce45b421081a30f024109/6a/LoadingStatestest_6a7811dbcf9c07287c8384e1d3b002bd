376620159ad33dd3a6b2d58a22651ae5
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("@testing-library/react");
const _LoadingStates = require("../../components/LoadingStates");
describe('LoadingStates', ()=>{
    describe('PageLoadingSpinner', ()=>{
        it('renders with default message', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingStates.PageLoadingSpinner, {}));
            expect(_react.screen.getByText('Loading...')).toBeInTheDocument();
        });
        it('renders with custom message', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingStates.PageLoadingSpinner, {
                message: "Custom loading message"
            }));
            expect(_react.screen.getByText('Custom loading message')).toBeInTheDocument();
        });
        it('has proper structure and classes', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingStates.PageLoadingSpinner, {}));
            const container = _react.screen.getByText('Loading...').closest('div');
            expect(container).toHaveClass('min-h-[400px]', 'flex', 'items-center', 'justify-center');
        });
    });
    describe('ChatLoadingSkeleton', ()=>{
        it('renders header skeleton', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingStates.ChatLoadingSkeleton, {}));
            const container = document.querySelector('.border-b');
            expect(container).toBeInTheDocument();
        });
        it('renders multiple message skeletons', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingStates.ChatLoadingSkeleton, {}));
            // Should render 4 message skeletons based on the component
            const skeletons = document.querySelectorAll('.flex.gap-3');
            expect(skeletons.length).toBeGreaterThanOrEqual(4);
        });
        it('renders input skeleton', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingStates.ChatLoadingSkeleton, {}));
            const inputArea = document.querySelector('.border-t');
            expect(inputArea).toBeInTheDocument();
        });
    });
    describe('ConversationListSkeleton', ()=>{
        it('renders multiple conversation skeletons', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingStates.ConversationListSkeleton, {}));
            // Should render 6 conversation skeletons
            const skeletons = document.querySelectorAll('.flex.items-center.gap-3');
            expect(skeletons.length).toBe(6);
        });
        it('has proper spacing structure', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingStates.ConversationListSkeleton, {}));
            const container = document.querySelector('.p-2.space-y-2');
            expect(container).toBeInTheDocument();
        });
    });
    describe('AgentListSkeleton', ()=>{
        it('renders multiple agent skeletons', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingStates.AgentListSkeleton, {}));
            // Should render 5 agent skeletons
            const skeletons = document.querySelectorAll('.flex.items-center.gap-3');
            expect(skeletons.length).toBe(5);
        });
        it('has proper padding structure', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingStates.AgentListSkeleton, {}));
            const container = document.querySelector('.p-4.space-y-3');
            expect(container).toBeInTheDocument();
        });
    });
    describe('InlineLoadingSpinner', ()=>{
        it('renders with default size', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingStates.InlineLoadingSpinner, {}));
            const spinner = document.querySelector('.animate-spin');
            expect(spinner).toHaveClass('h-4', 'w-4');
        });
        it('renders with medium size', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingStates.InlineLoadingSpinner, {
                size: "md"
            }));
            const spinner = document.querySelector('.animate-spin');
            expect(spinner).toHaveClass('h-5', 'w-5');
        });
        it('renders with large size', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingStates.InlineLoadingSpinner, {
                size: "lg"
            }));
            const spinner = document.querySelector('.animate-spin');
            expect(spinner).toHaveClass('h-6', 'w-6');
        });
    });
    describe('ButtonLoadingSpinner', ()=>{
        it('renders with correct size for buttons', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingStates.ButtonLoadingSpinner, {}));
            const spinner = document.querySelector('.animate-spin');
            expect(spinner).toHaveClass('h-4', 'w-4');
        });
    });
    describe('AuthLoadingState', ()=>{
        it('renders authentication loading message', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingStates.AuthLoadingState, {}));
            expect(_react.screen.getByText('Authenticating...')).toBeInTheDocument();
            expect(_react.screen.getByText('Please wait while we verify your credentials.')).toBeInTheDocument();
        });
        it('has proper full-screen structure', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingStates.AuthLoadingState, {}));
            const container = _react.screen.getByText('Authenticating...').closest('div')?.parentElement?.parentElement;
            expect(container).toHaveClass('min-h-screen', 'flex', 'items-center', 'justify-center');
        });
    });
    describe('AppInitializingState', ()=>{
        it('renders app initialization message', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingStates.AppInitializingState, {}));
            expect(_react.screen.getByText('Starting ECE Agent')).toBeInTheDocument();
            expect(_react.screen.getByText('Initializing your intelligent assistant...')).toBeInTheDocument();
        });
        it('has proper background and structure', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingStates.AppInitializingState, {}));
            const container = _react.screen.getByText('Starting ECE Agent').closest('div')?.parentElement?.parentElement;
            expect(container).toHaveClass('min-h-screen', 'bg-gray-50', 'dark:bg-gray-900');
        });
        it('renders loading indicator', ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingStates.AppInitializingState, {}));
            expect(_react.screen.getByText('Loading')).toBeInTheDocument();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,