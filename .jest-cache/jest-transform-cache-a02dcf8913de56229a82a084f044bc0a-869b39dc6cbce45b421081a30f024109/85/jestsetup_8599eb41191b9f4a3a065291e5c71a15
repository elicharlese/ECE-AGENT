fd2ee144ad2c3832952cd6e2bd8c083c
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
require("@testing-library/jest-dom");
require("whatwg-fetch");
const _server = require("./__tests__/msw/server");
// Polyfill TextEncoder/TextDecoder for libraries expecting them in JSDOM/Node
// Must be before importing MSW server
// @ts-ignore
if (typeof global.TextEncoder === 'undefined') {
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    const { TextEncoder } = require('util');
    global.TextEncoder = TextEncoder;
}
// @ts-ignore
if (typeof global.TextDecoder === 'undefined') {
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    const { TextDecoder } = require('util');
    global.TextDecoder = TextDecoder;
}
// Ensure fetch API classes exist on global for modules that reference them at import time
// Next's next/server defines classes extending global Request/Response during import
// which can fail if not set up first in JSDOM.
// @ts-ignore
if (typeof globalThis.Request === 'undefined' && typeof window !== 'undefined') {
    // @ts-ignore
    globalThis.Request = window.Request;
}
// @ts-ignore
if (typeof globalThis.Response === 'undefined' && typeof window !== 'undefined') {
    // @ts-ignore
    globalThis.Response = window.Response;
}
// @ts-ignore
if (typeof globalThis.Headers === 'undefined' && typeof window !== 'undefined') {
    // @ts-ignore
    globalThis.Headers = window.Headers;
}
// Add static Response.json if missing (NextResponse.json relies on it)
// @ts-ignore
if (typeof globalThis.Response !== 'undefined' && typeof globalThis.Response.json !== 'function') {
    // @ts-ignore
    ;
    globalThis.Response.json = (data, init)=>{
        const headers = new Headers(init?.headers || {});
        if (!headers.has('content-type')) headers.set('content-type', 'application/json');
        return new Response(JSON.stringify(data), {
            ...init,
            headers
        });
    };
}
// Polyfill ResizeObserver for Radix UI components in tests
class MockResizeObserver {
    observe() {}
    unobserve() {}
    disconnect() {}
}
// @ts-ignore
if (typeof global.ResizeObserver === 'undefined') {
    // @ts-ignore
    ;
    global.ResizeObserver = MockResizeObserver;
}
// Polyfill scrollIntoView for JSDOM elements used in tests
// @ts-ignore
if (typeof window !== 'undefined') {
    const proto = window.HTMLElement && window.HTMLElement.prototype || undefined;
    // @ts-ignore
    if (proto && typeof proto.scrollIntoView !== 'function') {
        // @ts-ignore
        proto.scrollIntoView = function(_options) {};
    }
}
// Start MSW before all tests, reset after each, and close after all
beforeAll(()=>_server.server.listen());
afterEach(()=>_server.server.resetHandlers());
afterAll(()=>_server.server.close());

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9lbGljaGFybGVzZS9DYXNjYWRlUHJvamVjdHMvRUNFLUFHRU5UL2plc3Quc2V0dXAudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICdAdGVzdGluZy1saWJyYXJ5L2plc3QtZG9tJztcbmltcG9ydCAnd2hhdHdnLWZldGNoJztcblxuLy8gUG9seWZpbGwgVGV4dEVuY29kZXIvVGV4dERlY29kZXIgZm9yIGxpYnJhcmllcyBleHBlY3RpbmcgdGhlbSBpbiBKU0RPTS9Ob2RlXG4vLyBNdXN0IGJlIGJlZm9yZSBpbXBvcnRpbmcgTVNXIHNlcnZlclxuLy8gQHRzLWlnbm9yZVxuaWYgKHR5cGVvZiAoZ2xvYmFsIGFzIGFueSkuVGV4dEVuY29kZXIgPT09ICd1bmRlZmluZWQnKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdmFyLXJlcXVpcmVzXG4gIGNvbnN0IHsgVGV4dEVuY29kZXIgfSA9IHJlcXVpcmUoJ3V0aWwnKVxuICAvLyBAdHMtaWdub3JlXG4gIDsoZ2xvYmFsIGFzIGFueSkuVGV4dEVuY29kZXIgPSBUZXh0RW5jb2RlclxufVxuLy8gQHRzLWlnbm9yZVxuaWYgKHR5cGVvZiAoZ2xvYmFsIGFzIGFueSkuVGV4dERlY29kZXIgPT09ICd1bmRlZmluZWQnKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdmFyLXJlcXVpcmVzXG4gIGNvbnN0IHsgVGV4dERlY29kZXIgfSA9IHJlcXVpcmUoJ3V0aWwnKVxuICAvLyBAdHMtaWdub3JlXG4gIDsoZ2xvYmFsIGFzIGFueSkuVGV4dERlY29kZXIgPSBUZXh0RGVjb2RlclxufVxuXG5pbXBvcnQgeyBzZXJ2ZXIgfSBmcm9tICcuL19fdGVzdHNfXy9tc3cvc2VydmVyJ1xuXG4vLyBFbnN1cmUgZmV0Y2ggQVBJIGNsYXNzZXMgZXhpc3Qgb24gZ2xvYmFsIGZvciBtb2R1bGVzIHRoYXQgcmVmZXJlbmNlIHRoZW0gYXQgaW1wb3J0IHRpbWVcbi8vIE5leHQncyBuZXh0L3NlcnZlciBkZWZpbmVzIGNsYXNzZXMgZXh0ZW5kaW5nIGdsb2JhbCBSZXF1ZXN0L1Jlc3BvbnNlIGR1cmluZyBpbXBvcnRcbi8vIHdoaWNoIGNhbiBmYWlsIGlmIG5vdCBzZXQgdXAgZmlyc3QgaW4gSlNET00uXG4vLyBAdHMtaWdub3JlXG5pZiAodHlwZW9mIGdsb2JhbFRoaXMuUmVxdWVzdCA9PT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgLy8gQHRzLWlnbm9yZVxuICBnbG9iYWxUaGlzLlJlcXVlc3QgPSAod2luZG93IGFzIGFueSkuUmVxdWVzdFxufVxuLy8gQHRzLWlnbm9yZVxuaWYgKHR5cGVvZiBnbG9iYWxUaGlzLlJlc3BvbnNlID09PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAvLyBAdHMtaWdub3JlXG4gIGdsb2JhbFRoaXMuUmVzcG9uc2UgPSAod2luZG93IGFzIGFueSkuUmVzcG9uc2Vcbn1cbi8vIEB0cy1pZ25vcmVcbmlmICh0eXBlb2YgZ2xvYmFsVGhpcy5IZWFkZXJzID09PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAvLyBAdHMtaWdub3JlXG4gIGdsb2JhbFRoaXMuSGVhZGVycyA9ICh3aW5kb3cgYXMgYW55KS5IZWFkZXJzXG59XG5cbi8vIEFkZCBzdGF0aWMgUmVzcG9uc2UuanNvbiBpZiBtaXNzaW5nIChOZXh0UmVzcG9uc2UuanNvbiByZWxpZXMgb24gaXQpXG4vLyBAdHMtaWdub3JlXG5pZiAodHlwZW9mIGdsb2JhbFRoaXMuUmVzcG9uc2UgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiAoZ2xvYmFsVGhpcy5SZXNwb25zZSBhcyBhbnkpLmpzb24gIT09ICdmdW5jdGlvbicpIHtcbiAgLy8gQHRzLWlnbm9yZVxuICA7KGdsb2JhbFRoaXMuUmVzcG9uc2UgYXMgYW55KS5qc29uID0gKGRhdGE6IGFueSwgaW5pdD86IFJlc3BvbnNlSW5pdCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBuZXcgSGVhZGVycyhpbml0Py5oZWFkZXJzIHx8IHt9KVxuICAgIGlmICghaGVhZGVycy5oYXMoJ2NvbnRlbnQtdHlwZScpKSBoZWFkZXJzLnNldCgnY29udGVudC10eXBlJywgJ2FwcGxpY2F0aW9uL2pzb24nKVxuICAgIHJldHVybiBuZXcgUmVzcG9uc2UoSlNPTi5zdHJpbmdpZnkoZGF0YSksIHsgLi4uaW5pdCwgaGVhZGVycyB9KVxuICB9XG59XG5cbi8vIFBvbHlmaWxsIFJlc2l6ZU9ic2VydmVyIGZvciBSYWRpeCBVSSBjb21wb25lbnRzIGluIHRlc3RzXG5jbGFzcyBNb2NrUmVzaXplT2JzZXJ2ZXIge1xuICBvYnNlcnZlKCkge31cbiAgdW5vYnNlcnZlKCkge31cbiAgZGlzY29ubmVjdCgpIHt9XG59XG4vLyBAdHMtaWdub3JlXG5pZiAodHlwZW9mIChnbG9iYWwgYXMgYW55KS5SZXNpemVPYnNlcnZlciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgLy8gQHRzLWlnbm9yZVxuICA7KGdsb2JhbCBhcyBhbnkpLlJlc2l6ZU9ic2VydmVyID0gTW9ja1Jlc2l6ZU9ic2VydmVyXG59XG5cbi8vIFBvbHlmaWxsIHNjcm9sbEludG9WaWV3IGZvciBKU0RPTSBlbGVtZW50cyB1c2VkIGluIHRlc3RzXG4vLyBAdHMtaWdub3JlXG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgY29uc3QgcHJvdG8gPSAod2luZG93LkhUTUxFbGVtZW50ICYmIHdpbmRvdy5IVE1MRWxlbWVudC5wcm90b3R5cGUpIHx8IHVuZGVmaW5lZFxuICAvLyBAdHMtaWdub3JlXG4gIGlmIChwcm90byAmJiB0eXBlb2YgcHJvdG8uc2Nyb2xsSW50b1ZpZXcgIT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgcHJvdG8uc2Nyb2xsSW50b1ZpZXcgPSBmdW5jdGlvbiAoX29wdGlvbnM/OiBTY3JvbGxJbnRvVmlld09wdGlvbnMpIHsgLyogbm8tb3AgZm9yIHRlc3RzICovIH1cbiAgfVxufVxuXG4vLyBTdGFydCBNU1cgYmVmb3JlIGFsbCB0ZXN0cywgcmVzZXQgYWZ0ZXIgZWFjaCwgYW5kIGNsb3NlIGFmdGVyIGFsbFxuYmVmb3JlQWxsKCgpID0+IHNlcnZlci5saXN0ZW4oKSlcbmFmdGVyRWFjaCgoKSA9PiBzZXJ2ZXIucmVzZXRIYW5kbGVycygpKVxuYWZ0ZXJBbGwoKCkgPT4gc2VydmVyLmNsb3NlKCkpXG4iXSwibmFtZXMiOlsiZ2xvYmFsIiwiVGV4dEVuY29kZXIiLCJyZXF1aXJlIiwiVGV4dERlY29kZXIiLCJnbG9iYWxUaGlzIiwiUmVxdWVzdCIsIndpbmRvdyIsIlJlc3BvbnNlIiwiSGVhZGVycyIsImpzb24iLCJkYXRhIiwiaW5pdCIsImhlYWRlcnMiLCJoYXMiLCJzZXQiLCJKU09OIiwic3RyaW5naWZ5IiwiTW9ja1Jlc2l6ZU9ic2VydmVyIiwib2JzZXJ2ZSIsInVub2JzZXJ2ZSIsImRpc2Nvbm5lY3QiLCJSZXNpemVPYnNlcnZlciIsInByb3RvIiwiSFRNTEVsZW1lbnQiLCJwcm90b3R5cGUiLCJ1bmRlZmluZWQiLCJzY3JvbGxJbnRvVmlldyIsIl9vcHRpb25zIiwiYmVmb3JlQWxsIiwic2VydmVyIiwibGlzdGVuIiwiYWZ0ZXJFYWNoIiwicmVzZXRIYW5kbGVycyIsImFmdGVyQWxsIiwiY2xvc2UiXSwibWFwcGluZ3MiOiI7Ozs7UUFBTztRQUNBO3dCQW1CZ0I7QUFqQnZCLDhFQUE4RTtBQUM5RSxzQ0FBc0M7QUFDdEMsYUFBYTtBQUNiLElBQUksT0FBTyxBQUFDQSxPQUFlQyxXQUFXLEtBQUssYUFBYTtJQUN0RCw4REFBOEQ7SUFDOUQsTUFBTSxFQUFFQSxXQUFXLEVBQUUsR0FBR0MsUUFBUTtJQUU5QkYsT0FBZUMsV0FBVyxHQUFHQTtBQUNqQztBQUNBLGFBQWE7QUFDYixJQUFJLE9BQU8sQUFBQ0QsT0FBZUcsV0FBVyxLQUFLLGFBQWE7SUFDdEQsOERBQThEO0lBQzlELE1BQU0sRUFBRUEsV0FBVyxFQUFFLEdBQUdELFFBQVE7SUFFOUJGLE9BQWVHLFdBQVcsR0FBR0E7QUFDakM7QUFJQSwwRkFBMEY7QUFDMUYscUZBQXFGO0FBQ3JGLCtDQUErQztBQUMvQyxhQUFhO0FBQ2IsSUFBSSxPQUFPQyxXQUFXQyxPQUFPLEtBQUssZUFBZSxPQUFPQyxXQUFXLGFBQWE7SUFDOUUsYUFBYTtJQUNiRixXQUFXQyxPQUFPLEdBQUcsQUFBQ0MsT0FBZUQsT0FBTztBQUM5QztBQUNBLGFBQWE7QUFDYixJQUFJLE9BQU9ELFdBQVdHLFFBQVEsS0FBSyxlQUFlLE9BQU9ELFdBQVcsYUFBYTtJQUMvRSxhQUFhO0lBQ2JGLFdBQVdHLFFBQVEsR0FBRyxBQUFDRCxPQUFlQyxRQUFRO0FBQ2hEO0FBQ0EsYUFBYTtBQUNiLElBQUksT0FBT0gsV0FBV0ksT0FBTyxLQUFLLGVBQWUsT0FBT0YsV0FBVyxhQUFhO0lBQzlFLGFBQWE7SUFDYkYsV0FBV0ksT0FBTyxHQUFHLEFBQUNGLE9BQWVFLE9BQU87QUFDOUM7QUFFQSx1RUFBdUU7QUFDdkUsYUFBYTtBQUNiLElBQUksT0FBT0osV0FBV0csUUFBUSxLQUFLLGVBQWUsT0FBTyxBQUFDSCxXQUFXRyxRQUFRLENBQVNFLElBQUksS0FBSyxZQUFZO0lBQ3pHLGFBQWE7O0lBQ1hMLFdBQVdHLFFBQVEsQ0FBU0UsSUFBSSxHQUFHLENBQUNDLE1BQVdDO1FBQy9DLE1BQU1DLFVBQVUsSUFBSUosUUFBUUcsTUFBTUMsV0FBVyxDQUFDO1FBQzlDLElBQUksQ0FBQ0EsUUFBUUMsR0FBRyxDQUFDLGlCQUFpQkQsUUFBUUUsR0FBRyxDQUFDLGdCQUFnQjtRQUM5RCxPQUFPLElBQUlQLFNBQVNRLEtBQUtDLFNBQVMsQ0FBQ04sT0FBTztZQUFFLEdBQUdDLElBQUk7WUFBRUM7UUFBUTtJQUMvRDtBQUNGO0FBRUEsMkRBQTJEO0FBQzNELE1BQU1LO0lBQ0pDLFVBQVUsQ0FBQztJQUNYQyxZQUFZLENBQUM7SUFDYkMsYUFBYSxDQUFDO0FBQ2hCO0FBQ0EsYUFBYTtBQUNiLElBQUksT0FBTyxBQUFDcEIsT0FBZXFCLGNBQWMsS0FBSyxhQUFhO0lBQ3pELGFBQWE7O0lBQ1hyQixPQUFlcUIsY0FBYyxHQUFHSjtBQUNwQztBQUVBLDJEQUEyRDtBQUMzRCxhQUFhO0FBQ2IsSUFBSSxPQUFPWCxXQUFXLGFBQWE7SUFDakMsTUFBTWdCLFFBQVEsQUFBQ2hCLE9BQU9pQixXQUFXLElBQUlqQixPQUFPaUIsV0FBVyxDQUFDQyxTQUFTLElBQUtDO0lBQ3RFLGFBQWE7SUFDYixJQUFJSCxTQUFTLE9BQU9BLE1BQU1JLGNBQWMsS0FBSyxZQUFZO1FBQ3ZELGFBQWE7UUFDYkosTUFBTUksY0FBYyxHQUFHLFNBQVVDLFFBQWdDLEdBQTBCO0lBQzdGO0FBQ0Y7QUFFQSxvRUFBb0U7QUFDcEVDLFVBQVUsSUFBTUMsY0FBTSxDQUFDQyxNQUFNO0FBQzdCQyxVQUFVLElBQU1GLGNBQU0sQ0FBQ0csYUFBYTtBQUNwQ0MsU0FBUyxJQUFNSixjQUFNLENBQUNLLEtBQUsifQ==