74109102e416e8ae6668c20853ed8fec
"use strict";
// Mock next/dynamic to avoid loading heavy components during tests
jest.mock('next/dynamic', ()=>()=>(props)=>null);
// Mock Next.js navigation to satisfy components that call useRouter/usePathname
jest.mock('next/navigation', ()=>({
        useRouter: ()=>({
                push: jest.fn(),
                replace: jest.fn(),
                prefetch: jest.fn(),
                back: jest.fn()
            }),
        usePathname: ()=>'/messages',
        useSearchParams: ()=>({
                get: ()=>null
            })
    }));
// Mock hooks used by ChatWindow
jest.mock('@/hooks/use-conversations', ()=>({
        useConversations: ()=>({
                conversations: [
                    {
                        id: 'abc',
                        title: 'Test Conversation',
                        created_at: '',
                        updated_at: '',
                        user_id: 'user-1'
                    }
                ],
                loading: false,
                error: null,
                fetchConversations: jest.fn(),
                createConversation: jest.fn(),
                createConversationWithParticipants: jest.fn(),
                updateConversation: jest.fn(),
                deleteConversation: jest.fn()
            })
    }));
jest.mock('@/hooks/use-websocket', ()=>({
        useWebSocket: ()=>({
                isConnected: true,
                messages: [],
                typingUsers: {},
                joinConversation: jest.fn(),
                sendChatMessage: jest.fn(),
                sendTyping: jest.fn()
            })
    }));
jest.mock('@/hooks/use-mobile', ()=>({
        useIsMobile: ()=>false
    }));
jest.mock('@/hooks/use-haptics', ()=>({
        useHaptics: ()=>({
                triggerHaptic: ()=>undefined
            })
    }));
// Mock UserProfile to simply render the provided user name (header title)
jest.mock('@/components/chat/user-profile', ()=>({
        UserProfile: ({ user })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                children: user.name
            })
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _chatwindow = require("../../components/chat/chat-window");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Basic smoke tests for header rendering and popout behavior
describe('ChatWindow', ()=>{
    const baseProps = {
        chatId: 'abc',
        onToggleSidebar: ()=>{},
        sidebarCollapsed: false
    };
    test('renders header with conversation title from useConversations()', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_chatwindow.ChatWindow, {
            ...baseProps
        }));
        expect(_react1.screen.getByText('Test Conversation')).toBeInTheDocument();
    });
    test('popout button opens /messages?c=<id>&popout=1 in a new window', ()=>{
        const openSpy = jest.spyOn(window, 'open').mockImplementation(()=>null);
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_chatwindow.ChatWindow, {
            ...baseProps
        }));
        const btn = _react1.screen.getByRole('button', {
            name: /open in new window/i
        });
        _react1.fireEvent.click(btn);
        const expectedUrl = new URL('/messages', window.location.origin);
        expectedUrl.searchParams.set('c', 'abc');
        expectedUrl.searchParams.set('popout', '1');
        expect(openSpy).toHaveBeenCalledTimes(1);
        expect(openSpy).toHaveBeenCalledWith(expectedUrl.toString(), '_blank', 'noopener,noreferrer,width=520,height=720');
        openSpy.mockRestore();
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9lbGljaGFybGVzZS9DYXNjYWRlUHJvamVjdHMvRUNFLUFHRU5UL19fdGVzdHNfXy9jb21wb25lbnRzL0NoYXRXaW5kb3cudGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgcmVuZGVyLCBzY3JlZW4sIGZpcmVFdmVudCB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QnXG5pbXBvcnQgeyBDaGF0V2luZG93IH0gZnJvbSAnQC9jb21wb25lbnRzL2NoYXQvY2hhdC13aW5kb3cnXG5cbi8vIE1vY2sgbmV4dC9keW5hbWljIHRvIGF2b2lkIGxvYWRpbmcgaGVhdnkgY29tcG9uZW50cyBkdXJpbmcgdGVzdHNcbmplc3QubW9jaygnbmV4dC9keW5hbWljJywgKCkgPT4gKCkgPT4gKHByb3BzOiBhbnkpID0+IG51bGwpXG5cbi8vIE1vY2sgTmV4dC5qcyBuYXZpZ2F0aW9uIHRvIHNhdGlzZnkgY29tcG9uZW50cyB0aGF0IGNhbGwgdXNlUm91dGVyL3VzZVBhdGhuYW1lXG5qZXN0Lm1vY2soJ25leHQvbmF2aWdhdGlvbicsICgpID0+ICh7XG4gIHVzZVJvdXRlcjogKCkgPT4gKHsgcHVzaDogamVzdC5mbigpLCByZXBsYWNlOiBqZXN0LmZuKCksIHByZWZldGNoOiBqZXN0LmZuKCksIGJhY2s6IGplc3QuZm4oKSB9KSxcbiAgdXNlUGF0aG5hbWU6ICgpID0+ICcvbWVzc2FnZXMnLFxuICB1c2VTZWFyY2hQYXJhbXM6ICgpID0+ICh7IGdldDogKCkgPT4gbnVsbCB9KSxcbn0pKVxuXG4vLyBNb2NrIGhvb2tzIHVzZWQgYnkgQ2hhdFdpbmRvd1xuamVzdC5tb2NrKCdAL2hvb2tzL3VzZS1jb252ZXJzYXRpb25zJywgKCkgPT4gKHtcbiAgdXNlQ29udmVyc2F0aW9uczogKCkgPT4gKHtcbiAgICBjb252ZXJzYXRpb25zOiBbXG4gICAgICB7IGlkOiAnYWJjJywgdGl0bGU6ICdUZXN0IENvbnZlcnNhdGlvbicsIGNyZWF0ZWRfYXQ6ICcnLCB1cGRhdGVkX2F0OiAnJywgdXNlcl9pZDogJ3VzZXItMScgfSxcbiAgICBdLFxuICAgIGxvYWRpbmc6IGZhbHNlLFxuICAgIGVycm9yOiBudWxsLFxuICAgIGZldGNoQ29udmVyc2F0aW9uczogamVzdC5mbigpLFxuICAgIGNyZWF0ZUNvbnZlcnNhdGlvbjogamVzdC5mbigpLFxuICAgIGNyZWF0ZUNvbnZlcnNhdGlvbldpdGhQYXJ0aWNpcGFudHM6IGplc3QuZm4oKSxcbiAgICB1cGRhdGVDb252ZXJzYXRpb246IGplc3QuZm4oKSxcbiAgICBkZWxldGVDb252ZXJzYXRpb246IGplc3QuZm4oKSxcbiAgfSksXG59KSlcblxuamVzdC5tb2NrKCdAL2hvb2tzL3VzZS13ZWJzb2NrZXQnLCAoKSA9PiAoe1xuICB1c2VXZWJTb2NrZXQ6ICgpID0+ICh7XG4gICAgaXNDb25uZWN0ZWQ6IHRydWUsXG4gICAgbWVzc2FnZXM6IFtdLFxuICAgIHR5cGluZ1VzZXJzOiB7fSxcbiAgICBqb2luQ29udmVyc2F0aW9uOiBqZXN0LmZuKCksXG4gICAgc2VuZENoYXRNZXNzYWdlOiBqZXN0LmZuKCksXG4gICAgc2VuZFR5cGluZzogamVzdC5mbigpLFxuICB9KSxcbn0pKVxuXG5qZXN0Lm1vY2soJ0AvaG9va3MvdXNlLW1vYmlsZScsICgpID0+ICh7IHVzZUlzTW9iaWxlOiAoKSA9PiBmYWxzZSB9KSlcbmplc3QubW9jaygnQC9ob29rcy91c2UtaGFwdGljcycsICgpID0+ICh7IHVzZUhhcHRpY3M6ICgpID0+ICh7IHRyaWdnZXJIYXB0aWM6ICgpID0+IHVuZGVmaW5lZCB9KSB9KSlcblxuLy8gTW9jayBVc2VyUHJvZmlsZSB0byBzaW1wbHkgcmVuZGVyIHRoZSBwcm92aWRlZCB1c2VyIG5hbWUgKGhlYWRlciB0aXRsZSlcbmplc3QubW9jaygnQC9jb21wb25lbnRzL2NoYXQvdXNlci1wcm9maWxlJywgKCkgPT4gKHtcbiAgVXNlclByb2ZpbGU6ICh7IHVzZXIgfTogYW55KSA9PiA8ZGl2Pnt1c2VyLm5hbWV9PC9kaXY+LFxufSkpXG5cbi8vIEJhc2ljIHNtb2tlIHRlc3RzIGZvciBoZWFkZXIgcmVuZGVyaW5nIGFuZCBwb3BvdXQgYmVoYXZpb3JcblxuZGVzY3JpYmUoJ0NoYXRXaW5kb3cnLCAoKSA9PiB7XG4gIGNvbnN0IGJhc2VQcm9wcyA9IHtcbiAgICBjaGF0SWQ6ICdhYmMnLFxuICAgIG9uVG9nZ2xlU2lkZWJhcjogKCkgPT4ge30sXG4gICAgc2lkZWJhckNvbGxhcHNlZDogZmFsc2UsXG4gIH1cblxuICB0ZXN0KCdyZW5kZXJzIGhlYWRlciB3aXRoIGNvbnZlcnNhdGlvbiB0aXRsZSBmcm9tIHVzZUNvbnZlcnNhdGlvbnMoKScsICgpID0+IHtcbiAgICByZW5kZXIoPENoYXRXaW5kb3cgey4uLmJhc2VQcm9wc30gLz4pXG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ1Rlc3QgQ29udmVyc2F0aW9uJykpLnRvQmVJblRoZURvY3VtZW50KClcbiAgfSlcblxuICB0ZXN0KCdwb3BvdXQgYnV0dG9uIG9wZW5zIC9tZXNzYWdlcz9jPTxpZD4mcG9wb3V0PTEgaW4gYSBuZXcgd2luZG93JywgKCkgPT4ge1xuICAgIGNvbnN0IG9wZW5TcHkgPSBqZXN0LnNweU9uKHdpbmRvdywgJ29wZW4nKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4gbnVsbClcbiAgICByZW5kZXIoPENoYXRXaW5kb3cgey4uLmJhc2VQcm9wc30gLz4pXG5cbiAgICBjb25zdCBidG4gPSBzY3JlZW4uZ2V0QnlSb2xlKCdidXR0b24nLCB7IG5hbWU6IC9vcGVuIGluIG5ldyB3aW5kb3cvaSB9KVxuICAgIGZpcmVFdmVudC5jbGljayhidG4pXG5cbiAgICBjb25zdCBleHBlY3RlZFVybCA9IG5ldyBVUkwoJy9tZXNzYWdlcycsIHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4pXG4gICAgZXhwZWN0ZWRVcmwuc2VhcmNoUGFyYW1zLnNldCgnYycsICdhYmMnKVxuICAgIGV4cGVjdGVkVXJsLnNlYXJjaFBhcmFtcy5zZXQoJ3BvcG91dCcsICcxJylcblxuICAgIGV4cGVjdChvcGVuU3B5KS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSlcbiAgICBleHBlY3Qob3BlblNweSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoZXhwZWN0ZWRVcmwudG9TdHJpbmcoKSwgJ19ibGFuaycsICdub29wZW5lcixub3JlZmVycmVyLHdpZHRoPTUyMCxoZWlnaHQ9NzIwJylcblxuICAgIG9wZW5TcHkubW9ja1Jlc3RvcmUoKVxuICB9KVxufSlcbiJdLCJuYW1lcyI6WyJqZXN0IiwibW9jayIsInByb3BzIiwidXNlUm91dGVyIiwicHVzaCIsImZuIiwicmVwbGFjZSIsInByZWZldGNoIiwiYmFjayIsInVzZVBhdGhuYW1lIiwidXNlU2VhcmNoUGFyYW1zIiwiZ2V0IiwidXNlQ29udmVyc2F0aW9ucyIsImNvbnZlcnNhdGlvbnMiLCJpZCIsInRpdGxlIiwiY3JlYXRlZF9hdCIsInVwZGF0ZWRfYXQiLCJ1c2VyX2lkIiwibG9hZGluZyIsImVycm9yIiwiZmV0Y2hDb252ZXJzYXRpb25zIiwiY3JlYXRlQ29udmVyc2F0aW9uIiwiY3JlYXRlQ29udmVyc2F0aW9uV2l0aFBhcnRpY2lwYW50cyIsInVwZGF0ZUNvbnZlcnNhdGlvbiIsImRlbGV0ZUNvbnZlcnNhdGlvbiIsInVzZVdlYlNvY2tldCIsImlzQ29ubmVjdGVkIiwibWVzc2FnZXMiLCJ0eXBpbmdVc2VycyIsImpvaW5Db252ZXJzYXRpb24iLCJzZW5kQ2hhdE1lc3NhZ2UiLCJzZW5kVHlwaW5nIiwidXNlSXNNb2JpbGUiLCJ1c2VIYXB0aWNzIiwidHJpZ2dlckhhcHRpYyIsInVuZGVmaW5lZCIsIlVzZXJQcm9maWxlIiwidXNlciIsImRpdiIsIm5hbWUiLCJkZXNjcmliZSIsImJhc2VQcm9wcyIsImNoYXRJZCIsIm9uVG9nZ2xlU2lkZWJhciIsInNpZGViYXJDb2xsYXBzZWQiLCJ0ZXN0IiwicmVuZGVyIiwiQ2hhdFdpbmRvdyIsImV4cGVjdCIsInNjcmVlbiIsImdldEJ5VGV4dCIsInRvQmVJblRoZURvY3VtZW50Iiwib3BlblNweSIsInNweU9uIiwid2luZG93IiwibW9ja0ltcGxlbWVudGF0aW9uIiwiYnRuIiwiZ2V0QnlSb2xlIiwiZmlyZUV2ZW50IiwiY2xpY2siLCJleHBlY3RlZFVybCIsIlVSTCIsImxvY2F0aW9uIiwib3JpZ2luIiwic2VhcmNoUGFyYW1zIiwic2V0IiwidG9IYXZlQmVlbkNhbGxlZFRpbWVzIiwidG9IYXZlQmVlbkNhbGxlZFdpdGgiLCJ0b1N0cmluZyIsIm1vY2tSZXN0b3JlIl0sIm1hcHBpbmdzIjoiO0FBSUEsbUVBQW1FO0FBQ25FQSxLQUFLQyxJQUFJLENBQUMsZ0JBQWdCLElBQU0sSUFBTSxDQUFDQyxRQUFlO0FBRXRELGdGQUFnRjtBQUNoRkYsS0FBS0MsSUFBSSxDQUFDLG1CQUFtQixJQUFPLENBQUE7UUFDbENFLFdBQVcsSUFBTyxDQUFBO2dCQUFFQyxNQUFNSixLQUFLSyxFQUFFO2dCQUFJQyxTQUFTTixLQUFLSyxFQUFFO2dCQUFJRSxVQUFVUCxLQUFLSyxFQUFFO2dCQUFJRyxNQUFNUixLQUFLSyxFQUFFO1lBQUcsQ0FBQTtRQUM5RkksYUFBYSxJQUFNO1FBQ25CQyxpQkFBaUIsSUFBTyxDQUFBO2dCQUFFQyxLQUFLLElBQU07WUFBSyxDQUFBO0lBQzVDLENBQUE7QUFFQSxnQ0FBZ0M7QUFDaENYLEtBQUtDLElBQUksQ0FBQyw2QkFBNkIsSUFBTyxDQUFBO1FBQzVDVyxrQkFBa0IsSUFBTyxDQUFBO2dCQUN2QkMsZUFBZTtvQkFDYjt3QkFBRUMsSUFBSTt3QkFBT0MsT0FBTzt3QkFBcUJDLFlBQVk7d0JBQUlDLFlBQVk7d0JBQUlDLFNBQVM7b0JBQVM7aUJBQzVGO2dCQUNEQyxTQUFTO2dCQUNUQyxPQUFPO2dCQUNQQyxvQkFBb0JyQixLQUFLSyxFQUFFO2dCQUMzQmlCLG9CQUFvQnRCLEtBQUtLLEVBQUU7Z0JBQzNCa0Isb0NBQW9DdkIsS0FBS0ssRUFBRTtnQkFDM0NtQixvQkFBb0J4QixLQUFLSyxFQUFFO2dCQUMzQm9CLG9CQUFvQnpCLEtBQUtLLEVBQUU7WUFDN0IsQ0FBQTtJQUNGLENBQUE7QUFFQUwsS0FBS0MsSUFBSSxDQUFDLHlCQUF5QixJQUFPLENBQUE7UUFDeEN5QixjQUFjLElBQU8sQ0FBQTtnQkFDbkJDLGFBQWE7Z0JBQ2JDLFVBQVUsRUFBRTtnQkFDWkMsYUFBYSxDQUFDO2dCQUNkQyxrQkFBa0I5QixLQUFLSyxFQUFFO2dCQUN6QjBCLGlCQUFpQi9CLEtBQUtLLEVBQUU7Z0JBQ3hCMkIsWUFBWWhDLEtBQUtLLEVBQUU7WUFDckIsQ0FBQTtJQUNGLENBQUE7QUFFQUwsS0FBS0MsSUFBSSxDQUFDLHNCQUFzQixJQUFPLENBQUE7UUFBRWdDLGFBQWEsSUFBTTtJQUFNLENBQUE7QUFDbEVqQyxLQUFLQyxJQUFJLENBQUMsdUJBQXVCLElBQU8sQ0FBQTtRQUFFaUMsWUFBWSxJQUFPLENBQUE7Z0JBQUVDLGVBQWUsSUFBTUM7WUFBVSxDQUFBO0lBQUcsQ0FBQTtBQUVqRywwRUFBMEU7QUFDMUVwQyxLQUFLQyxJQUFJLENBQUMsa0NBQWtDLElBQU8sQ0FBQTtRQUNqRG9DLGFBQWEsQ0FBQyxFQUFFQyxJQUFJLEVBQU8saUJBQUsscUJBQUNDOzBCQUFLRCxLQUFLRSxJQUFJOztJQUNqRCxDQUFBOzs7Ozs4REEvQ2tCO3dCQUN3Qjs0QkFDZjs7Ozs7O0FBK0MzQiw2REFBNkQ7QUFFN0RDLFNBQVMsY0FBYztJQUNyQixNQUFNQyxZQUFZO1FBQ2hCQyxRQUFRO1FBQ1JDLGlCQUFpQixLQUFPO1FBQ3hCQyxrQkFBa0I7SUFDcEI7SUFFQUMsS0FBSyxrRUFBa0U7UUFDckVDLElBQUFBLGNBQU0sZ0JBQUMscUJBQUNDLHNCQUFVO1lBQUUsR0FBR04sU0FBUzs7UUFDaENPLE9BQU9DLGNBQU0sQ0FBQ0MsU0FBUyxDQUFDLHNCQUFzQkMsaUJBQWlCO0lBQ2pFO0lBRUFOLEtBQUssaUVBQWlFO1FBQ3BFLE1BQU1PLFVBQVVyRCxLQUFLc0QsS0FBSyxDQUFDQyxRQUFRLFFBQVFDLGtCQUFrQixDQUFDLElBQU07UUFDcEVULElBQUFBLGNBQU0sZ0JBQUMscUJBQUNDLHNCQUFVO1lBQUUsR0FBR04sU0FBUzs7UUFFaEMsTUFBTWUsTUFBTVAsY0FBTSxDQUFDUSxTQUFTLENBQUMsVUFBVTtZQUFFbEIsTUFBTTtRQUFzQjtRQUNyRW1CLGlCQUFTLENBQUNDLEtBQUssQ0FBQ0g7UUFFaEIsTUFBTUksY0FBYyxJQUFJQyxJQUFJLGFBQWFQLE9BQU9RLFFBQVEsQ0FBQ0MsTUFBTTtRQUMvREgsWUFBWUksWUFBWSxDQUFDQyxHQUFHLENBQUMsS0FBSztRQUNsQ0wsWUFBWUksWUFBWSxDQUFDQyxHQUFHLENBQUMsVUFBVTtRQUV2Q2pCLE9BQU9JLFNBQVNjLHFCQUFxQixDQUFDO1FBQ3RDbEIsT0FBT0ksU0FBU2Usb0JBQW9CLENBQUNQLFlBQVlRLFFBQVEsSUFBSSxVQUFVO1FBRXZFaEIsUUFBUWlCLFdBQVc7SUFDckI7QUFDRiJ9