072db3e4cbbd28f0b339efe5baddfc19
// Polyfills that must load before any test framework or modules
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
require("whatwg-fetch");
// TextEncoder/TextDecoder for libraries (e.g., MSW interceptors) that expect them in Node/JSDOM
// @ts-ignore
if (typeof global.TextEncoder === 'undefined') {
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    const { TextEncoder } = require('util');
    global.TextEncoder = TextEncoder;
}
// @ts-ignore
if (typeof global.TextDecoder === 'undefined') {
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    const { TextDecoder } = require('util');
    global.TextDecoder = TextDecoder;
}
// Provide Web Streams polyfills used by MSW in Node/JSDOM
try {
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    const webStreams = require('stream/web');
    // @ts-ignore
    if (typeof global.TransformStream === 'undefined' && webStreams?.TransformStream) {
        // @ts-ignore
        ;
        global.TransformStream = webStreams.TransformStream;
    }
    // @ts-ignore
    if (typeof global.ReadableStream === 'undefined' && webStreams?.ReadableStream) {
        // @ts-ignore
        ;
        global.ReadableStream = webStreams.ReadableStream;
    }
    // @ts-ignore
    if (typeof global.WritableStream === 'undefined' && webStreams?.WritableStream) {
        // @ts-ignore
        ;
        global.WritableStream = webStreams.WritableStream;
    }
} catch  {}
// Ensure fetch API classes exist on global for modules that reference them at import time
// Next's next/server defines classes extending global Request/Response during import
// which can fail if not set up first in JSDOM.
// @ts-ignore
if (typeof globalThis.Request === 'undefined' && typeof window !== 'undefined') {
    // @ts-ignore
    globalThis.Request = window.Request;
}
// @ts-ignore
if (typeof globalThis.Response === 'undefined' && typeof window !== 'undefined') {
    // @ts-ignore
    globalThis.Response = window.Response;
}
// @ts-ignore
if (typeof globalThis.Headers === 'undefined' && typeof window !== 'undefined') {
    // @ts-ignore
    globalThis.Headers = window.Headers;
}
// Add static Response.json if missing (NextResponse.json relies on it)
// @ts-ignore
if (typeof globalThis.Response !== 'undefined' && typeof globalThis.Response.json !== 'function') {
    // @ts-ignore
    ;
    globalThis.Response.json = (data, init)=>{
        const headers = new Headers(init?.headers || {});
        if (!headers.has('content-type')) headers.set('content-type', 'application/json');
        return new Response(JSON.stringify(data), {
            ...init,
            headers
        });
    };
}
// Polyfill ResizeObserver for Radix UI components in tests
class MockResizeObserver {
    observe() {}
    unobserve() {}
    disconnect() {}
}
// @ts-ignore
if (typeof global.ResizeObserver === 'undefined') {
    // @ts-ignore
    ;
    global.ResizeObserver = MockResizeObserver;
}
// Basic BroadcastChannel polyfill used by MSW's ws module
// @ts-ignore
if (typeof global.BroadcastChannel === 'undefined') {
    class MockBroadcastChannel {
        constructor(name){
            this.onmessage = null;
            this.name = name;
        }
        postMessage(_msg) {}
        close() {}
        addEventListener(_type, _listener) {}
        removeEventListener(_type, _listener) {}
        dispatchEvent(_event) {
            return true;
        }
    }
    // @ts-ignore
    ;
    global.BroadcastChannel = MockBroadcastChannel;
}

//# sourceMappingURL=data:application/json;base64,