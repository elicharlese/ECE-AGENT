bdfbdc8608163df4cf310b3a29a0ffd6
"use strict";
jest.mock('@/services/mcp-service', ()=>{
    const mockTools = [
        {
            id: 'db-query',
            name: 'Database Query',
            description: 'Execute SQL queries',
            category: 'database',
            enabled: true
        }
    ];
    const listeners = [];
    return {
        mcpService: {
            getTools: jest.fn(()=>mockTools),
            getGateways: jest.fn(()=>[]),
            getMcpStatus: jest.fn(()=>({
                    connected: false,
                    sessionId: null,
                    streaming: false,
                    lastEventAt: null
                })),
            onMcpEvent: jest.fn((cb)=>listeners.push(cb)),
            offMcpEvent: jest.fn((cb)=>{
                const i = listeners.indexOf(cb);
                if (i >= 0) listeners.splice(i, 1);
            }),
            toggleTool: jest.fn(),
            connectGitHub: jest.fn(async ()=>({})),
            disconnectGitHub: jest.fn(),
            startMcpStreaming: jest.fn(async ()=>{}),
            stopMcpStreaming: jest.fn(()=>{}),
            executeTool: jest.fn(async ()=>({
                    success: true
                }))
        }
    };
});
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _mcptoolspanel = require("../../components/mcp/mcp-tools-panel");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
describe('MCPToolsPanel', ()=>{
    it('renders header and GitHub gateway section', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_mcptoolspanel.MCPToolsPanel, {
            chatId: "test-chat"
        }));
        expect(_react1.screen.getByText('MCP Tools')).toBeInTheDocument();
        expect(_react1.screen.getByText('GitHub Gateway')).toBeInTheDocument();
    });
    it('renders available tools in the current category', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_mcptoolspanel.MCPToolsPanel, {
            chatId: "test-chat"
        }));
        // Default expanded category is 'database', so our mocked tool should be visible
        expect(_react1.screen.getByText('Database Query')).toBeInTheDocument();
        expect(_react1.screen.getByText('Tools')).toBeInTheDocument();
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9lbGljaGFybGVzZS9DYXNjYWRlUHJvamVjdHMvRUNFLUFHRU5UL19fdGVzdHNfXy9jb21wb25lbnRzL01DUFRvb2xzUGFuZWwudGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgcmVuZGVyLCBzY3JlZW4gfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0J1xuaW1wb3J0IHsgTUNQVG9vbHNQYW5lbCB9IGZyb20gJ0AvY29tcG9uZW50cy9tY3AvbWNwLXRvb2xzLXBhbmVsJ1xuXG5qZXN0Lm1vY2soJ0Avc2VydmljZXMvbWNwLXNlcnZpY2UnLCAoKSA9PiB7XG4gIGNvbnN0IG1vY2tUb29scyA9IFtcbiAgICB7XG4gICAgICBpZDogJ2RiLXF1ZXJ5JyxcbiAgICAgIG5hbWU6ICdEYXRhYmFzZSBRdWVyeScsXG4gICAgICBkZXNjcmlwdGlvbjogJ0V4ZWN1dGUgU1FMIHF1ZXJpZXMnLFxuICAgICAgY2F0ZWdvcnk6ICdkYXRhYmFzZScsXG4gICAgICBlbmFibGVkOiB0cnVlLFxuICAgIH0sXG4gIF1cbiAgY29uc3QgbGlzdGVuZXJzOiBBcnJheTwoZTogc3RyaW5nKSA9PiB2b2lkPiA9IFtdXG4gIHJldHVybiB7XG4gICAgbWNwU2VydmljZToge1xuICAgICAgZ2V0VG9vbHM6IGplc3QuZm4oKCkgPT4gbW9ja1Rvb2xzKSxcbiAgICAgIGdldEdhdGV3YXlzOiBqZXN0LmZuKCgpID0+IFtdKSxcbiAgICAgIGdldE1jcFN0YXR1czogamVzdC5mbigoKSA9PiAoeyBjb25uZWN0ZWQ6IGZhbHNlLCBzZXNzaW9uSWQ6IG51bGwsIHN0cmVhbWluZzogZmFsc2UsIGxhc3RFdmVudEF0OiBudWxsIH0pKSxcbiAgICAgIG9uTWNwRXZlbnQ6IGplc3QuZm4oKGNiOiAoZTogc3RyaW5nKSA9PiB2b2lkKSA9PiBsaXN0ZW5lcnMucHVzaChjYikpLFxuICAgICAgb2ZmTWNwRXZlbnQ6IGplc3QuZm4oKGNiOiAoZTogc3RyaW5nKSA9PiB2b2lkKSA9PiB7XG4gICAgICAgIGNvbnN0IGkgPSBsaXN0ZW5lcnMuaW5kZXhPZihjYilcbiAgICAgICAgaWYgKGkgPj0gMCkgbGlzdGVuZXJzLnNwbGljZShpLCAxKVxuICAgICAgfSksXG4gICAgICB0b2dnbGVUb29sOiBqZXN0LmZuKCksXG4gICAgICBjb25uZWN0R2l0SHViOiBqZXN0LmZuKGFzeW5jICgpID0+ICh7fSkpLFxuICAgICAgZGlzY29ubmVjdEdpdEh1YjogamVzdC5mbigpLFxuICAgICAgc3RhcnRNY3BTdHJlYW1pbmc6IGplc3QuZm4oYXN5bmMgKCkgPT4ge30pLFxuICAgICAgc3RvcE1jcFN0cmVhbWluZzogamVzdC5mbigoKSA9PiB7fSksXG4gICAgICBleGVjdXRlVG9vbDogamVzdC5mbihhc3luYyAoKSA9PiAoeyBzdWNjZXNzOiB0cnVlIH0pKSxcbiAgICB9LFxuICB9XG59KVxuXG5kZXNjcmliZSgnTUNQVG9vbHNQYW5lbCcsICgpID0+IHtcbiAgaXQoJ3JlbmRlcnMgaGVhZGVyIGFuZCBHaXRIdWIgZ2F0ZXdheSBzZWN0aW9uJywgKCkgPT4ge1xuICAgIHJlbmRlcig8TUNQVG9vbHNQYW5lbCBjaGF0SWQ9XCJ0ZXN0LWNoYXRcIiAvPilcblxuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdNQ1AgVG9vbHMnKSkudG9CZUluVGhlRG9jdW1lbnQoKVxuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdHaXRIdWIgR2F0ZXdheScpKS50b0JlSW5UaGVEb2N1bWVudCgpXG4gIH0pXG5cbiAgaXQoJ3JlbmRlcnMgYXZhaWxhYmxlIHRvb2xzIGluIHRoZSBjdXJyZW50IGNhdGVnb3J5JywgKCkgPT4ge1xuICAgIHJlbmRlcig8TUNQVG9vbHNQYW5lbCBjaGF0SWQ9XCJ0ZXN0LWNoYXRcIiAvPilcblxuICAgIC8vIERlZmF1bHQgZXhwYW5kZWQgY2F0ZWdvcnkgaXMgJ2RhdGFiYXNlJywgc28gb3VyIG1vY2tlZCB0b29sIHNob3VsZCBiZSB2aXNpYmxlXG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ0RhdGFiYXNlIFF1ZXJ5JykpLnRvQmVJblRoZURvY3VtZW50KClcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnVG9vbHMnKSkudG9CZUluVGhlRG9jdW1lbnQoKVxuICB9KVxufSlcbiJdLCJuYW1lcyI6WyJqZXN0IiwibW9jayIsIm1vY2tUb29scyIsImlkIiwibmFtZSIsImRlc2NyaXB0aW9uIiwiY2F0ZWdvcnkiLCJlbmFibGVkIiwibGlzdGVuZXJzIiwibWNwU2VydmljZSIsImdldFRvb2xzIiwiZm4iLCJnZXRHYXRld2F5cyIsImdldE1jcFN0YXR1cyIsImNvbm5lY3RlZCIsInNlc3Npb25JZCIsInN0cmVhbWluZyIsImxhc3RFdmVudEF0Iiwib25NY3BFdmVudCIsImNiIiwicHVzaCIsIm9mZk1jcEV2ZW50IiwiaSIsImluZGV4T2YiLCJzcGxpY2UiLCJ0b2dnbGVUb29sIiwiY29ubmVjdEdpdEh1YiIsImRpc2Nvbm5lY3RHaXRIdWIiLCJzdGFydE1jcFN0cmVhbWluZyIsInN0b3BNY3BTdHJlYW1pbmciLCJleGVjdXRlVG9vbCIsInN1Y2Nlc3MiLCJkZXNjcmliZSIsIml0IiwicmVuZGVyIiwiTUNQVG9vbHNQYW5lbCIsImNoYXRJZCIsImV4cGVjdCIsInNjcmVlbiIsImdldEJ5VGV4dCIsInRvQmVJblRoZURvY3VtZW50Il0sIm1hcHBpbmdzIjoiO0FBSUFBLEtBQUtDLElBQUksQ0FBQywwQkFBMEI7SUFDbEMsTUFBTUMsWUFBWTtRQUNoQjtZQUNFQyxJQUFJO1lBQ0pDLE1BQU07WUFDTkMsYUFBYTtZQUNiQyxVQUFVO1lBQ1ZDLFNBQVM7UUFDWDtLQUNEO0lBQ0QsTUFBTUMsWUFBd0MsRUFBRTtJQUNoRCxPQUFPO1FBQ0xDLFlBQVk7WUFDVkMsVUFBVVYsS0FBS1csRUFBRSxDQUFDLElBQU1UO1lBQ3hCVSxhQUFhWixLQUFLVyxFQUFFLENBQUMsSUFBTSxFQUFFO1lBQzdCRSxjQUFjYixLQUFLVyxFQUFFLENBQUMsSUFBTyxDQUFBO29CQUFFRyxXQUFXO29CQUFPQyxXQUFXO29CQUFNQyxXQUFXO29CQUFPQyxhQUFhO2dCQUFLLENBQUE7WUFDdEdDLFlBQVlsQixLQUFLVyxFQUFFLENBQUMsQ0FBQ1EsS0FBNEJYLFVBQVVZLElBQUksQ0FBQ0Q7WUFDaEVFLGFBQWFyQixLQUFLVyxFQUFFLENBQUMsQ0FBQ1E7Z0JBQ3BCLE1BQU1HLElBQUlkLFVBQVVlLE9BQU8sQ0FBQ0o7Z0JBQzVCLElBQUlHLEtBQUssR0FBR2QsVUFBVWdCLE1BQU0sQ0FBQ0YsR0FBRztZQUNsQztZQUNBRyxZQUFZekIsS0FBS1csRUFBRTtZQUNuQmUsZUFBZTFCLEtBQUtXLEVBQUUsQ0FBQyxVQUFhLENBQUEsQ0FBQyxDQUFBO1lBQ3JDZ0Isa0JBQWtCM0IsS0FBS1csRUFBRTtZQUN6QmlCLG1CQUFtQjVCLEtBQUtXLEVBQUUsQ0FBQyxXQUFhO1lBQ3hDa0Isa0JBQWtCN0IsS0FBS1csRUFBRSxDQUFDLEtBQU87WUFDakNtQixhQUFhOUIsS0FBS1csRUFBRSxDQUFDLFVBQWEsQ0FBQTtvQkFBRW9CLFNBQVM7Z0JBQUssQ0FBQTtRQUNwRDtJQUNGO0FBQ0Y7Ozs7OzhEQWpDa0I7d0JBQ2E7K0JBQ0Q7Ozs7OztBQWlDOUJDLFNBQVMsaUJBQWlCO0lBQ3hCQyxHQUFHLDZDQUE2QztRQUM5Q0MsSUFBQUEsY0FBTSxnQkFBQyxxQkFBQ0MsNEJBQWE7WUFBQ0MsUUFBTzs7UUFFN0JDLE9BQU9DLGNBQU0sQ0FBQ0MsU0FBUyxDQUFDLGNBQWNDLGlCQUFpQjtRQUN2REgsT0FBT0MsY0FBTSxDQUFDQyxTQUFTLENBQUMsbUJBQW1CQyxpQkFBaUI7SUFDOUQ7SUFFQVAsR0FBRyxtREFBbUQ7UUFDcERDLElBQUFBLGNBQU0sZ0JBQUMscUJBQUNDLDRCQUFhO1lBQUNDLFFBQU87O1FBRTdCLGdGQUFnRjtRQUNoRkMsT0FBT0MsY0FBTSxDQUFDQyxTQUFTLENBQUMsbUJBQW1CQyxpQkFBaUI7UUFDNURILE9BQU9DLGNBQU0sQ0FBQ0MsU0FBUyxDQUFDLFVBQVVDLGlCQUFpQjtJQUNyRDtBQUNGIn0=