7ad83bbe0377189662e5d072d8474f66
"use strict";
// Mock the useUser hook
jest.mock('@/hooks/use-user', ()=>({
        useUser: ()=>({
                user: {
                    email: 'john@company.com'
                }
            })
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("@testing-library/react");
const _CheckInOverview = require("../../components/profile/CheckInOverview");
describe('CheckInOverview', ()=>{
    it('renders loading state initially', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CheckInOverview.CheckInOverview, {}));
        // Should show loading skeletons
        const skeletons = document.querySelectorAll('.animate-pulse');
        expect(skeletons.length).toBeGreaterThan(0);
    });
    it('renders welcome message after loading', async ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CheckInOverview.CheckInOverview, {}));
        await (0, _react.waitFor)(()=>{
            expect(_react.screen.getByText('Welcome back!')).toBeInTheDocument();
            expect(_react.screen.getByText("Here's what's happening in your workspace")).toBeInTheDocument();
        });
    });
    it('displays user avatar with first letter', async ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CheckInOverview.CheckInOverview, {}));
        await (0, _react.waitFor)(()=>{
            expect(_react.screen.getByText('J')).toBeInTheDocument(); // First letter of john@company.com
        });
    });
    it('renders quick action cards', async ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CheckInOverview.CheckInOverview, {}));
        await (0, _react.waitFor)(()=>{
            expect(_react.screen.getByText('View Messages')).toBeInTheDocument();
            expect(_react.screen.getByText('Check Mentions')).toBeInTheDocument();
            expect(_react.screen.getByText('Review Docs')).toBeInTheDocument();
            expect(_react.screen.getByText('Calendar')).toBeInTheDocument();
        });
    });
    it('displays activity summary', async ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CheckInOverview.CheckInOverview, {}));
        await (0, _react.waitFor)(()=>{
            expect(_react.screen.getByText('Activity Summary')).toBeInTheDocument();
            expect(_react.screen.getByText('Active Conversations')).toBeInTheDocument();
            expect(_react.screen.getByText('Pending Tasks')).toBeInTheDocument();
            expect(_react.screen.getByText('Upcoming Events')).toBeInTheDocument();
        });
    });
    it('shows recent activity timeline', async ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CheckInOverview.CheckInOverview, {}));
        await (0, _react.waitFor)(()=>{
            expect(_react.screen.getByText('Recent Activity')).toBeInTheDocument();
            expect(_react.screen.getByText('New message in #general')).toBeInTheDocument();
            expect(_react.screen.getByText('Document "Project Plan" updated')).toBeInTheDocument();
            expect(_react.screen.getByText('Mentioned in team discussion')).toBeInTheDocument();
        });
    });
    it('displays badges for non-zero counts', async ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CheckInOverview.CheckInOverview, {}));
        await (0, _react.waitFor)(()=>{
            // Should show badges for items with counts > 0
            const badges = _react.screen.getAllByText(/^\d+$/) // Numbers only
            ;
            expect(badges.length).toBeGreaterThan(0);
        });
    });
    it('has proper responsive grid layout', async ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CheckInOverview.CheckInOverview, {}));
        await (0, _react.waitFor)(()=>{
            const gridContainer = _react.screen.getByText('View Messages').closest('.grid');
            expect(gridContainer).toHaveClass('gap-4', 'md:grid-cols-2', 'lg:grid-cols-4');
        });
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9lbGljaGFybGVzZS9DYXNjYWRlUHJvamVjdHMvRUNFLUFHRU5UL19fdGVzdHNfXy9jb21wb25lbnRzL0NoZWNrSW5PdmVydmlldy50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZW5kZXIsIHNjcmVlbiwgd2FpdEZvciB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QnXG5pbXBvcnQgeyBDaGVja0luT3ZlcnZpZXcgfSBmcm9tICdAL2NvbXBvbmVudHMvcHJvZmlsZS9DaGVja0luT3ZlcnZpZXcnXG5cbi8vIE1vY2sgdGhlIHVzZVVzZXIgaG9va1xuamVzdC5tb2NrKCdAL2hvb2tzL3VzZS11c2VyJywgKCkgPT4gKHtcbiAgdXNlVXNlcjogKCkgPT4gKHtcbiAgICB1c2VyOiB7XG4gICAgICBlbWFpbDogJ2pvaG5AY29tcGFueS5jb20nXG4gICAgfVxuICB9KVxufSkpXG5cbmRlc2NyaWJlKCdDaGVja0luT3ZlcnZpZXcnLCAoKSA9PiB7XG4gIGl0KCdyZW5kZXJzIGxvYWRpbmcgc3RhdGUgaW5pdGlhbGx5JywgKCkgPT4ge1xuICAgIHJlbmRlcig8Q2hlY2tJbk92ZXJ2aWV3IC8+KVxuICAgIFxuICAgIC8vIFNob3VsZCBzaG93IGxvYWRpbmcgc2tlbGV0b25zXG4gICAgY29uc3Qgc2tlbGV0b25zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmFuaW1hdGUtcHVsc2UnKVxuICAgIGV4cGVjdChza2VsZXRvbnMubGVuZ3RoKS50b0JlR3JlYXRlclRoYW4oMClcbiAgfSlcblxuICBpdCgncmVuZGVycyB3ZWxjb21lIG1lc3NhZ2UgYWZ0ZXIgbG9hZGluZycsIGFzeW5jICgpID0+IHtcbiAgICByZW5kZXIoPENoZWNrSW5PdmVydmlldyAvPilcbiAgICBcbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdXZWxjb21lIGJhY2shJykpLnRvQmVJblRoZURvY3VtZW50KClcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KFwiSGVyZSdzIHdoYXQncyBoYXBwZW5pbmcgaW4geW91ciB3b3Jrc3BhY2VcIikpLnRvQmVJblRoZURvY3VtZW50KClcbiAgICB9KVxuICB9KVxuXG4gIGl0KCdkaXNwbGF5cyB1c2VyIGF2YXRhciB3aXRoIGZpcnN0IGxldHRlcicsIGFzeW5jICgpID0+IHtcbiAgICByZW5kZXIoPENoZWNrSW5PdmVydmlldyAvPilcbiAgICBcbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdKJykpLnRvQmVJblRoZURvY3VtZW50KCkgLy8gRmlyc3QgbGV0dGVyIG9mIGpvaG5AY29tcGFueS5jb21cbiAgICB9KVxuICB9KVxuXG4gIGl0KCdyZW5kZXJzIHF1aWNrIGFjdGlvbiBjYXJkcycsIGFzeW5jICgpID0+IHtcbiAgICByZW5kZXIoPENoZWNrSW5PdmVydmlldyAvPilcbiAgICBcbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdWaWV3IE1lc3NhZ2VzJykpLnRvQmVJblRoZURvY3VtZW50KClcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdDaGVjayBNZW50aW9ucycpKS50b0JlSW5UaGVEb2N1bWVudCgpXG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnUmV2aWV3IERvY3MnKSkudG9CZUluVGhlRG9jdW1lbnQoKVxuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ0NhbGVuZGFyJykpLnRvQmVJblRoZURvY3VtZW50KClcbiAgICB9KVxuICB9KVxuXG4gIGl0KCdkaXNwbGF5cyBhY3Rpdml0eSBzdW1tYXJ5JywgYXN5bmMgKCkgPT4ge1xuICAgIHJlbmRlcig8Q2hlY2tJbk92ZXJ2aWV3IC8+KVxuICAgIFxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ0FjdGl2aXR5IFN1bW1hcnknKSkudG9CZUluVGhlRG9jdW1lbnQoKVxuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ0FjdGl2ZSBDb252ZXJzYXRpb25zJykpLnRvQmVJblRoZURvY3VtZW50KClcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdQZW5kaW5nIFRhc2tzJykpLnRvQmVJblRoZURvY3VtZW50KClcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdVcGNvbWluZyBFdmVudHMnKSkudG9CZUluVGhlRG9jdW1lbnQoKVxuICAgIH0pXG4gIH0pXG5cbiAgaXQoJ3Nob3dzIHJlY2VudCBhY3Rpdml0eSB0aW1lbGluZScsIGFzeW5jICgpID0+IHtcbiAgICByZW5kZXIoPENoZWNrSW5PdmVydmlldyAvPilcbiAgICBcbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdSZWNlbnQgQWN0aXZpdHknKSkudG9CZUluVGhlRG9jdW1lbnQoKVxuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ05ldyBtZXNzYWdlIGluICNnZW5lcmFsJykpLnRvQmVJblRoZURvY3VtZW50KClcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdEb2N1bWVudCBcIlByb2plY3QgUGxhblwiIHVwZGF0ZWQnKSkudG9CZUluVGhlRG9jdW1lbnQoKVxuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ01lbnRpb25lZCBpbiB0ZWFtIGRpc2N1c3Npb24nKSkudG9CZUluVGhlRG9jdW1lbnQoKVxuICAgIH0pXG4gIH0pXG5cbiAgaXQoJ2Rpc3BsYXlzIGJhZGdlcyBmb3Igbm9uLXplcm8gY291bnRzJywgYXN5bmMgKCkgPT4ge1xuICAgIHJlbmRlcig8Q2hlY2tJbk92ZXJ2aWV3IC8+KVxuICAgIFxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgLy8gU2hvdWxkIHNob3cgYmFkZ2VzIGZvciBpdGVtcyB3aXRoIGNvdW50cyA+IDBcbiAgICAgIGNvbnN0IGJhZGdlcyA9IHNjcmVlbi5nZXRBbGxCeVRleHQoL15cXGQrJC8pIC8vIE51bWJlcnMgb25seVxuICAgICAgZXhwZWN0KGJhZGdlcy5sZW5ndGgpLnRvQmVHcmVhdGVyVGhhbigwKVxuICAgIH0pXG4gIH0pXG5cbiAgaXQoJ2hhcyBwcm9wZXIgcmVzcG9uc2l2ZSBncmlkIGxheW91dCcsIGFzeW5jICgpID0+IHtcbiAgICByZW5kZXIoPENoZWNrSW5PdmVydmlldyAvPilcbiAgICBcbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgIGNvbnN0IGdyaWRDb250YWluZXIgPSBzY3JlZW4uZ2V0QnlUZXh0KCdWaWV3IE1lc3NhZ2VzJykuY2xvc2VzdCgnLmdyaWQnKVxuICAgICAgZXhwZWN0KGdyaWRDb250YWluZXIpLnRvSGF2ZUNsYXNzKCdnYXAtNCcsICdtZDpncmlkLWNvbHMtMicsICdsZzpncmlkLWNvbHMtNCcpXG4gICAgfSlcbiAgfSlcbn0pXG4iXSwibmFtZXMiOlsiamVzdCIsIm1vY2siLCJ1c2VVc2VyIiwidXNlciIsImVtYWlsIiwiZGVzY3JpYmUiLCJpdCIsInJlbmRlciIsIkNoZWNrSW5PdmVydmlldyIsInNrZWxldG9ucyIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvckFsbCIsImV4cGVjdCIsImxlbmd0aCIsInRvQmVHcmVhdGVyVGhhbiIsIndhaXRGb3IiLCJzY3JlZW4iLCJnZXRCeVRleHQiLCJ0b0JlSW5UaGVEb2N1bWVudCIsImJhZGdlcyIsImdldEFsbEJ5VGV4dCIsImdyaWRDb250YWluZXIiLCJjbG9zZXN0IiwidG9IYXZlQ2xhc3MiXSwibWFwcGluZ3MiOiI7QUFHQSx3QkFBd0I7QUFDeEJBLEtBQUtDLElBQUksQ0FBQyxvQkFBb0IsSUFBTyxDQUFBO1FBQ25DQyxTQUFTLElBQU8sQ0FBQTtnQkFDZEMsTUFBTTtvQkFDSkMsT0FBTztnQkFDVDtZQUNGLENBQUE7SUFDRixDQUFBOzs7Ozt1QkFWd0M7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