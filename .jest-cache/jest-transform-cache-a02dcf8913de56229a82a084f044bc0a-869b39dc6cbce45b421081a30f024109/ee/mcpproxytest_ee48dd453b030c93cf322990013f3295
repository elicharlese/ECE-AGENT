50f04f6db9ecc39361f607cf26f151c4
// Mock NextResponse.json to produce a standard Response with JSON body
"use strict";
jest.mock('next/server', ()=>({
        NextResponse: {
            json: (data, init)=>new Response(JSON.stringify(data), {
                    status: init?.status ?? 200,
                    headers: {
                        'content-type': 'application/json'
                    }
                })
        }
    }));
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
describe('MCP GitHub Proxy', ()=>{
    it('POST /api/mcp/github returns 400 when PAT header missing', async ()=>{
        const { POST } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../app/api/mcp/github/route")));
        const req = new Request('http://localhost/api/mcp/github', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                hello: 'world'
            })
        });
        const res = await POST(req);
        expect(res.status).toBe(400);
        const json = await res.json();
        expect(json.error).toMatch(/Missing GitHub PAT/i);
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9lbGljaGFybGVzZS9DYXNjYWRlUHJvamVjdHMvRUNFLUFHRU5UL19fdGVzdHNfXy9hcGkvbWNwLnByb3h5LnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gTW9jayBOZXh0UmVzcG9uc2UuanNvbiB0byBwcm9kdWNlIGEgc3RhbmRhcmQgUmVzcG9uc2Ugd2l0aCBKU09OIGJvZHlcbmplc3QubW9jaygnbmV4dC9zZXJ2ZXInLCAoKSA9PiAoe1xuICBOZXh0UmVzcG9uc2U6IHtcbiAgICBqc29uOiAoZGF0YTogYW55LCBpbml0PzogUmVzcG9uc2VJbml0ICYgeyBzdGF0dXM/OiBudW1iZXIgfSkgPT5cbiAgICAgIG5ldyBSZXNwb25zZShKU09OLnN0cmluZ2lmeShkYXRhKSwge1xuICAgICAgICBzdGF0dXM6IChpbml0IGFzIGFueSk/LnN0YXR1cyA/PyAyMDAsXG4gICAgICAgIGhlYWRlcnM6IHsgJ2NvbnRlbnQtdHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyB9LFxuICAgICAgfSksXG4gIH0sXG59KSlcblxuZGVzY3JpYmUoJ01DUCBHaXRIdWIgUHJveHknLCAoKSA9PiB7XG4gIGl0KCdQT1NUIC9hcGkvbWNwL2dpdGh1YiByZXR1cm5zIDQwMCB3aGVuIFBBVCBoZWFkZXIgbWlzc2luZycsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCB7IFBPU1QgfSA9IGF3YWl0IGltcG9ydCgnQC9hcHAvYXBpL21jcC9naXRodWIvcm91dGUnKVxuXG4gICAgY29uc3QgcmVxID0gbmV3IFJlcXVlc3QoJ2h0dHA6Ly9sb2NhbGhvc3QvYXBpL21jcC9naXRodWInLCB7XG4gICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgIGhlYWRlcnM6IHsgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyB9LFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoeyBoZWxsbzogJ3dvcmxkJyB9KSxcbiAgICB9KVxuXG4gICAgY29uc3QgcmVzID0gYXdhaXQgUE9TVChyZXEgYXMgYW55KVxuICAgIGV4cGVjdChyZXMuc3RhdHVzKS50b0JlKDQwMClcbiAgICBjb25zdCBqc29uID0gYXdhaXQgcmVzLmpzb24oKVxuICAgIGV4cGVjdChqc29uLmVycm9yKS50b01hdGNoKC9NaXNzaW5nIEdpdEh1YiBQQVQvaSlcbiAgfSlcbn0pXG4iXSwibmFtZXMiOlsiamVzdCIsIm1vY2siLCJOZXh0UmVzcG9uc2UiLCJqc29uIiwiZGF0YSIsImluaXQiLCJSZXNwb25zZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJzdGF0dXMiLCJoZWFkZXJzIiwiZGVzY3JpYmUiLCJpdCIsIlBPU1QiLCJyZXEiLCJSZXF1ZXN0IiwibWV0aG9kIiwiYm9keSIsImhlbGxvIiwicmVzIiwiZXhwZWN0IiwidG9CZSIsImVycm9yIiwidG9NYXRjaCJdLCJtYXBwaW5ncyI6IkFBQUEsdUVBQXVFOztBQUN2RUEsS0FBS0MsSUFBSSxDQUFDLGVBQWUsSUFBTyxDQUFBO1FBQzlCQyxjQUFjO1lBQ1pDLE1BQU0sQ0FBQ0MsTUFBV0MsT0FDaEIsSUFBSUMsU0FBU0MsS0FBS0MsU0FBUyxDQUFDSixPQUFPO29CQUNqQ0ssUUFBUSxBQUFDSixNQUFjSSxVQUFVO29CQUNqQ0MsU0FBUzt3QkFBRSxnQkFBZ0I7b0JBQW1CO2dCQUNoRDtRQUNKO0lBQ0YsQ0FBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUFDLFNBQVMsb0JBQW9CO0lBQzNCQyxHQUFHLDREQUE0RDtRQUM3RCxNQUFNLEVBQUVDLElBQUksRUFBRSxHQUFHLE1BQU0sbUVBQUEsUUFBTztRQUU5QixNQUFNQyxNQUFNLElBQUlDLFFBQVEsbUNBQW1DO1lBQ3pEQyxRQUFRO1lBQ1JOLFNBQVM7Z0JBQUUsZ0JBQWdCO1lBQW1CO1lBQzlDTyxNQUFNVixLQUFLQyxTQUFTLENBQUM7Z0JBQUVVLE9BQU87WUFBUTtRQUN4QztRQUVBLE1BQU1DLE1BQU0sTUFBTU4sS0FBS0M7UUFDdkJNLE9BQU9ELElBQUlWLE1BQU0sRUFBRVksSUFBSSxDQUFDO1FBQ3hCLE1BQU1sQixPQUFPLE1BQU1nQixJQUFJaEIsSUFBSTtRQUMzQmlCLE9BQU9qQixLQUFLbUIsS0FBSyxFQUFFQyxPQUFPLENBQUM7SUFDN0I7QUFDRiJ9