ccfc432301b4f75b24a796fbea775216
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get useAgentsQuery () {
        return useAgentsQuery;
    },
    get useCreateAgentMutation () {
        return useCreateAgentMutation;
    }
});
const _reactquery = require("@tanstack/react-query");
const _agentservice = require("../services/agent-service");
function useAgentsQuery() {
    return (0, _reactquery.useQuery)({
        queryKey: [
            'agents'
        ],
        queryFn: ()=>_agentservice.agentService.getAgents(),
        // Keep data fresh enough for UI but avoid constant refetching
        staleTime: 60000,
        gcTime: 300000,
        refetchOnWindowFocus: 'always',
        refetchOnReconnect: true
    });
}
function useCreateAgentMutation() {
    const queryClient = (0, _reactquery.useQueryClient)();
    return (0, _reactquery.useMutation)({
        mutationFn: (input)=>_agentservice.agentService.createAgent(input),
        onSuccess: (newAgent)=>{
            // Optimistically update list cache
            queryClient.setQueryData([
                'agents'
            ], (old)=>{
                if (!old) return [
                    newAgent
                ];
                return [
                    newAgent,
                    ...old
                ];
            });
        },
        onSettled: ()=>{
            queryClient.invalidateQueries({
                queryKey: [
                    'agents'
                ]
            });
        }
    });
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9lbGljaGFybGVzZS9DYXNjYWRlUHJvamVjdHMvRUNFLUFHRU5UL2hvb2tzL3VzZS1hZ2VudHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlUXVlcnksIHVzZU11dGF0aW9uLCB1c2VRdWVyeUNsaWVudCB9IGZyb20gJ0B0YW5zdGFjay9yZWFjdC1xdWVyeSdcbmltcG9ydCB7IGFnZW50U2VydmljZSwgdHlwZSBBZ2VudCB9IGZyb20gJ0Avc2VydmljZXMvYWdlbnQtc2VydmljZSdcbmltcG9ydCB0eXBlIHsgQWdlbnRDcmVhdGVJbnB1dCB9IGZyb20gJ0Avc3JjL3R5cGVzL2FnZW50J1xuXG5leHBvcnQgZnVuY3Rpb24gdXNlQWdlbnRzUXVlcnkoKSB7XG4gIHJldHVybiB1c2VRdWVyeTxBZ2VudFtdLCBFcnJvcj4oe1xuICAgIHF1ZXJ5S2V5OiBbJ2FnZW50cyddLFxuICAgIHF1ZXJ5Rm46ICgpID0+IGFnZW50U2VydmljZS5nZXRBZ2VudHMoKSxcbiAgICAvLyBLZWVwIGRhdGEgZnJlc2ggZW5vdWdoIGZvciBVSSBidXQgYXZvaWQgY29uc3RhbnQgcmVmZXRjaGluZ1xuICAgIHN0YWxlVGltZTogNjBfMDAwLCAvLyAxIG1pblxuICAgIGdjVGltZTogMzAwXzAwMCwgICAvLyA1IG1pblxuICAgIHJlZmV0Y2hPbldpbmRvd0ZvY3VzOiAnYWx3YXlzJyxcbiAgICByZWZldGNoT25SZWNvbm5lY3Q6IHRydWUsXG4gIH0pXG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VDcmVhdGVBZ2VudE11dGF0aW9uKCkge1xuICBjb25zdCBxdWVyeUNsaWVudCA9IHVzZVF1ZXJ5Q2xpZW50KClcbiAgcmV0dXJuIHVzZU11dGF0aW9uKHtcbiAgICBtdXRhdGlvbkZuOiAoaW5wdXQ6IEFnZW50Q3JlYXRlSW5wdXQpID0+IGFnZW50U2VydmljZS5jcmVhdGVBZ2VudChpbnB1dCksXG4gICAgb25TdWNjZXNzOiAobmV3QWdlbnQpID0+IHtcbiAgICAgIC8vIE9wdGltaXN0aWNhbGx5IHVwZGF0ZSBsaXN0IGNhY2hlXG4gICAgICBxdWVyeUNsaWVudC5zZXRRdWVyeURhdGE8QWdlbnRbXSB8IHVuZGVmaW5lZD4oWydhZ2VudHMnXSwgKG9sZCkgPT4ge1xuICAgICAgICBpZiAoIW9sZCkgcmV0dXJuIFtuZXdBZ2VudF1cbiAgICAgICAgcmV0dXJuIFtuZXdBZ2VudCwgLi4ub2xkXVxuICAgICAgfSlcbiAgICB9LFxuICAgIG9uU2V0dGxlZDogKCkgPT4ge1xuICAgICAgcXVlcnlDbGllbnQuaW52YWxpZGF0ZVF1ZXJpZXMoeyBxdWVyeUtleTogWydhZ2VudHMnXSB9KVxuICAgIH0sXG4gIH0pXG59XG4iXSwibmFtZXMiOlsidXNlQWdlbnRzUXVlcnkiLCJ1c2VDcmVhdGVBZ2VudE11dGF0aW9uIiwidXNlUXVlcnkiLCJxdWVyeUtleSIsInF1ZXJ5Rm4iLCJhZ2VudFNlcnZpY2UiLCJnZXRBZ2VudHMiLCJzdGFsZVRpbWUiLCJnY1RpbWUiLCJyZWZldGNoT25XaW5kb3dGb2N1cyIsInJlZmV0Y2hPblJlY29ubmVjdCIsInF1ZXJ5Q2xpZW50IiwidXNlUXVlcnlDbGllbnQiLCJ1c2VNdXRhdGlvbiIsIm11dGF0aW9uRm4iLCJpbnB1dCIsImNyZWF0ZUFnZW50Iiwib25TdWNjZXNzIiwibmV3QWdlbnQiLCJzZXRRdWVyeURhdGEiLCJvbGQiLCJvblNldHRsZWQiLCJpbnZhbGlkYXRlUXVlcmllcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7UUFJZ0JBO2VBQUFBOztRQVlBQztlQUFBQTs7OzRCQWhCc0M7OEJBQ2I7QUFHbEMsU0FBU0Q7SUFDZCxPQUFPRSxJQUFBQSxvQkFBUSxFQUFpQjtRQUM5QkMsVUFBVTtZQUFDO1NBQVM7UUFDcEJDLFNBQVMsSUFBTUMsMEJBQVksQ0FBQ0MsU0FBUztRQUNyQyw4REFBOEQ7UUFDOURDLFdBQVc7UUFDWEMsUUFBUTtRQUNSQyxzQkFBc0I7UUFDdEJDLG9CQUFvQjtJQUN0QjtBQUNGO0FBRU8sU0FBU1Q7SUFDZCxNQUFNVSxjQUFjQyxJQUFBQSwwQkFBYztJQUNsQyxPQUFPQyxJQUFBQSx1QkFBVyxFQUFDO1FBQ2pCQyxZQUFZLENBQUNDLFFBQTRCViwwQkFBWSxDQUFDVyxXQUFXLENBQUNEO1FBQ2xFRSxXQUFXLENBQUNDO1lBQ1YsbUNBQW1DO1lBQ25DUCxZQUFZUSxZQUFZLENBQXNCO2dCQUFDO2FBQVMsRUFBRSxDQUFDQztnQkFDekQsSUFBSSxDQUFDQSxLQUFLLE9BQU87b0JBQUNGO2lCQUFTO2dCQUMzQixPQUFPO29CQUFDQTt1QkFBYUU7aUJBQUk7WUFDM0I7UUFDRjtRQUNBQyxXQUFXO1lBQ1RWLFlBQVlXLGlCQUFpQixDQUFDO2dCQUFFbkIsVUFBVTtvQkFBQztpQkFBUztZQUFDO1FBQ3ZEO0lBQ0Y7QUFDRiJ9