{"version":3,"sources":["/Users/elicharlese/CascadeProjects/ECE-AGENT/components/agents/CreateAgentDialog.tsx"],"sourcesContent":["\"use client\"\n\nimport { useState } from \"react\"\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { useForm } from \"react-hook-form\"\nimport { z } from \"zod\"\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Label } from \"@/components/ui/label\"\nimport { AgentInsertSchema, AgentCreateInput } from \"@/src/types/agent\"\nimport { toast } from \"sonner\"\nimport { Bot } from \"lucide-react\"\nimport { useCreateAgentMutation } from \"@/hooks/use-agents\"\n\nexport function CreateAgentDialog({\n  open,\n  onOpenChange,\n  onCreated,\n}: {\n  open: boolean\n  onOpenChange: (open: boolean) => void\n  onCreated?: (agent: any) => void\n}) {\n  // Local form schema keeps CSV fields as strings for inputs\n  const FormSchema = z.object({\n    name: z.string().min(2).max(60),\n    description: z.string().max(500).optional().default(\"\"),\n    model: z.string().max(120).optional().default(\"gpt-4o-mini\"),\n    avatar_url: z.string().url().optional().nullable(),\n    status: z.enum([\"online\", \"offline\", \"busy\"]).optional().default(\"online\"),\n    system_prompt: z.string().max(4000).optional().default(\"\"),\n    capabilitiesCsv: z.string().optional().default(\"\"),\n    mcpToolsCsv: z.string().optional().default(\"\"),\n  })\n\n  type FormValues = z.infer<typeof FormSchema>\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    reset,\n  } = useForm<FormValues>({\n    resolver: zodResolver(FormSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      model: \"gpt-4o-mini\",\n      system_prompt: \"\",\n      capabilitiesCsv: \"\",\n      mcpToolsCsv: \"\",\n      status: \"online\",\n    },\n  })\n\n  const [submitting, setSubmitting] = useState(false)\n\n  const mutation = useCreateAgentMutation()\n\n  const onSubmit = async (values: FormValues) => {\n    setSubmitting(true)\n    try {\n      const capabilities = (values.capabilitiesCsv || \"\")\n        .split(\",\")\n        .map((s) => s.trim())\n        .filter(Boolean)\n      const mcp_tools = (values.mcpToolsCsv || \"\")\n        .split(\",\")\n        .map((s) => s.trim())\n        .filter(Boolean)\n\n      const payload: AgentCreateInput = {\n        name: values.name,\n        description: values.description,\n        model: values.model,\n        system_prompt: values.system_prompt,\n        capabilities,\n        mcp_tools,\n        status: values.status,\n        avatar_url: null,\n      }\n\n      const created = await mutation.mutateAsync(payload)\n      toast.success(\"Agent created\")\n      onOpenChange(false)\n      reset()\n      onCreated?.(created)\n    } catch (e: any) {\n      toast.error(e?.message ?? \"Failed to create agent\")\n    } finally {\n      setSubmitting(false)\n    }\n  }\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent\n        className=\"sm:max-w-lg bg-card text-card-foreground border border-border shadow-xl\"\n      >\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Bot className=\"h-5 w-5\" />\n            Create New Assistant\n          </DialogTitle>\n        </DialogHeader>\n\n        <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"name\">Name</Label>\n            <Input id=\"name\" placeholder=\"My Research Agent\" {...register(\"name\")} />\n            {errors.name && <p className=\"text-xs text-red-600 mt-1\">{errors.name.message as any}</p>}\n          </div>\n\n          <div>\n            <Label htmlFor=\"description\">Description</Label>\n            <Textarea id=\"description\" placeholder=\"What this agent does\" {...register(\"description\")} />\n          </div>\n\n          <div>\n            <Label htmlFor=\"model\">Model</Label>\n            <Input id=\"model\" placeholder=\"gpt-4o-mini\" {...register(\"model\")} />\n          </div>\n\n          <div>\n            <Label htmlFor=\"system_prompt\">System Prompt</Label>\n            <Textarea id=\"system_prompt\" placeholder=\"Behavior instructions\" {...register(\"system_prompt\")} />\n          </div>\n\n          <div>\n            <Label htmlFor=\"capabilitiesCsv\">Capabilities (comma-separated)</Label>\n            <Input id=\"capabilitiesCsv\" placeholder=\"search, analysis\" {...register(\"capabilitiesCsv\")} />\n          </div>\n\n          <div>\n            <Label htmlFor=\"mcpToolsCsv\">MCP Tools (comma-separated)</Label>\n            <Input id=\"mcpToolsCsv\" placeholder=\"brave-search, memory\" {...register(\"mcpToolsCsv\")} />\n          </div>\n\n          <div className=\"flex justify-end gap-2 pt-2\">\n            <Button type=\"button\" variant=\"ghost\" onClick={() => onOpenChange(false)} disabled={submitting}>\n              Cancel\n            </Button>\n            <Button type=\"submit\" disabled={submitting}>\n              {submitting ? \"Creatingâ€¦\" : \"Create\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  )\n}\n"],"names":["CreateAgentDialog","open","onOpenChange","onCreated","FormSchema","z","object","name","string","min","max","description","optional","default","model","avatar_url","url","nullable","status","enum","system_prompt","capabilitiesCsv","mcpToolsCsv","register","handleSubmit","formState","errors","reset","useForm","resolver","zodResolver","defaultValues","submitting","setSubmitting","useState","mutation","useCreateAgentMutation","onSubmit","values","capabilities","split","map","s","trim","filter","Boolean","mcp_tools","payload","created","mutateAsync","toast","success","e","error","message","Dialog","DialogContent","className","DialogHeader","DialogTitle","Bot","form","div","Label","htmlFor","Input","id","placeholder","p","Textarea","Button","type","variant","onClick","disabled"],"mappings":"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"}