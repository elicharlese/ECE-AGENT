{"version":3,"sources":["/Users/elicharlese/CascadeProjects/ECE-AGENT/components/profile/CheckInOverview.tsx"],"sourcesContent":["\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Button } from \"@/components/ui/button\"\nimport { \n  MessageSquare, \n  FileText, \n  AtSign, \n  Calendar, \n  CheckSquare, \n  TrendingUp,\n  Clock,\n  Users\n} from \"lucide-react\"\nimport { useUser } from \"@/hooks/use-user\"\n\ninterface CheckInStats {\n  unreadMessages: number\n  newMentions: number\n  recentDocs: number\n  upcomingEvents: number\n  pendingTasks: number\n  activeConversations: number\n}\n\nexport function CheckInOverview() {\n  const { user } = useUser()\n  const [stats, setStats] = useState<CheckInStats>({\n    unreadMessages: 0,\n    newMentions: 0,\n    recentDocs: 0,\n    upcomingEvents: 0,\n    pendingTasks: 0,\n    activeConversations: 0\n  })\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    const fetchStats = async () => {\n      try {\n        // Simulate API call - replace with actual data fetching\n        // Use near-zero delay during tests to avoid waitFor timeouts\n        const delay = process.env.NODE_ENV === 'test' ? 0 : 500\n        await new Promise(resolve => setTimeout(resolve, delay))\n        \n        setStats({\n          unreadMessages: 12,\n          newMentions: 3,\n          recentDocs: 8,\n          upcomingEvents: 5,\n          pendingTasks: 7,\n          activeConversations: 4\n        })\n      } catch (error) {\n        console.error('Failed to fetch check-in stats:', error)\n      } finally {\n        setLoading(false)\n      }\n    }\n\n    fetchStats()\n  }, [])\n\n  const quickActions = [\n    {\n      label: \"View Messages\",\n      icon: MessageSquare,\n      count: stats.unreadMessages,\n      href: \"/messages\",\n      color: \"bg-blue-500\"\n    },\n    {\n      label: \"Check Mentions\",\n      icon: AtSign,\n      count: stats.newMentions,\n      href: \"/profile?tab=mentions\",\n      color: \"bg-purple-500\"\n    },\n    {\n      label: \"Review Docs\",\n      icon: FileText,\n      count: stats.recentDocs,\n      href: \"/profile?tab=docs\",\n      color: \"bg-green-500\"\n    },\n    {\n      label: \"Calendar\",\n      icon: Calendar,\n      count: stats.upcomingEvents,\n      href: \"/profile?tab=calendar\",\n      color: \"bg-orange-500\"\n    }\n  ]\n\n  if (loading) {\n    return (\n      <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-4\">\n        {Array.from({ length: 4 }).map((_, i) => (\n          <Card key={i} className=\"animate-pulse\">\n            <CardContent className=\"p-6\">\n              <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded mb-2\" />\n              <div className=\"h-8 bg-gray-200 dark:bg-gray-700 rounded\" />\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Welcome Header */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center gap-4\">\n            <div className=\"h-12 w-12 rounded-full bg-gradient-to-br from-indigo-500 to-purple-500 flex items-center justify-center text-white font-semibold\">\n              {user?.email?.charAt(0).toUpperCase() || 'U'}\n            </div>\n            <div>\n              <h2 className=\"text-xl font-semibold text-gray-900 dark:text-gray-100\">\n                Welcome back!\n              </h2>\n              <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n                Here's what's happening in your workspace\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Quick Stats Grid */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        {quickActions.map((action) => {\n          const Icon = action.icon\n          return (\n            <Card key={action.label} className=\"hover:shadow-md transition-shadow cursor-pointer\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className={`h-10 w-10 rounded-lg ${action.color} flex items-center justify-center text-white`}>\n                      <Icon className=\"h-5 w-5\" />\n                    </div>\n                    <div>\n                      <p className=\"text-sm font-medium text-gray-900 dark:text-gray-100\">\n                        {action.label}\n                      </p>\n                      <p className=\"text-xs text-gray-600 dark:text-gray-300\">\n                        {action.count} items\n                      </p>\n                    </div>\n                  </div>\n                  {action.count > 0 && (\n                    <Badge variant=\"secondary\" className=\"ml-2\">\n                      {action.count}\n                    </Badge>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          )\n        })}\n      </div>\n\n      {/* Activity Summary */}\n      <div className=\"grid gap-6 md:grid-cols-2\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <TrendingUp className=\"h-5 w-5\" />\n              Activity Summary\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-gray-600 dark:text-gray-300\">Active Conversations</span>\n              <span className=\"font-semibold\">{stats.activeConversations}</span>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-gray-600 dark:text-gray-300\">Pending Tasks</span>\n              <span className=\"font-semibold\">{stats.pendingTasks}</span>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-gray-600 dark:text-gray-300\">Upcoming Events</span>\n              <span className=\"font-semibold\">{stats.upcomingEvents}</span>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Clock className=\"h-5 w-5\" />\n              Recent Activity\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            <div className=\"flex items-center gap-3 text-sm\">\n              <div className=\"h-2 w-2 rounded-full bg-green-500\" />\n              <span className=\"text-gray-600 dark:text-gray-300\">\n                New message in #general\n              </span>\n              <span className=\"text-xs text-gray-500 ml-auto\">2m ago</span>\n            </div>\n            <div className=\"flex items-center gap-3 text-sm\">\n              <div className=\"h-2 w-2 rounded-full bg-blue-500\" />\n              <span className=\"text-gray-600 dark:text-gray-300\">\n                Document \"Project Plan\" updated\n              </span>\n              <span className=\"text-xs text-gray-500 ml-auto\">15m ago</span>\n            </div>\n            <div className=\"flex items-center gap-3 text-sm\">\n              <div className=\"h-2 w-2 rounded-full bg-purple-500\" />\n              <span className=\"text-gray-600 dark:text-gray-300\">\n                Mentioned in team discussion\n              </span>\n              <span className=\"text-xs text-gray-500 ml-auto\">1h ago</span>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  )\n}\n"],"names":["CheckInOverview","user","useUser","stats","setStats","useState","unreadMessages","newMentions","recentDocs","upcomingEvents","pendingTasks","activeConversations","loading","setLoading","useEffect","fetchStats","delay","process","env","NODE_ENV","Promise","resolve","setTimeout","error","console","quickActions","label","icon","MessageSquare","count","href","color","AtSign","FileText","Calendar","div","className","Array","from","length","map","_","i","Card","CardContent","email","charAt","toUpperCase","h2","p","action","Icon","Badge","variant","CardHeader","CardTitle","TrendingUp","span","Clock"],"mappings":"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"}