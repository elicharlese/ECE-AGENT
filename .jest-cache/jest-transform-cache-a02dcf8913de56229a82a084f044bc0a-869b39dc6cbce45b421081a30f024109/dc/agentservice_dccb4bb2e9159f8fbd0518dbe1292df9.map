{"version":3,"sources":["/Users/elicharlese/CascadeProjects/ECE-AGENT/services/agent-service.ts"],"sourcesContent":["import { supabase } from '@/lib/supabase/client'\nimport type { AgentRow, AgentCreateInput } from '@/src/types/agent'\n\n// Service-facing Agent shape used by legacy components\nexport interface Agent {\n  id: string\n  name: string\n  description: string\n  avatar?: string | null\n  capabilities: string[]\n  mcpTools: string[]\n  status: 'online' | 'offline' | 'busy'\n  lastActive?: Date\n}\n\nexport interface AgentMessage {\n  id: string\n  agentId: string\n  conversationId: string\n  content: string\n  timestamp: Date\n  metadata?: {\n    toolsUsed?: string[]\n    executionTime?: number\n    confidence?: number\n  }\n}\n\nclass AgentService {\n  private cache: Map<string, Agent> = new Map()\n  private cachedList: Agent[] | null = null\n\n  private mapRowToAgent(row: AgentRow): Agent {\n    return {\n      id: row.id,\n      name: row.name,\n      description: row.description ?? '',\n      avatar: row.avatar_url ?? null,\n      capabilities: row.capabilities ?? [],\n      mcpTools: row.mcp_tools ?? [],\n      status: row.status,\n    }\n  }\n\n  private setCacheList(list: Agent[]) {\n    this.cachedList = list\n    this.cache.clear()\n    for (const a of list) {\n      this.cache.set(a.id, a)\n    }\n  }\n\n  invalidateCache() {\n    this.cachedList = null\n    this.cache.clear()\n  }\n\n  async listAgents(force = false): Promise<Agent[]> {\n    if (!force && this.cachedList) return this.cachedList\n    const res = await fetch('/api/agents', { method: 'GET' })\n    if (!res.ok) throw new Error(`Failed to load agents: ${res.status}`)\n    const json: { agents: AgentRow[] } = await res.json()\n    const mapped = (json.agents ?? []).map((r) => this.mapRowToAgent(r))\n    this.setCacheList(mapped)\n    return mapped\n  }\n\n  async getAgents(): Promise<Agent[]> {\n    return this.listAgents(false)\n  }\n\n  async getAgent(agentId: string): Promise<Agent | null> {\n    const cached = this.cache.get(agentId)\n    if (cached) return cached\n    // Try API detail endpoint\n    const res = await fetch(`/api/agents/${agentId}`, { method: 'GET' })\n    if (res.ok) {\n      const json: { agent: AgentRow | null } = await res.json()\n      if (json.agent) {\n        const mapped = this.mapRowToAgent(json.agent)\n        this.cache.set(mapped.id, mapped)\n        return mapped\n      }\n    }\n    // Fallback: refresh list\n    const list = await this.listAgents(true)\n    return list.find((a) => a.id === agentId) ?? null\n  }\n\n  async createAgent(input: AgentCreateInput): Promise<Agent> {\n    const res = await fetch('/api/agents', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(input),\n    })\n    const json = await res.json()\n    if (!res.ok) throw new Error(json?.error ?? 'Failed to create agent')\n    const mapped = this.mapRowToAgent(json.agent as AgentRow)\n    // Update caches\n    if (this.cachedList) this.cachedList = [mapped, ...this.cachedList]\n    this.cache.set(mapped.id, mapped)\n    return mapped\n  }\n\n  async sendMessage(\n    agentId: string, \n    message: string, \n    conversationId: string\n  ): Promise<AgentMessage> {\n    const agent = await this.getAgent(agentId)\n    if (!agent) {\n      throw new Error('Agent not found')\n    }\n\n    // Simulate AI processing\n    const response = await this.processWithMCP(agent, message)\n    \n    const agentMessage: AgentMessage = {\n      id: `${Date.now()}-${Math.random()}`,\n      agentId,\n      conversationId,\n      content: response.content,\n      timestamp: new Date(),\n      metadata: {\n        toolsUsed: response.toolsUsed,\n        executionTime: response.executionTime,\n        confidence: response.confidence\n      }\n    }\n\n    // Store in Supabase if needed\n    try {\n      await this.saveMessage(agentMessage)\n    } catch (error) {\n      console.error('Failed to save agent message:', error)\n    }\n\n    return agentMessage\n  }\n\n  private async processWithMCP(\n    agent: Agent, \n    message: string\n  ): Promise<{\n    content: string\n    toolsUsed: string[]\n    executionTime: number\n    confidence: number\n  }> {\n    const startTime = Date.now()\n    const toolsUsed: string[] = []\n    \n    // Simulate different agent responses based on capabilities\n    let content = ''\n    \n    if (agent.id === 'ai-assistant') {\n      if (message.toLowerCase().includes('search')) {\n        toolsUsed.push('brave-search')\n        content = \"I've searched the web for relevant information. Here's what I found...\"\n      } else if (message.toLowerCase().includes('help')) {\n        toolsUsed.push('sequential-thinking', 'memory')\n        content = \"I'll analyze your request step by step to provide the best assistance...\"\n      } else {\n        content = \"I'm here to help! Let me process your request...\"\n      }\n    } else if (agent.id === 'dev-agent') {\n      if (message.toLowerCase().includes('debug')) {\n        toolsUsed.push('sequential-thinking')\n        content = \"Let me analyze the code issue systematically...\"\n      } else if (message.toLowerCase().includes('git')) {\n        toolsUsed.push('git')\n        content = \"I'll help you with Git operations...\"\n      } else {\n        content = \"I'll assist with your development task...\"\n      }\n    } else if (agent.id === 'project-manager') {\n      toolsUsed.push('linear', 'memory')\n      content = \"I'll help manage your project tasks and track progress...\"\n    } else if (agent.id === 'legal-assistant') {\n      toolsUsed.push('memory', 'sequential-thinking')\n      content = \"I'll review the legal aspects of your request...\"\n    } else if (agent.id === 'finance-agent') {\n      toolsUsed.push('stripe')\n      content = \"I can help with financial operations and payment processing...\"\n    } else if (agent.id === 'research-agent') {\n      toolsUsed.push('brave-search', 'sequential-thinking')\n      const lower = message.toLowerCase()\n      if (lower.includes('sources') || lower.includes('cite') || lower.includes('remember')) {\n        toolsUsed.push('memory')\n      }\n      if (lower.includes('summarize') || lower.includes('summary')) {\n        content = \"I'll research this topic and provide a concise summary with cited sources...\"\n      } else if (lower.includes('search') || lower.includes('research')) {\n        content = \"I'll search the web and compile key findings with references...\"\n      } else {\n        content = \"Initiating research. I'll gather information and return a summary with sources...\"\n      }\n    } else {\n      content = \"Processing your request...\"\n    }\n\n    const executionTime = Date.now() - startTime\n    const confidence = 0.85 + Math.random() * 0.15 // 85-100% confidence\n\n    return {\n      content,\n      toolsUsed,\n      executionTime,\n      confidence\n    }\n  }\n\n  private async saveMessage(message: AgentMessage): Promise<void> {\n    // Save to Supabase\n    const { error } = await supabase\n      .from('agent_messages')\n      .insert({\n        agent_id: message.agentId,\n        conversation_id: message.conversationId,\n        content: message.content,\n        metadata: message.metadata,\n        created_at: message.timestamp\n      })\n    \n    if (error) {\n      console.error('Failed to save agent message to Supabase:', error)\n    }\n  }\n\n  async executeMCPTool(\n    toolId: string, \n    params: any\n  ): Promise<any> {\n    // Simulate MCP tool execution\n    console.log(`Executing MCP tool: ${toolId}`, params)\n    \n    switch (toolId) {\n      case 'brave-search':\n        return { results: ['Search result 1', 'Search result 2'] }\n      case 'git':\n        return { status: 'clean', branch: 'main' }\n      case 'linear':\n        return { issues: [], projects: [] }\n      case 'stripe':\n        return { payments: [], customers: [] }\n      case 'sequential-thinking':\n        return { analysis: 'Step-by-step analysis complete' }\n      case 'memory':\n        return { memories: [], knowledge: {} }\n      default:\n        throw new Error(`Unknown tool: ${toolId}`)\n    }\n  }\n}\n\nexport const agentService = new AgentService()\n"],"names":["agentService","AgentService","mapRowToAgent","row","id","name","description","avatar","avatar_url","capabilities","mcpTools","mcp_tools","status","setCacheList","list","cachedList","cache","clear","a","set","invalidateCache","listAgents","force","res","fetch","method","ok","Error","json","mapped","agents","map","r","getAgents","getAgent","agentId","cached","get","agent","find","createAgent","input","headers","body","JSON","stringify","error","sendMessage","message","conversationId","response","processWithMCP","agentMessage","Date","now","Math","random","content","timestamp","metadata","toolsUsed","executionTime","confidence","saveMessage","console","startTime","toLowerCase","includes","push","lower","supabase","from","insert","agent_id","conversation_id","created_at","executeMCPTool","toolId","params","log","results","branch","issues","projects","payments","customers","analysis","memories","knowledge","Map"],"mappings":"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"}