{"version":3,"sources":["/Users/elicharlese/CascadeProjects/ECE-AGENT/app/api/mcp/github/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\n\nexport const runtime = 'nodejs'\n\nconst REMOTE_MCP_URL = 'https://api.githubcopilot.com/mcp/'\n\nfunction getPat(req: NextRequest): string | null {\n  const pat = req.headers.get('x-github-pat') || req.headers.get('authorization')\n  if (!pat) return null\n  return pat.startsWith('Bearer ') ? pat : `Bearer ${pat}`\n}\n\n// POST – initialize or send request over MCP HTTP\nexport async function POST(req: NextRequest): Promise<NextResponse> {\n  try {\n    const pat = getPat(req)\n    if (!pat) {\n      return NextResponse.json({ error: 'Missing GitHub PAT or Authorization header' }, { status: 400 })\n    }\n\n    const body = await req.text()\n\n    const upstream = await fetch(REMOTE_MCP_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: pat,\n        // Forward session if provided by client\n        ...(req.headers.get('mcp-session-id')\n          ? { 'Mcp-Session-Id': String(req.headers.get('mcp-session-id')) }\n          : {}),\n      },\n      body: body || '{}',\n    })\n\n    const text = await upstream.text()\n    const headers = new Headers()\n    headers.set('Content-Type', upstream.headers.get('content-type') || 'application/json')\n    const upstreamSessionId = upstream.headers.get('Mcp-Session-Id')\n    if (upstreamSessionId) headers.set('Mcp-Session-Id', upstreamSessionId)\n    headers.set('Access-Control-Expose-Headers', 'Mcp-Session-Id')\n\n    return new NextResponse(text, { status: upstream.status, headers })\n  } catch (err) {\n    console.error('MCP proxy POST error:', err)\n    return NextResponse.json({ error: 'MCP proxy POST failed' }, { status: 500 })\n  }\n}\n\n// GET – stream SSE notifications\nexport async function GET(req: NextRequest): Promise<Response> {\n  try {\n    const pat = getPat(req)\n    const sessionId = req.headers.get('mcp-session-id')\n\n    if (!pat) {\n      return NextResponse.json({ error: 'Missing GitHub PAT or Authorization header' }, { status: 400 })\n    }\n    if (!sessionId) {\n      return NextResponse.json({ error: 'Missing Mcp-Session-Id header' }, { status: 400 })\n    }\n\n    const upstream = await fetch(REMOTE_MCP_URL, {\n      method: 'GET',\n      headers: {\n        Authorization: pat,\n        'Mcp-Session-Id': sessionId,\n      },\n    })\n\n    const headers = new Headers()\n    headers.set('Content-Type', upstream.headers.get('content-type') || 'text/event-stream')\n    headers.set('Cache-Control', 'no-cache')\n    headers.set('Connection', 'keep-alive')\n    headers.set('Access-Control-Expose-Headers', 'Mcp-Session-Id')\n    const upstreamSessionId = upstream.headers.get('Mcp-Session-Id')\n    if (upstreamSessionId) headers.set('Mcp-Session-Id', upstreamSessionId)\n\n    if (!upstream.body) {\n      return new NextResponse('Upstream returned no body', { status: 502 })\n    }\n\n    // Pass-through streaming body\n    return new Response(upstream.body, { status: upstream.status, headers })\n  } catch (err) {\n    console.error('MCP proxy GET error:', err)\n    return new NextResponse('MCP proxy GET failed', { status: 500 })\n  }\n}\n\n// DELETE – terminate session upstream\nexport async function DELETE(req: NextRequest): Promise<NextResponse> {\n  try {\n    const pat = getPat(req)\n    const sessionId = req.headers.get('mcp-session-id')\n\n    if (!pat || !sessionId) {\n      return NextResponse.json({ error: 'Missing credentials or session id' }, { status: 400 })\n    }\n\n    const upstream = await fetch(REMOTE_MCP_URL, {\n      method: 'DELETE',\n      headers: {\n        Authorization: pat,\n        'Mcp-Session-Id': sessionId,\n      },\n    })\n\n    const text = await upstream.text()\n    const headers = new Headers()\n    headers.set('Content-Type', upstream.headers.get('content-type') || 'application/json')\n    headers.set('Access-Control-Expose-Headers', 'Mcp-Session-Id')\n\n    return new NextResponse(text, { status: upstream.status, headers })\n  } catch (err) {\n    console.error('MCP proxy DELETE error:', err)\n    return NextResponse.json({ error: 'MCP proxy DELETE failed' }, { status: 500 })\n  }\n}\n"],"names":["DELETE","GET","POST","runtime","REMOTE_MCP_URL","getPat","req","pat","headers","get","startsWith","NextResponse","json","error","status","body","text","upstream","fetch","method","Authorization","String","Headers","set","upstreamSessionId","err","console","sessionId","Response"],"mappings":"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"}