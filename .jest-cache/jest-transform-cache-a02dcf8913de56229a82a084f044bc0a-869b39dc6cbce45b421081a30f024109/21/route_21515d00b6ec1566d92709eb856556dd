97ac50317f2fa76c3f447a51eeb3de83
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get DELETE () {
        return DELETE;
    },
    get GET () {
        return GET;
    },
    get POST () {
        return POST;
    },
    get runtime () {
        return runtime;
    }
});
const _server = require("next/server");
const runtime = 'nodejs';
const REMOTE_MCP_URL = 'https://api.githubcopilot.com/mcp/';
function getPat(req) {
    const pat = req.headers.get('x-github-pat') || req.headers.get('authorization');
    if (!pat) return null;
    return pat.startsWith('Bearer ') ? pat : `Bearer ${pat}`;
}
async function POST(req) {
    try {
        const pat = getPat(req);
        if (!pat) {
            return _server.NextResponse.json({
                error: 'Missing GitHub PAT or Authorization header'
            }, {
                status: 400
            });
        }
        const body = await req.text();
        const upstream = await fetch(REMOTE_MCP_URL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                Authorization: pat,
                // Forward session if provided by client
                ...req.headers.get('mcp-session-id') ? {
                    'Mcp-Session-Id': String(req.headers.get('mcp-session-id'))
                } : {}
            },
            body: body || '{}'
        });
        const text = await upstream.text();
        const headers = new Headers();
        headers.set('Content-Type', upstream.headers.get('content-type') || 'application/json');
        const upstreamSessionId = upstream.headers.get('Mcp-Session-Id');
        if (upstreamSessionId) headers.set('Mcp-Session-Id', upstreamSessionId);
        headers.set('Access-Control-Expose-Headers', 'Mcp-Session-Id');
        return new _server.NextResponse(text, {
            status: upstream.status,
            headers
        });
    } catch (err) {
        console.error('MCP proxy POST error:', err);
        return _server.NextResponse.json({
            error: 'MCP proxy POST failed'
        }, {
            status: 500
        });
    }
}
async function GET(req) {
    try {
        const pat = getPat(req);
        const sessionId = req.headers.get('mcp-session-id');
        if (!pat) {
            return _server.NextResponse.json({
                error: 'Missing GitHub PAT or Authorization header'
            }, {
                status: 400
            });
        }
        if (!sessionId) {
            return _server.NextResponse.json({
                error: 'Missing Mcp-Session-Id header'
            }, {
                status: 400
            });
        }
        const upstream = await fetch(REMOTE_MCP_URL, {
            method: 'GET',
            headers: {
                Authorization: pat,
                'Mcp-Session-Id': sessionId
            }
        });
        const headers = new Headers();
        headers.set('Content-Type', upstream.headers.get('content-type') || 'text/event-stream');
        headers.set('Cache-Control', 'no-cache');
        headers.set('Connection', 'keep-alive');
        headers.set('Access-Control-Expose-Headers', 'Mcp-Session-Id');
        const upstreamSessionId = upstream.headers.get('Mcp-Session-Id');
        if (upstreamSessionId) headers.set('Mcp-Session-Id', upstreamSessionId);
        if (!upstream.body) {
            return new _server.NextResponse('Upstream returned no body', {
                status: 502
            });
        }
        // Pass-through streaming body
        return new Response(upstream.body, {
            status: upstream.status,
            headers
        });
    } catch (err) {
        console.error('MCP proxy GET error:', err);
        return new _server.NextResponse('MCP proxy GET failed', {
            status: 500
        });
    }
}
async function DELETE(req) {
    try {
        const pat = getPat(req);
        const sessionId = req.headers.get('mcp-session-id');
        if (!pat || !sessionId) {
            return _server.NextResponse.json({
                error: 'Missing credentials or session id'
            }, {
                status: 400
            });
        }
        const upstream = await fetch(REMOTE_MCP_URL, {
            method: 'DELETE',
            headers: {
                Authorization: pat,
                'Mcp-Session-Id': sessionId
            }
        });
        const text = await upstream.text();
        const headers = new Headers();
        headers.set('Content-Type', upstream.headers.get('content-type') || 'application/json');
        headers.set('Access-Control-Expose-Headers', 'Mcp-Session-Id');
        return new _server.NextResponse(text, {
            status: upstream.status,
            headers
        });
    } catch (err) {
        console.error('MCP proxy DELETE error:', err);
        return _server.NextResponse.json({
            error: 'MCP proxy DELETE failed'
        }, {
            status: 500
        });
    }
}

//# sourceMappingURL=data:application/json;base64,