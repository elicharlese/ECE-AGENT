afbcdf52f704f536bfdffe7eddbfa3a8
"use strict";
// Mock Supabase browser client to avoid env checks during tests
jest.mock('@/lib/supabase/client', ()=>({
        supabase: {
            from: jest.fn(()=>({
                    insert: jest.fn()
                })),
            auth: {
                getUser: jest.fn(async ()=>({
                        data: {
                            user: {
                                id: 'u'
                            }
                        },
                        error: null
                    }))
            }
        }
    }));
jest.mock('sonner', ()=>({
        toast: {
            success: jest.fn(),
            error: jest.fn()
        }
    }));
// Mock Dialog primitives to simple elements to avoid portal/autoFocus issues in JSDOM
jest.mock('@/components/ui/dialog', ()=>{
    const React = require('react');
    return {
        Dialog: ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "dialog",
                children: children
            }),
        DialogContent: ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "dialog-content",
                children: children
            }),
        DialogHeader: ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "dialog-header",
                children: children
            }),
        DialogTitle: ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("h1", {
                "data-testid": "dialog-title",
                children: children
            }),
        DialogOverlay: ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "dialog-overlay",
                children: children
            }),
        DialogPortal: ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_jsxruntime.Fragment, {
                children: children
            }),
        DialogTrigger: ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                children: children
            }),
        DialogFooter: ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                children: children
            }),
        DialogDescription: ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                children: children
            }),
        DialogClose: ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                children: children
            })
    };
});
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _reactquery = require("@tanstack/react-query");
const _msw = require("msw");
const _server = require("../msw/server");
const _CreateAgentDialog = require("../../components/agents/CreateAgentDialog");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const { toast } = jest.requireMock('sonner');
describe('CreateAgentDialog', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    it('submits successfully and closes dialog', async ()=>{
        const onOpenChange = jest.fn();
        const onCreated = jest.fn();
        const client = new _reactquery.QueryClient({
            defaultOptions: {
                queries: {
                    retry: false
                },
                mutations: {
                    retry: false
                }
            }
        });
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_reactquery.QueryClientProvider, {
            client: client,
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_CreateAgentDialog.CreateAgentDialog, {
                open: true,
                onOpenChange: onOpenChange,
                onCreated: onCreated
            })
        }));
        _react1.fireEvent.change(_react1.screen.getByLabelText('Name'), {
            target: {
                value: 'Agent A'
            }
        });
        _react1.fireEvent.click(_react1.screen.getByRole('button', {
            name: 'Create'
        }));
        await (0, _react1.waitFor)(()=>{
            expect(onOpenChange).toHaveBeenCalledWith(false);
            expect(onCreated).toHaveBeenCalledWith(expect.objectContaining({
                id: expect.any(String),
                name: 'Agent A'
            }));
            expect(toast.success).toHaveBeenCalled();
        });
    });
    it('shows error toast on failure and keeps dialog open', async ()=>{
        const onOpenChange = jest.fn();
        const onCreated = jest.fn();
        // Force server to return 400 for POST /api/agents regardless of input
        _server.server.use(_msw.http.post('/api/agents', ()=>{
            return _msw.HttpResponse.json({
                error: 'Invalid'
            }, {
                status: 400
            });
        }));
        const client = new _reactquery.QueryClient({
            defaultOptions: {
                queries: {
                    retry: false
                },
                mutations: {
                    retry: false
                }
            }
        });
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_reactquery.QueryClientProvider, {
            client: client,
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_CreateAgentDialog.CreateAgentDialog, {
                open: true,
                onOpenChange: onOpenChange,
                onCreated: onCreated
            })
        }));
        _react1.fireEvent.change(_react1.screen.getByLabelText('Name'), {
            target: {
                value: 'A'
            }
        }); // invalid due to zod min(2)
        // Fix to valid input to reach server error path
        _react1.fireEvent.change(_react1.screen.getByLabelText('Name'), {
            target: {
                value: 'Agent B'
            }
        });
        _react1.fireEvent.click(_react1.screen.getByRole('button', {
            name: 'Create'
        }));
        await (0, _react1.waitFor)(()=>{
            expect(toast.error).toHaveBeenCalled();
            expect(onOpenChange).not.toHaveBeenCalled();
            expect(onCreated).not.toHaveBeenCalled();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,