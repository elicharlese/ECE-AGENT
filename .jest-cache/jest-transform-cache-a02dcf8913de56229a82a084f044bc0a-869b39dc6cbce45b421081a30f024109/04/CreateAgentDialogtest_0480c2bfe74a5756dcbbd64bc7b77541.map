{"version":3,"sources":["/Users/elicharlese/CascadeProjects/ECE-AGENT/__tests__/components/CreateAgentDialog.test.tsx"],"sourcesContent":["import React from 'react'\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react'\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query'\nimport { http, HttpResponse } from 'msw'\nimport { server } from '@/__tests__/msw/server'\n\n// Mock Supabase browser client to avoid env checks during tests\njest.mock('@/lib/supabase/client', () => ({\n  supabase: {\n    from: jest.fn(() => ({ insert: jest.fn() })),\n    auth: { getUser: jest.fn(async () => ({ data: { user: { id: 'u' } }, error: null })) },\n  },\n}))\n\njest.mock('sonner', () => ({\n  toast: {\n    success: jest.fn(),\n    error: jest.fn(),\n  },\n}))\n\n// Mock Dialog primitives to simple elements to avoid portal/autoFocus issues in JSDOM\njest.mock('@/components/ui/dialog', () => {\n  const React = require('react')\n  return {\n    Dialog: ({ children }: any) => <div data-testid=\"dialog\">{children}</div>,\n    DialogContent: ({ children }: any) => <div data-testid=\"dialog-content\">{children}</div>,\n    DialogHeader: ({ children }: any) => <div data-testid=\"dialog-header\">{children}</div>,\n    DialogTitle: ({ children }: any) => <h1 data-testid=\"dialog-title\">{children}</h1>,\n    DialogOverlay: ({ children }: any) => <div data-testid=\"dialog-overlay\">{children}</div>,\n    DialogPortal: ({ children }: any) => <>{children}</>,\n    DialogTrigger: ({ children }: any) => <button>{children}</button>,\n    DialogFooter: ({ children }: any) => <div>{children}</div>,\n    DialogDescription: ({ children }: any) => <p>{children}</p>,\n    DialogClose: ({ children }: any) => <button>{children}</button>,\n  }\n})\n\nimport { CreateAgentDialog } from '@/components/agents/CreateAgentDialog'\n\nconst { toast } = jest.requireMock('sonner') as { toast: { success: jest.Mock, error: jest.Mock } }\n\ndescribe('CreateAgentDialog', () => {\n  beforeEach(() => {\n    jest.clearAllMocks()\n  })\n\n  it('submits successfully and closes dialog', async () => {\n    const onOpenChange = jest.fn()\n    const onCreated = jest.fn()\n\n    const client = new QueryClient({ defaultOptions: { queries: { retry: false }, mutations: { retry: false } } })\n    render(\n      <QueryClientProvider client={client}>\n        <CreateAgentDialog open={true} onOpenChange={onOpenChange} onCreated={onCreated} />\n      </QueryClientProvider>\n    )\n\n    fireEvent.change(screen.getByLabelText('Name'), { target: { value: 'Agent A' } })\n\n    fireEvent.click(screen.getByRole('button', { name: 'Create' }))\n\n    await waitFor(() => {\n      expect(onOpenChange).toHaveBeenCalledWith(false)\n      expect(onCreated).toHaveBeenCalledWith(expect.objectContaining({ id: expect.any(String), name: 'Agent A' }))\n      expect(toast.success).toHaveBeenCalled()\n    })\n  })\n\n  it('shows error toast on failure and keeps dialog open', async () => {\n    const onOpenChange = jest.fn()\n    const onCreated = jest.fn()\n\n    // Force server to return 400 for POST /api/agents regardless of input\n    server.use(\n      http.post('/api/agents', () => {\n        return HttpResponse.json({ error: 'Invalid' }, { status: 400 })\n      })\n    )\n\n    const client = new QueryClient({ defaultOptions: { queries: { retry: false }, mutations: { retry: false } } })\n    render(\n      <QueryClientProvider client={client}>\n        <CreateAgentDialog open={true} onOpenChange={onOpenChange} onCreated={onCreated} />\n      </QueryClientProvider>\n    )\n\n    fireEvent.change(screen.getByLabelText('Name'), { target: { value: 'A' } }) // invalid due to zod min(2)\n    // Fix to valid input to reach server error path\n    fireEvent.change(screen.getByLabelText('Name'), { target: { value: 'Agent B' } })\n\n    fireEvent.click(screen.getByRole('button', { name: 'Create' }))\n\n    await waitFor(() => {\n      expect(toast.error).toHaveBeenCalled()\n      expect(onOpenChange).not.toHaveBeenCalled()\n      expect(onCreated).not.toHaveBeenCalled()\n    })\n  })\n})\n"],"names":["jest","mock","supabase","from","fn","insert","auth","getUser","data","user","id","error","toast","success","React","require","Dialog","children","div","data-testid","DialogContent","DialogHeader","DialogTitle","h1","DialogOverlay","DialogPortal","DialogTrigger","button","DialogFooter","DialogDescription","p","DialogClose","requireMock","describe","beforeEach","clearAllMocks","it","onOpenChange","onCreated","client","QueryClient","defaultOptions","queries","retry","mutations","render","QueryClientProvider","CreateAgentDialog","open","fireEvent","change","screen","getByLabelText","target","value","click","getByRole","name","waitFor","expect","toHaveBeenCalledWith","objectContaining","any","String","toHaveBeenCalled","server","use","http","post","HttpResponse","json","status","not"],"mappings":"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"}