{"version":3,"sources":["/Users/elicharlese/CascadeProjects/ECE-AGENT/hooks/use-websocket.ts"],"sourcesContent":["'use client'\n\nimport { useEffect, useState, useCallback, useRef } from 'react'\nimport { supabase } from '@/lib/supabase/client';\n\ninterface Message {\n  id: string\n  text: string\n  sender: 'user' | 'other' | 'ai'\n  senderName?: string\n  timestamp: Date\n  conversationId: string\n  type?: 'text' | 'image' | 'video' | 'audio' | 'document' | 'system' | 'gif' | 'app'\n  mediaUrl?: string\n  fileName?: string\n  fileSize?: string\n  isPinned?: boolean\n  isLiked?: boolean\n  likeCount?: number\n  status?: 'sent' | 'delivered' | 'read'\n  appData?: {\n    appId: string\n    appName: string\n    data: any\n  }\n}\n\ninterface WebSocketMessage {\n  type: string;\n  [key: string]: any;\n}\n\nexport function useWebSocket() {\n  if (process.env.NODE_ENV !== 'production') {\n    // lightweight trace in dev only\n    // console.debug('useWebSocket init')\n  }\n  const [isConnected, setIsConnected] = useState(false);\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [currentConversationId, setCurrentConversationId] = useState<string | null>(null);\n  const [typingUsers, setTypingUsers] = useState<Record<string, { name: string; timestamp: number }>>({});\n\n  const wsRef = useRef<WebSocket | null>(null);\n  const WS_URL = process.env.NEXT_PUBLIC_WEBSOCKET_URL; // Build-time public env\n  const DEFER_UNTIL_INTERACTION =\n    (process.env.NEXT_PUBLIC_WS_DEFER_UNTIL_INTERACTION || '').toLowerCase() === '1' ||\n    (process.env.NEXT_PUBLIC_WS_DEFER_UNTIL_INTERACTION || '').toLowerCase() === 'true'\n\n  const connect = async () => {\n    console.log('connect function called');\n    // Get the current session token from Supabase\n    const { data: { session } } = await supabase.auth.getSession();\n    const token = session?.access_token;\n    \n    if (!token) {\n      console.error('No authentication token available');\n      return;\n    }\n\n    if (!WS_URL) {\n      console.warn('NEXT_PUBLIC_WEBSOCKET_URL is not set. Skipping real WS connect.');\n      return;\n    }\n\n    console.log('Creating WebSocket connection');\n    if (wsRef.current && (wsRef.current.readyState === WebSocket.OPEN || wsRef.current.readyState === WebSocket.CONNECTING)) {\n      return;\n    }\n    \n    wsRef.current = new WebSocket(WS_URL);\n    \n    wsRef.current.onopen = () => {\n      console.log('WebSocket connected');\n      setIsConnected(true);\n      \n      // Authenticate with the token\n      wsRef.current?.send(JSON.stringify({\n        type: 'authenticate',\n        token\n      }));\n    };\n    \n    wsRef.current.onmessage = (event) => {\n      const message = JSON.parse(event.data);\n      setMessages(prev => [...prev, message]);\n      \n      // Handle different message types\n      switch (message.type) {\n        case 'new_message':\n          // Add to messages state\n          break;\n        case 'typing':\n          // Handle typing indicator\n          break;\n        case 'read_receipt':\n          // Handle read receipt\n          break;\n      }\n    };\n    \n    wsRef.current.onclose = () => {\n      console.log('WebSocket disconnected');\n      setIsConnected(false);\n    };\n    \n    wsRef.current.onerror = (error: any) => {\n      console.error('WebSocket error:', error);\n    };\n  };\n  \n  const disconnect = () => {\n    if (wsRef.current) {\n      wsRef.current.close();\n      wsRef.current = null;\n    }\n    setIsConnected(false);\n  };\n  \n  const sendMessage = useCallback((text: string, conversationId: string) => {\n    const newMessage: Message = {\n      id: `${Date.now()}-${Math.random()}`,\n      text,\n      sender: 'user',\n      timestamp: new Date(),\n      conversationId,\n      type: 'text',\n      status: 'sent'\n    }\n    \n    // Add message optimistically\n    setMessages(prev => [...prev, newMessage])\n    \n    // Simulate status updates\n    setTimeout(() => {\n      setMessages(prev =>\n        prev.map(msg =>\n          msg.id === newMessage.id ? { ...msg, status: 'delivered' } : msg\n        )\n      )\n    }, 500)\n    \n    setTimeout(() => {\n      setMessages(prev =>\n        prev.map(msg =>\n          msg.id === newMessage.id ? { ...msg, status: 'read' } : msg\n        )\n      )\n    }, 1500)\n    \n    // Simulate AI response if message contains \"ai\" or \"help\"\n    if (text.toLowerCase().includes('ai') || text.toLowerCase().includes('help')) {\n      // Show typing indicator\n      const typingId = 'ai-assistant'\n      setTypingUsers(prev => ({\n        ...prev,\n        [typingId]: { name: 'AI Assistant', timestamp: Date.now() }\n      }))\n      \n      setTimeout(() => {\n        // Remove typing indicator\n        setTypingUsers(prev => {\n          const newTyping = { ...prev }\n          delete newTyping[typingId]\n          return newTyping\n        })\n        \n        // Add AI response\n        const aiResponse: Message = {\n          id: `${Date.now()}-ai-${Math.random()}`,\n          text: 'I can help you with that! What specific assistance do you need?',\n          sender: 'ai',\n          senderName: 'AI Assistant',\n          timestamp: new Date(),\n          conversationId,\n          type: 'text',\n          status: 'read'\n        }\n        setMessages(prev => [...prev, aiResponse])\n      }, 2000)\n    }\n  }, [])\n\n  const sendTyping = useCallback((conversationId: string) => {\n    console.log(`Sending typing indicator for: ${conversationId}`)\n    // In a real implementation, this would emit to the WebSocket server\n  }, [])\n\n  const joinConversation = useCallback((conversationId: string) => {\n    console.log(`Joining conversation: ${conversationId}`)\n    setCurrentConversationId(conversationId)\n    setMessages([]) // Clear messages when switching conversations\n  }, [])\n\n  const leaveConversation = useCallback((conversationId: string) => {\n    console.log(`Leaving conversation: ${conversationId}`)\n    if (currentConversationId === conversationId) {\n      setCurrentConversationId(null)\n      setMessages([])\n    }\n  }, [currentConversationId])\n\n  // Mock connection only when no WS URL is configured\n  useEffect(() => {\n    if (WS_URL) return;\n    const mockConnect = () => {\n      console.log('Mock WebSocket connected')\n      setIsConnected(true)\n      \n      // Simulate receiving some initial messages after joining\n      if (currentConversationId) {\n        setTimeout(() => {\n          const mockHistoricalMessages: Message[] = [\n            {\n              id: 'mock1',\n              text: 'Welcome to the conversation!',\n              sender: 'other',\n              senderName: 'System',\n              timestamp: new Date(Date.now() - 3600000),\n              conversationId: currentConversationId,\n              status: 'read'\n            },\n            {\n              id: 'mock2',\n              text: 'This is a real-time messaging demo.',\n              sender: 'ai',\n              senderName: 'AI Assistant',\n              timestamp: new Date(Date.now() - 1800000),\n              conversationId: currentConversationId,\n              status: 'read'\n            }\n          ]\n          setMessages(mockHistoricalMessages)\n        }, 500)\n      }\n    }\n\n    mockConnect()\n\n    return () => {\n      console.log('Mock WebSocket cleanup')\n      setIsConnected(false)\n    }\n  }, [WS_URL, currentConversationId])\n\n  useEffect(() => {\n    // Defer connect until the page is visible and the browser is idle.\n    if (!WS_URL) return;\n    let canceled = false\n\n    const scheduleIdle = () => {\n      if ('requestIdleCallback' in window) {\n        ;(window as any).requestIdleCallback(() => {\n          if (!canceled) connect()\n        }, { timeout: 1500 })\n      } else {\n        setTimeout(() => { if (!canceled) connect() }, 200)\n      }\n    }\n\n    const scheduleWhenVisible = () => {\n      if (typeof document !== 'undefined' && document.visibilityState !== 'visible') {\n        const onVisible = () => {\n          if (document.visibilityState === 'visible') {\n            document.removeEventListener('visibilitychange', onVisible)\n            scheduleIdle()\n          }\n        }\n        document.addEventListener('visibilitychange', onVisible)\n      } else {\n        scheduleIdle()\n      }\n    }\n\n    if (typeof window !== 'undefined' && DEFER_UNTIL_INTERACTION) {\n      const once = () => {\n        cleanup()\n        scheduleWhenVisible()\n      }\n      const cleanup = () => {\n        window.removeEventListener('pointerdown', once)\n        window.removeEventListener('keydown', once)\n        window.removeEventListener('touchstart', once)\n        window.removeEventListener('focus', once, true)\n      }\n      window.addEventListener('pointerdown', once, { passive: true })\n      window.addEventListener('keydown', once)\n      window.addEventListener('touchstart', once, { passive: true })\n      window.addEventListener('focus', once, true)\n      // Safety: also schedule after 5s in case no interaction occurs\n      const safety = setTimeout(() => { cleanup(); scheduleWhenVisible() }, 5000)\n      return () => { canceled = true; cleanup(); clearTimeout(safety); disconnect() }\n    }\n\n    scheduleWhenVisible()\n\n    return () => {\n      canceled = true\n      disconnect()\n    }\n  }, [WS_URL, DEFER_UNTIL_INTERACTION])\n\n  return {\n    isConnected,\n    messages,\n    connect,\n    disconnect,\n    joinConversation,\n    leaveConversation,\n    sendMessage,\n    sendChatMessage: sendMessage, // Alias for compatibility\n    sendTyping,\n    typingUsers\n  };\n}\n"],"names":["useWebSocket","process","env","NODE_ENV","isConnected","setIsConnected","useState","messages","setMessages","currentConversationId","setCurrentConversationId","typingUsers","setTypingUsers","wsRef","useRef","WS_URL","NEXT_PUBLIC_WEBSOCKET_URL","DEFER_UNTIL_INTERACTION","NEXT_PUBLIC_WS_DEFER_UNTIL_INTERACTION","toLowerCase","connect","console","log","data","session","supabase","auth","getSession","token","access_token","error","warn","current","readyState","WebSocket","OPEN","CONNECTING","onopen","send","JSON","stringify","type","onmessage","event","message","parse","prev","onclose","onerror","disconnect","close","sendMessage","useCallback","text","conversationId","newMessage","id","Date","now","Math","random","sender","timestamp","status","setTimeout","map","msg","includes","typingId","name","newTyping","aiResponse","senderName","sendTyping","joinConversation","leaveConversation","useEffect","mockConnect","mockHistoricalMessages","canceled","scheduleIdle","window","requestIdleCallback","timeout","scheduleWhenVisible","document","visibilityState","onVisible","removeEventListener","addEventListener","once","cleanup","passive","safety","clearTimeout","sendChatMessage"],"mappings":"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"}