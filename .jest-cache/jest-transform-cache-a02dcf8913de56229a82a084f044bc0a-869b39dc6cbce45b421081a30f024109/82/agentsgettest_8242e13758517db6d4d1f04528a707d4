20a5af742301248763c6b4b6004fb209
// Mock NextResponse.json to produce a standard Response with JSON body
"use strict";
jest.mock('next/server', ()=>({
        NextResponse: {
            json: (data, init)=>new Response(JSON.stringify(data), {
                    status: init?.status ?? 200,
                    headers: {
                        'content-type': 'application/json'
                    }
                })
        }
    }));
// Mock getSupabaseServer to simulate authenticated user and DB calls
jest.mock('@/lib/supabase/server', ()=>{
    const authGetUser = jest.fn(async ()=>({
            data: {
                user: {
                    id: 'user-1'
                }
            },
            error: null
        }));
    // Build a chain: from('agents').select('*').eq('user_id', user.id).order('created_at', { ascending: false })
    const order = jest.fn(async ()=>({
            data: [
                {
                    id: 'agent-1',
                    user_id: 'user-1',
                    name: 'Test Agent',
                    description: null,
                    model: 'gpt-4o-mini',
                    avatar_url: null,
                    capabilities: [],
                    mcp_tools: [],
                    status: 'online',
                    system_prompt: null,
                    created_at: new Date().toISOString()
                }
            ],
            error: null
        }));
    const eq = jest.fn(()=>({
            order
        }));
    const select = jest.fn(()=>({
            eq,
            order
        }));
    const from = jest.fn(()=>({
            select
        }));
    return {
        getSupabaseServer: async ()=>({
                auth: {
                    getUser: authGetUser
                },
                from,
                __mocks: {
                    authGetUser,
                    from,
                    select,
                    eq,
                    order
                }
            })
    };
});
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
describe('GET /api/agents', ()=>{
    it('returns 200 with agents for authenticated user', async ()=>{
        const { GET } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../app/api/agents/route")));
        const res = await GET();
        expect(res.status).toBe(200);
        const json = await res.json();
        expect(Array.isArray(json.agents)).toBe(true);
        expect(json.agents[0].name).toBe('Test Agent');
    });
    it('returns 401 when unauthorized', async ()=>{
        const { getSupabaseServer } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../lib/supabase/server")));
        const supa = await getSupabaseServer();
        supa.__mocks.authGetUser.mockImplementationOnce(async ()=>({
                data: {
                    user: null
                },
                error: null
            }));
        const { GET } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../app/api/agents/route")));
        const res = await GET();
        expect(res.status).toBe(401);
        const json = await res.json();
        expect(json.error).toBeDefined();
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9lbGljaGFybGVzZS9DYXNjYWRlUHJvamVjdHMvRUNFLUFHRU5UL19fdGVzdHNfXy9hcGkvYWdlbnRzLmdldC50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIE1vY2sgTmV4dFJlc3BvbnNlLmpzb24gdG8gcHJvZHVjZSBhIHN0YW5kYXJkIFJlc3BvbnNlIHdpdGggSlNPTiBib2R5XG5qZXN0Lm1vY2soJ25leHQvc2VydmVyJywgKCkgPT4gKHtcbiAgTmV4dFJlc3BvbnNlOiB7XG4gICAganNvbjogKGRhdGE6IGFueSwgaW5pdD86IFJlc3BvbnNlSW5pdCAmIHsgc3RhdHVzPzogbnVtYmVyIH0pID0+XG4gICAgICBuZXcgUmVzcG9uc2UoSlNPTi5zdHJpbmdpZnkoZGF0YSksIHtcbiAgICAgICAgc3RhdHVzOiAoaW5pdCBhcyBhbnkpPy5zdGF0dXMgPz8gMjAwLFxuICAgICAgICBoZWFkZXJzOiB7ICdjb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfSxcbiAgICAgIH0pLFxuICB9LFxufSkpXG5cbi8vIE1vY2sgZ2V0U3VwYWJhc2VTZXJ2ZXIgdG8gc2ltdWxhdGUgYXV0aGVudGljYXRlZCB1c2VyIGFuZCBEQiBjYWxsc1xuamVzdC5tb2NrKCdAL2xpYi9zdXBhYmFzZS9zZXJ2ZXInLCAoKSA9PiB7XG4gIGNvbnN0IGF1dGhHZXRVc2VyID0gamVzdC5mbihhc3luYyAoKSA9PiAoeyBkYXRhOiB7IHVzZXI6IHsgaWQ6ICd1c2VyLTEnIH0gfSwgZXJyb3I6IG51bGwgfSkpXG5cbiAgLy8gQnVpbGQgYSBjaGFpbjogZnJvbSgnYWdlbnRzJykuc2VsZWN0KCcqJykuZXEoJ3VzZXJfaWQnLCB1c2VyLmlkKS5vcmRlcignY3JlYXRlZF9hdCcsIHsgYXNjZW5kaW5nOiBmYWxzZSB9KVxuICBjb25zdCBvcmRlciA9IGplc3QuZm4oYXN5bmMgKCkgPT4gKHtcbiAgICBkYXRhOiBbXG4gICAgICB7XG4gICAgICAgIGlkOiAnYWdlbnQtMScsXG4gICAgICAgIHVzZXJfaWQ6ICd1c2VyLTEnLFxuICAgICAgICBuYW1lOiAnVGVzdCBBZ2VudCcsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBudWxsLFxuICAgICAgICBtb2RlbDogJ2dwdC00by1taW5pJyxcbiAgICAgICAgYXZhdGFyX3VybDogbnVsbCxcbiAgICAgICAgY2FwYWJpbGl0aWVzOiBbXSxcbiAgICAgICAgbWNwX3Rvb2xzOiBbXSxcbiAgICAgICAgc3RhdHVzOiAnb25saW5lJyxcbiAgICAgICAgc3lzdGVtX3Byb21wdDogbnVsbCxcbiAgICAgICAgY3JlYXRlZF9hdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgfSxcbiAgICBdLFxuICAgIGVycm9yOiBudWxsLFxuICB9KSlcbiAgY29uc3QgZXEgPSBqZXN0LmZuKCgpID0+ICh7IG9yZGVyIH0pKVxuICBjb25zdCBzZWxlY3QgPSBqZXN0LmZuKCgpID0+ICh7IGVxLCBvcmRlciB9KSlcbiAgY29uc3QgZnJvbSA9IGplc3QuZm4oKCkgPT4gKHsgc2VsZWN0IH0pKVxuXG4gIHJldHVybiB7XG4gICAgZ2V0U3VwYWJhc2VTZXJ2ZXI6IGFzeW5jICgpID0+ICh7XG4gICAgICBhdXRoOiB7IGdldFVzZXI6IGF1dGhHZXRVc2VyIH0sXG4gICAgICBmcm9tLFxuICAgICAgX19tb2NrczogeyBhdXRoR2V0VXNlciwgZnJvbSwgc2VsZWN0LCBlcSwgb3JkZXIgfSxcbiAgICB9KSxcbiAgfVxufSlcblxuZGVzY3JpYmUoJ0dFVCAvYXBpL2FnZW50cycsICgpID0+IHtcbiAgaXQoJ3JldHVybnMgMjAwIHdpdGggYWdlbnRzIGZvciBhdXRoZW50aWNhdGVkIHVzZXInLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgeyBHRVQgfSA9IGF3YWl0IGltcG9ydCgnQC9hcHAvYXBpL2FnZW50cy9yb3V0ZScpXG5cbiAgICBjb25zdCByZXMgPSBhd2FpdCBHRVQoKVxuICAgIGV4cGVjdChyZXMuc3RhdHVzKS50b0JlKDIwMClcbiAgICBjb25zdCBqc29uID0gYXdhaXQgcmVzLmpzb24oKVxuICAgIGV4cGVjdChBcnJheS5pc0FycmF5KGpzb24uYWdlbnRzKSkudG9CZSh0cnVlKVxuICAgIGV4cGVjdChqc29uLmFnZW50c1swXS5uYW1lKS50b0JlKCdUZXN0IEFnZW50JylcbiAgfSlcblxuICBpdCgncmV0dXJucyA0MDEgd2hlbiB1bmF1dGhvcml6ZWQnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgeyBnZXRTdXBhYmFzZVNlcnZlciB9ID0gYXdhaXQgaW1wb3J0KCdAL2xpYi9zdXBhYmFzZS9zZXJ2ZXInKVxuICAgIGNvbnN0IHN1cGE6IGFueSA9IGF3YWl0IGdldFN1cGFiYXNlU2VydmVyKClcbiAgICBzdXBhLl9fbW9ja3MuYXV0aEdldFVzZXIubW9ja0ltcGxlbWVudGF0aW9uT25jZShhc3luYyAoKSA9PiAoeyBkYXRhOiB7IHVzZXI6IG51bGwgfSwgZXJyb3I6IG51bGwgfSkpXG5cbiAgICBjb25zdCB7IEdFVCB9ID0gYXdhaXQgaW1wb3J0KCdAL2FwcC9hcGkvYWdlbnRzL3JvdXRlJylcbiAgICBjb25zdCByZXMgPSBhd2FpdCBHRVQoKVxuICAgIGV4cGVjdChyZXMuc3RhdHVzKS50b0JlKDQwMSlcbiAgICBjb25zdCBqc29uID0gYXdhaXQgcmVzLmpzb24oKVxuICAgIGV4cGVjdChqc29uLmVycm9yKS50b0JlRGVmaW5lZCgpXG4gIH0pXG59KVxuIl0sIm5hbWVzIjpbImplc3QiLCJtb2NrIiwiTmV4dFJlc3BvbnNlIiwianNvbiIsImRhdGEiLCJpbml0IiwiUmVzcG9uc2UiLCJKU09OIiwic3RyaW5naWZ5Iiwic3RhdHVzIiwiaGVhZGVycyIsImF1dGhHZXRVc2VyIiwiZm4iLCJ1c2VyIiwiaWQiLCJlcnJvciIsIm9yZGVyIiwidXNlcl9pZCIsIm5hbWUiLCJkZXNjcmlwdGlvbiIsIm1vZGVsIiwiYXZhdGFyX3VybCIsImNhcGFiaWxpdGllcyIsIm1jcF90b29scyIsInN5c3RlbV9wcm9tcHQiLCJjcmVhdGVkX2F0IiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwiZXEiLCJzZWxlY3QiLCJmcm9tIiwiZ2V0U3VwYWJhc2VTZXJ2ZXIiLCJhdXRoIiwiZ2V0VXNlciIsIl9fbW9ja3MiLCJkZXNjcmliZSIsIml0IiwiR0VUIiwicmVzIiwiZXhwZWN0IiwidG9CZSIsIkFycmF5IiwiaXNBcnJheSIsImFnZW50cyIsInN1cGEiLCJtb2NrSW1wbGVtZW50YXRpb25PbmNlIiwidG9CZURlZmluZWQiXSwibWFwcGluZ3MiOiJBQUFBLHVFQUF1RTs7QUFDdkVBLEtBQUtDLElBQUksQ0FBQyxlQUFlLElBQU8sQ0FBQTtRQUM5QkMsY0FBYztZQUNaQyxNQUFNLENBQUNDLE1BQVdDLE9BQ2hCLElBQUlDLFNBQVNDLEtBQUtDLFNBQVMsQ0FBQ0osT0FBTztvQkFDakNLLFFBQVEsQUFBQ0osTUFBY0ksVUFBVTtvQkFDakNDLFNBQVM7d0JBQUUsZ0JBQWdCO29CQUFtQjtnQkFDaEQ7UUFDSjtJQUNGLENBQUE7QUFFQSxxRUFBcUU7QUFDckVWLEtBQUtDLElBQUksQ0FBQyx5QkFBeUI7SUFDakMsTUFBTVUsY0FBY1gsS0FBS1ksRUFBRSxDQUFDLFVBQWEsQ0FBQTtZQUFFUixNQUFNO2dCQUFFUyxNQUFNO29CQUFFQyxJQUFJO2dCQUFTO1lBQUU7WUFBR0MsT0FBTztRQUFLLENBQUE7SUFFekYsNkdBQTZHO0lBQzdHLE1BQU1DLFFBQVFoQixLQUFLWSxFQUFFLENBQUMsVUFBYSxDQUFBO1lBQ2pDUixNQUFNO2dCQUNKO29CQUNFVSxJQUFJO29CQUNKRyxTQUFTO29CQUNUQyxNQUFNO29CQUNOQyxhQUFhO29CQUNiQyxPQUFPO29CQUNQQyxZQUFZO29CQUNaQyxjQUFjLEVBQUU7b0JBQ2hCQyxXQUFXLEVBQUU7b0JBQ2JkLFFBQVE7b0JBQ1JlLGVBQWU7b0JBQ2ZDLFlBQVksSUFBSUMsT0FBT0MsV0FBVztnQkFDcEM7YUFDRDtZQUNEWixPQUFPO1FBQ1QsQ0FBQTtJQUNBLE1BQU1hLEtBQUs1QixLQUFLWSxFQUFFLENBQUMsSUFBTyxDQUFBO1lBQUVJO1FBQU0sQ0FBQTtJQUNsQyxNQUFNYSxTQUFTN0IsS0FBS1ksRUFBRSxDQUFDLElBQU8sQ0FBQTtZQUFFZ0I7WUFBSVo7UUFBTSxDQUFBO0lBQzFDLE1BQU1jLE9BQU85QixLQUFLWSxFQUFFLENBQUMsSUFBTyxDQUFBO1lBQUVpQjtRQUFPLENBQUE7SUFFckMsT0FBTztRQUNMRSxtQkFBbUIsVUFBYSxDQUFBO2dCQUM5QkMsTUFBTTtvQkFBRUMsU0FBU3RCO2dCQUFZO2dCQUM3Qm1CO2dCQUNBSSxTQUFTO29CQUFFdkI7b0JBQWFtQjtvQkFBTUQ7b0JBQVFEO29CQUFJWjtnQkFBTTtZQUNsRCxDQUFBO0lBQ0Y7QUFDRjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUFtQixTQUFTLG1CQUFtQjtJQUMxQkMsR0FBRyxrREFBa0Q7UUFDbkQsTUFBTSxFQUFFQyxHQUFHLEVBQUUsR0FBRyxNQUFNLG1FQUFBLFFBQU87UUFFN0IsTUFBTUMsTUFBTSxNQUFNRDtRQUNsQkUsT0FBT0QsSUFBSTdCLE1BQU0sRUFBRStCLElBQUksQ0FBQztRQUN4QixNQUFNckMsT0FBTyxNQUFNbUMsSUFBSW5DLElBQUk7UUFDM0JvQyxPQUFPRSxNQUFNQyxPQUFPLENBQUN2QyxLQUFLd0MsTUFBTSxHQUFHSCxJQUFJLENBQUM7UUFDeENELE9BQU9wQyxLQUFLd0MsTUFBTSxDQUFDLEVBQUUsQ0FBQ3pCLElBQUksRUFBRXNCLElBQUksQ0FBQztJQUNuQztJQUVBSixHQUFHLGlDQUFpQztRQUNsQyxNQUFNLEVBQUVMLGlCQUFpQixFQUFFLEdBQUcsTUFBTSxtRUFBQSxRQUFPO1FBQzNDLE1BQU1hLE9BQVksTUFBTWI7UUFDeEJhLEtBQUtWLE9BQU8sQ0FBQ3ZCLFdBQVcsQ0FBQ2tDLHNCQUFzQixDQUFDLFVBQWEsQ0FBQTtnQkFBRXpDLE1BQU07b0JBQUVTLE1BQU07Z0JBQUs7Z0JBQUdFLE9BQU87WUFBSyxDQUFBO1FBRWpHLE1BQU0sRUFBRXNCLEdBQUcsRUFBRSxHQUFHLE1BQU0sbUVBQUEsUUFBTztRQUM3QixNQUFNQyxNQUFNLE1BQU1EO1FBQ2xCRSxPQUFPRCxJQUFJN0IsTUFBTSxFQUFFK0IsSUFBSSxDQUFDO1FBQ3hCLE1BQU1yQyxPQUFPLE1BQU1tQyxJQUFJbkMsSUFBSTtRQUMzQm9DLE9BQU9wQyxLQUFLWSxLQUFLLEVBQUUrQixXQUFXO0lBQ2hDO0FBQ0YifQ==