d55be8d58c6a9206a1893af9b6662efd
'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "AgentMCPIntegration", {
    enumerable: true,
    get: function() {
        return AgentMCPIntegration;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _agentservice = require("../../services/agent-service");
const _button = require("../ui/button");
const _badge = require("../ui/badge");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
function AgentMCPIntegration({ agentId, onToolExecute }) {
    const [agent, setAgent] = (0, _react.useState)(null);
    const [executing, setExecuting] = (0, _react.useState)(null);
    const [results, setResults] = (0, _react.useState)({});
    (0, _react.useEffect)(()=>{
        let mounted = true;
        (async ()=>{
            const a = await _agentservice.agentService.getAgent(agentId);
            if (mounted) setAgent(a);
        })();
        return ()=>{
            mounted = false;
        };
    }, [
        agentId
    ]);
    const defaultParamsFor = (toolId)=>{
        switch(toolId){
            case 'brave-search':
                return {
                    query: 'hello world'
                };
            case 'git':
                return {
                    action: 'status'
                };
            case 'linear':
                return {
                    action: 'list'
                };
            case 'stripe':
                return {
                    action: 'balance'
                };
            case 'sequential-thinking':
                return {
                    prompt: 'Analyze project structure'
                };
            case 'memory':
                return {
                    op: 'status'
                };
            default:
                return {};
        }
    };
    const executeTool = async (toolId)=>{
        try {
            setExecuting(toolId);
            const params = defaultParamsFor(toolId);
            const res = await onToolExecute(toolId, params);
            setResults((prev)=>({
                    ...prev,
                    [toolId]: res
                }));
        } catch (e) {
            setResults((prev)=>({
                    ...prev,
                    [toolId]: {
                        error: e instanceof Error ? e.message : String(e)
                    }
                }));
        } finally{
            setExecuting(null);
        }
    };
    if (!agent) {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
            className: "p-4 text-sm text-gray-600 dark:text-gray-300",
            children: "Loading MCP tools…"
        });
    }
    const tools = agent.mcpTools ?? [];
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        className: "p-4",
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                className: "flex items-center justify-between mb-3",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("h3", {
                        className: "text-sm font-semibold",
                        children: [
                            "MCP Tools for ",
                            agent.name
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)(_badge.Badge, {
                        variant: "secondary",
                        children: [
                            tools.length,
                            " tools"
                        ]
                    })
                ]
            }),
            tools.length === 0 ? /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: "text-sm text-gray-600 dark:text-gray-300",
                children: "No MCP tools configured for this agent."
            }) : /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: "space-y-3",
                children: tools.map((tool)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: "p-3 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                className: "flex items-center justify-between",
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                        className: "flex items-center gap-2",
                                        children: [
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                                className: "font-medium text-sm",
                                                children: tool
                                            }),
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_badge.Badge, {
                                                variant: "outline",
                                                className: "text-xs",
                                                children: "MCP"
                                            })
                                        ]
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                                        size: "sm",
                                        onClick: ()=>executeTool(tool),
                                        disabled: executing === tool,
                                        children: executing === tool ? 'Running…' : 'Run'
                                    })
                                ]
                            }),
                            results[tool] && /*#__PURE__*/ (0, _jsxruntime.jsx)("pre", {
                                className: "mt-2 text-xs bg-gray-50 dark:bg-gray-900 p-2 rounded overflow-x-auto",
                                children: JSON.stringify(results[tool], null, 2)
                            })
                        ]
                    }, tool))
            })
        ]
    });
}

//# sourceMappingURL=data:application/json;base64,