60442766f603e6974fdaaf113a37fc89
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("@testing-library/react");
const _ErrorBoundary = require("../../components/ErrorBoundary");
// Component that throws an error for testing
function ThrowError({ shouldThrow = false }) {
    if (shouldThrow) {
        throw new Error('Test error');
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
        children: "No error"
    });
}
describe('ErrorBoundary', ()=>{
    // Suppress console.error for these tests
    const originalError = console.error;
    beforeAll(()=>{
        console.error = jest.fn();
    });
    afterAll(()=>{
        console.error = originalError;
    });
    it('renders children when there is no error', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorBoundary.ErrorBoundary, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ThrowError, {})
        }));
        expect(_react.screen.getByText('No error')).toBeInTheDocument();
    });
    it('renders error fallback when child throws error', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorBoundary.ErrorBoundary, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ThrowError, {
                shouldThrow: true
            })
        }));
        expect(_react.screen.getByText('Something went wrong')).toBeInTheDocument();
        expect(_react.screen.getByText('Test error')).toBeInTheDocument();
        expect(_react.screen.getByRole('button', {
            name: /try again/i
        })).toBeInTheDocument();
    });
    it('calls retry function when retry button is clicked', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorBoundary.ErrorBoundary, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ThrowError, {
                shouldThrow: true
            })
        }));
        const retryButton = _react.screen.getByRole('button', {
            name: /try again/i
        });
        _react.fireEvent.click(retryButton);
        // After retry, should render children again (no error)
        expect(_react.screen.getByText('No error')).toBeInTheDocument();
    });
    it('calls onError callback when error occurs', ()=>{
        const mockOnError = jest.fn();
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorBoundary.ErrorBoundary, {
            onError: mockOnError,
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ThrowError, {
                shouldThrow: true
            })
        }));
        expect(mockOnError).toHaveBeenCalledWith(expect.any(Error), expect.objectContaining({
            componentStack: expect.any(String)
        }));
    });
    it('renders custom fallback component when provided', ()=>{
        const CustomFallback = ({ error, retry })=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("span", {
                        children: [
                            "Custom error: ",
                            error.message
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                        onClick: retry,
                        children: "Custom retry"
                    })
                ]
            });
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorBoundary.ErrorBoundary, {
            fallback: CustomFallback,
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ThrowError, {
                shouldThrow: true
            })
        }));
        expect(_react.screen.getByText('Custom error: Test error')).toBeInTheDocument();
        expect(_react.screen.getByRole('button', {
            name: /custom retry/i
        })).toBeInTheDocument();
    });
});
describe('ChatErrorBoundary', ()=>{
    const originalError = console.error;
    beforeAll(()=>{
        console.error = jest.fn();
    });
    afterAll(()=>{
        console.error = originalError;
    });
    it('renders chat-specific error fallback', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorBoundary.ChatErrorBoundary, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ThrowError, {
                shouldThrow: true
            })
        }));
        expect(_react.screen.getByText('Chat unavailable')).toBeInTheDocument();
        expect(_react.screen.getByText('Unable to load the chat interface.')).toBeInTheDocument();
        expect(_react.screen.getByRole('button', {
            name: /retry/i
        })).toBeInTheDocument();
    });
    it('has proper styling for chat context', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorBoundary.ChatErrorBoundary, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ThrowError, {
                shouldThrow: true
            })
        }));
        const container = _react.screen.getByText('Chat unavailable').closest('div');
        expect(container).toHaveClass('h-full', 'flex', 'items-center', 'justify-center');
    });
});

//# sourceMappingURL=data:application/json;base64,