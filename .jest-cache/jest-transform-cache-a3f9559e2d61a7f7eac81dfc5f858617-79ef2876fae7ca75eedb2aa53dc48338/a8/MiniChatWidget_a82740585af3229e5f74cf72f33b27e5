ad228d960725f7ee1bb832386459b156
"use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "MiniChatWidget", {
    enumerable: true,
    get: function() {
        return MiniChatWidget;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _reactdom = require("react-dom");
const _lucidereact = require("lucide-react");
const _button = require("../ui/button");
const _usewebsocket = require("../../hooks/use-websocket");
const _usehotkeys = require("../../hooks/use-hotkeys");
const _usehaptics = require("../../hooks/use-haptics");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const DEFAULT_W = 360;
const DEFAULT_H = 420;
const COMPACT_W = 280;
const COMPACT_H = 260;
const defaultX = ()=>typeof window !== "undefined" ? Math.max(16, window.innerWidth - DEFAULT_W - 16) : 16;
const defaultY = ()=>typeof window !== "undefined" ? Math.max(16, window.innerHeight - DEFAULT_H - 16) : 16;
const DEFAULT_STATE = {
    minimized: true,
    x: defaultX(),
    y: defaultY(),
    w: DEFAULT_W,
    h: DEFAULT_H
};
const STORAGE_KEY = "miniChatWidgetState";
const HINT_KEY = "miniChatWidgetHintSeen";
function MiniChatWidget({ title = "Quick Chat", initialMinimized, initialX, initialY, initialW, initialH, conversationId }) {
    const [state, setState] = (0, _react.useState)(()=>({
            minimized: initialMinimized ?? DEFAULT_STATE.minimized,
            x: initialX ?? DEFAULT_STATE.x,
            y: initialY ?? DEFAULT_STATE.y,
            w: initialW ?? DEFAULT_STATE.w,
            h: initialH ?? DEFAULT_STATE.h
        }));
    const [message, setMessage] = (0, _react.useState)("");
    const [mounted, setMounted] = (0, _react.useState)(false);
    const [showHint, setShowHint] = (0, _react.useState)(false);
    const quickInputRef = (0, _react.useRef)(null);
    const { sendChatMessage, joinConversation, messages } = (0, _usewebsocket.useWebSocket)();
    const { triggerHaptic } = (0, _usehaptics.useHaptics)();
    // Stable mini-chat conversation id
    const miniChatConversationId = (0, _react.useMemo)(()=>{
        if (conversationId) return conversationId;
        if (typeof window === "undefined") return "mini-chat";
        const KEY = "miniChatConversationId";
        let cid = localStorage.getItem(KEY);
        if (!cid) {
            cid = `mini-${Date.now()}-${Math.floor(Math.random() * 1e6)}`;
            try {
                localStorage.setItem(KEY, cid);
            } catch  {}
        }
        return cid;
    }, [
        conversationId
    ]);
    const dragging = (0, _react.useRef)(false);
    const resizing = (0, _react.useRef)(false);
    const dragStart = (0, _react.useRef)(null);
    const sizeStart = (0, _react.useRef)(null);
    // Load persisted state
    (0, _react.useEffect)(()=>{
        setMounted(true);
        try {
            const raw = localStorage.getItem(STORAGE_KEY);
            if (raw) {
                const parsed = JSON.parse(raw);
                setState((s)=>({
                        ...s,
                        ...parsed,
                        // allow explicit initial props to override persisted
                        minimized: initialMinimized ?? parsed.minimized,
                        x: initialX ?? parsed.x,
                        y: initialY ?? parsed.y,
                        w: initialW ?? parsed.w,
                        h: initialH ?? parsed.h
                    }));
            }
        } catch  {}
    }, [
        initialH,
        initialMinimized,
        initialW,
        initialX,
        initialY
    ]);
    // Persist state
    (0, _react.useEffect)(()=>{
        try {
            localStorage.setItem(STORAGE_KEY, JSON.stringify(state));
        } catch  {}
    }, [
        state
    ]);
    // Hotkey: âŒ˜L focuses the quick chat input (when minimized)
    (0, _usehotkeys.useHotkeys)([
        {
            combo: "meta+l",
            preventDefault: true,
            onTrigger: ()=>{
                if (state.minimized) {
                    quickInputRef.current?.focus();
                    triggerHaptic("selection");
                }
            }
        }
    ]);
    // Expose imperative API for popout/minimize and listen to CustomEvents
    (0, _react.useEffect)(()=>{
        const popoutListener = ()=>expandToPopout();
        const minimizeListener = ()=>minimizeToBar();
        const togglePopoutListener = ()=>toggleMinimize();
        window.addEventListener("quickchat:popout", popoutListener);
        window.addEventListener("quickchat:minimize", minimizeListener);
        window.addEventListener("quickchat:toggle-popout", togglePopoutListener);
        // Merge into global API without clobbering
        const existing = window.quickChat || {};
        const injected = {
            ...existing,
            popout: expandToPopout,
            minimize: minimizeToBar,
            togglePopout: toggleMinimize
        };
        window.quickChat = injected;
        return ()=>{
            window.removeEventListener("quickchat:popout", popoutListener);
            window.removeEventListener("quickchat:minimize", minimizeListener);
            window.removeEventListener("quickchat:toggle-popout", togglePopoutListener);
            try {
                const qc = window.quickChat || {};
                if (qc) {
                    delete qc.popout;
                    delete qc.minimize;
                    delete qc.togglePopout;
                    if (Object.keys(qc).length === 0) {
                        delete window.quickChat;
                    } else {
                        window.quickChat = qc;
                    }
                }
            } catch  {}
        };
    }, []);
    // One-time hint for discoverability (only when minimized and first visit)
    (0, _react.useEffect)(()=>{
        if (!mounted) return;
        try {
            const seen = localStorage.getItem(HINT_KEY);
            if (!seen && state.minimized) {
                setShowHint(true);
                const id = setTimeout(()=>{
                    try {
                        localStorage.setItem(HINT_KEY, "1");
                    } catch  {}
                    setShowHint(false);
                }, 6000);
                return ()=>clearTimeout(id);
            }
        } catch  {}
    }, [
        mounted,
        state.minimized
    ]);
    // Clamp to viewport on resize and keep popout aligned to bar width/offset
    (0, _react.useEffect)(()=>{
        const onResize = ()=>{
            setState((s)=>{
                const isMin = s.minimized;
                const w = isMin ? s.w : computeBarWidth();
                const x = isMin ? Math.min(Math.max(0, s.x), Math.max(0, window.innerWidth - w)) : Math.max(0, Math.floor((window.innerWidth - w) / 2));
                const h = s.h;
                const y = isMin ? Math.min(Math.max(0, s.y), Math.max(0, window.innerHeight - 56)) : Math.max(16, Math.floor(window.innerHeight - (BAR_BOTTOM_MARGIN + EST_BAR_HEIGHT + POPOUT_OFFSET_ABOVE_BAR) - h));
                return {
                    ...s,
                    x,
                    y,
                    w,
                    h
                };
            });
        };
        window.addEventListener("resize", onResize);
        return ()=>window.removeEventListener("resize", onResize);
    }, []);
    // Join a lightweight conversation when opened
    (0, _react.useEffect)(()=>{
        if (!state.minimized) {
            joinConversation(miniChatConversationId);
        }
    }, [
        state.minimized,
        joinConversation,
        miniChatConversationId
    ]);
    const onMouseMove = (0, _react.useCallback)((e)=>{
        if (dragging.current && dragStart.current) {
            const dx = e.clientX - dragStart.current.mx;
            const dy = e.clientY - dragStart.current.my;
            setState((s)=>{
                const nx = Math.min(Math.max(0, dragStart.current.x + dx), window.innerWidth - s.w);
                const ny = Math.min(Math.max(0, dragStart.current.y + dy), window.innerHeight - (s.minimized ? 56 : s.h));
                return {
                    ...s,
                    x: nx,
                    y: ny
                };
            });
        }
        if (resizing.current && sizeStart.current) {
            const dx = e.clientX - sizeStart.current.mx;
            const dy = e.clientY - sizeStart.current.my;
            setState((s)=>{
                const minW = 280;
                const minH = 260;
                const nw = Math.min(Math.max(minW, sizeStart.current.w + dx), window.innerWidth - s.x);
                const nh = Math.min(Math.max(minH, sizeStart.current.h + dy), window.innerHeight - s.y);
                return {
                    ...s,
                    w: nw,
                    h: nh
                };
            });
        }
    }, []);
    const onMouseUp = (0, _react.useCallback)(()=>{
        dragging.current = false;
        resizing.current = false;
        dragStart.current = null;
        sizeStart.current = null;
    }, []);
    (0, _react.useEffect)(()=>{
        window.addEventListener("mousemove", onMouseMove);
        window.addEventListener("mouseup", onMouseUp);
        return ()=>{
            window.removeEventListener("mousemove", onMouseMove);
            window.removeEventListener("mouseup", onMouseUp);
        };
    }, [
        onMouseMove,
        onMouseUp
    ]);
    const startDrag = (e)=>{
        dragging.current = true;
        dragStart.current = {
            mx: e.clientX,
            my: e.clientY,
            x: state.x,
            y: state.y
        };
    };
    const startResize = (e)=>{
        e.stopPropagation();
        resizing.current = true;
        sizeStart.current = {
            mx: e.clientX,
            my: e.clientY,
            w: state.w,
            h: state.h
        };
    };
    const dismissHint = ()=>{
        setShowHint(false);
        try {
            localStorage.setItem(HINT_KEY, "1");
        } catch  {}
    };
    // Layout constants for the bottom bar and popout relationship
    const BAR_SIDE_MARGIN = 16 // tailwind bottom-4/left-right margins in px
    ;
    const BAR_BOTTOM_MARGIN = 16;
    const BAR_MAX_WIDTH = 720;
    const EST_BAR_HEIGHT = 48 // approximate height of the compact bar
    ;
    const POPOUT_OFFSET_ABOVE_BAR = 15;
    const computeBarWidth = ()=>{
        if (typeof window === "undefined") return Math.min(BAR_MAX_WIDTH, 360);
        return Math.min(BAR_MAX_WIDTH, window.innerWidth - BAR_SIDE_MARGIN * 2);
    };
    const expandToPopout = ()=>{
        setState((s)=>{
            const w = computeBarWidth();
            const x = Math.max(0, Math.floor((window.innerWidth - w) / 2));
            const h = s.h;
            const y = Math.max(16, Math.floor(window.innerHeight - (BAR_BOTTOM_MARGIN + EST_BAR_HEIGHT + POPOUT_OFFSET_ABOVE_BAR) - h));
            return {
                ...s,
                minimized: false,
                w,
                x,
                y,
                h
            };
        });
    };
    const minimizeToBar = ()=>{
        setState((s)=>({
                ...s,
                minimized: true
            }));
    };
    const toggleMinimize = ()=>{
        dismissHint();
        setState((s)=>({
                ...s,
                minimized: !s.minimized
            }));
    };
    // Global hotkey: âŒ˜Q (and Ctrl+Q fallback) to toggle the Quick Chat popup
    (0, _usehotkeys.useHotkeys)([
        {
            combo: "meta+q",
            preventDefault: true,
            enableInInputs: true,
            onTrigger: ()=>{
                toggleMinimize();
                triggerHaptic("selection");
            }
        },
        {
            combo: "ctrl+q",
            preventDefault: true,
            enableInInputs: true,
            onTrigger: ()=>{
                toggleMinimize();
                triggerHaptic("selection");
            }
        }
    ]);
    // Resize helpers for header controls
    const setCompactSize = ()=>{
        setState((s)=>({
                ...s,
                w: COMPACT_W,
                h: COMPACT_H
            }));
    };
    const setDefaultSize = ()=>{
        setState((s)=>({
                ...s,
                w: DEFAULT_W,
                h: DEFAULT_H
            }));
    };
    const onSend = ()=>{
        const text = message.trim();
        if (!text) return;
        try {
            sendChatMessage(text, miniChatConversationId);
        } catch  {}
        setMessage("");
    };
    // Minimized compact bar (Appleâ€‘style)
    if (state.minimized) {
        if (!mounted) return null;
        const onQuickKeyDown = (e)=>{
            const isComposing = e.nativeEvent?.isComposing;
            if (isComposing) return;
            if (e.key === "Enter" && !e.shiftKey) {
                e.preventDefault();
                if (message.trim()) {
                    try {
                        sendChatMessage(message.trim(), miniChatConversationId);
                    } catch  {}
                    setMessage("");
                    triggerHaptic("light");
                    // After sending from the bar, open the popout to show the AI chat
                    expandToPopout();
                }
            } else if (e.key === "Escape") {
                e.currentTarget.blur();
            }
        };
        const bar = /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
            className: "fixed z-[9999] bottom-4 left-1/2 -translate-x-1/2 w-[min(720px,calc(100%-2rem))]",
            children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                className: "group flex items-center gap-2 rounded-2xl border border-gray-200/60 dark:border-gray-700/70 bg-white/80 dark:bg-gray-900/80 backdrop-blur supports-[backdrop-filter]:bg-white/70 supports-[backdrop-filter]:dark:bg-gray-900/70 shadow-lg hover:shadow-xl transition-shadow duration-200 motion-reduce:transition-none px-3 py-2",
                role: "search",
                "aria-label": "Quick chat",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                        className: "inline-flex items-center justify-center h-8 w-8 rounded-full text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-800 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-indigo-500",
                        "aria-label": "New quick chat",
                        onClick: ()=>{
                            expandToPopout();
                            triggerHaptic("selection");
                        },
                        type: "button",
                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Plus, {
                            className: "h-4 w-4"
                        })
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                        ref: quickInputRef,
                        value: message,
                        onChange: (e)=>setMessage(e.target.value),
                        onKeyDown: onQuickKeyDown,
                        placeholder: "Ask anything (âŒ˜L)",
                        className: "flex-1 bg-transparent text-sm md:text-base placeholder:text-gray-500 dark:placeholder:text-gray-400 text-gray-900 dark:text-gray-100 outline-none",
                        "aria-label": "Ask anything"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: "hidden sm:flex items-center gap-1 mr-1",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                className: "hidden md:inline-flex items-center gap-1 text-xs text-gray-600 dark:text-gray-300 border border-gray-300/70 dark:border-gray-700 rounded-full px-2 py-1",
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Code2, {
                                        className: "h-3.5 w-3.5"
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                        children: "Code"
                                    })
                                ]
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                className: "hidden lg:inline-flex items-center gap-1 text-[11px] text-gray-600 dark:text-gray-300 border border-gray-300/70 dark:border-gray-700 rounded-full px-2 py-1",
                                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                    children: "GPT-5 (high reasoning)"
                                })
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                        className: "inline-flex items-center justify-center h-8 w-8 rounded-full text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-800 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-indigo-500",
                        "aria-label": "Voice input",
                        type: "button",
                        onClick: ()=>triggerHaptic("selection"),
                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Mic, {
                            className: "h-4 w-4"
                        })
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                        className: "inline-flex items-center justify-center h-8 w-8 rounded-full bg-white text-gray-900 dark:bg-white dark:text-gray-900 shadow-sm hover:shadow focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-indigo-500",
                        "aria-label": "Record",
                        type: "button",
                        onClick: ()=>triggerHaptic("light"),
                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Circle, {
                            className: "h-4 w-4"
                        })
                    })
                ]
            })
        });
        return /*#__PURE__*/ (0, _reactdom.createPortal)(bar, document.body);
    }
    const content = /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        className: "fixed z-[9999] rounded-2xl border border-gray-200/60 dark:border-gray-700/70 bg-white/80 dark:bg-gray-900/80 backdrop-blur supports-[backdrop-filter]:bg-white/70 supports-[backdrop-filter]:dark:bg-gray-900/70 shadow-2xl overflow-hidden",
        style: {
            left: state.x,
            top: state.y,
            width: state.w,
            height: state.h
        },
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                className: "cursor-move select-none flex items-center justify-between px-3 py-2 bg-white/60 dark:bg-gray-900/60 border-b border-gray-200/60 dark:border-gray-700/60 backdrop-blur",
                onMouseDown: startDrag,
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: "flex items-center gap-2 text-gray-700 dark:text-gray-200",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Bot, {
                                className: "h-4 w-4"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                className: "text-sm font-medium",
                                children: title
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: "flex items-center gap-1",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                                variant: "ghost",
                                size: "icon",
                                className: "h-7 w-7",
                                onMouseDown: (e)=>e.stopPropagation(),
                                onClick: setCompactSize,
                                title: "Minimize",
                                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Minimize2, {
                                    className: "h-4 w-4"
                                })
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                                variant: "ghost",
                                size: "icon",
                                className: "h-7 w-7",
                                onMouseDown: (e)=>e.stopPropagation(),
                                onClick: setDefaultSize,
                                title: "Reset size",
                                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Maximize2, {
                                    className: "h-4 w-4"
                                })
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                                variant: "ghost",
                                size: "icon",
                                className: "h-7 w-7",
                                onMouseDown: (e)=>e.stopPropagation(),
                                onClick: ()=>setState((s)=>({
                                            ...s,
                                            minimized: true
                                        })),
                                title: "Close",
                                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.X, {
                                    className: "h-4 w-4"
                                })
                            })
                        ]
                    })
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: "flex-1 h-[calc(100%-42px)] overflow-y-auto p-3 text-sm text-gray-700 dark:text-gray-200 space-y-2",
                children: messages.filter((m)=>m.conversationId === miniChatConversationId).length === 0 ? /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                    className: "opacity-80",
                    children: "Your quick chat feed will appear here."
                }) : messages.filter((m)=>m.conversationId === miniChatConversationId).map((m)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: "rounded-lg border border-gray-200/60 dark:border-gray-700/60 bg-white/60 dark:bg-gray-900/60 backdrop-blur px-3 py-2",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                className: "text-[11px] text-gray-500 dark:text-gray-400 mb-1",
                                children: [
                                    m.senderName || (m.sender === "user" ? "You" : m.sender === "ai" ? "AI Assistant" : "Contact"),
                                    " \xb7 ",
                                    new Date(m.timestamp).toLocaleTimeString()
                                ]
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                className: "whitespace-pre-wrap text-gray-900 dark:text-gray-100",
                                children: m.text
                            })
                        ]
                    }, m.id))
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: "absolute right-0 bottom-0 w-4 h-4 cursor-se-resize",
                onMouseDown: startResize
            })
        ]
    });
    if (!mounted) return null;
    return /*#__PURE__*/ (0, _reactdom.createPortal)(content, document.body);
}

//# sourceMappingURL=data:application/json;base64,