{"version":3,"sources":["/Users/elicharlese/CascadeProjects/AGENT/__tests__/observability/CoreProtection.test.ts"],"sourcesContent":["import { CoreProtection } from '../../libs/observability/CoreProtection';\nimport { RecorderConfig } from '../../src/types/agent-observability';\n\ndescribe('CoreProtection', () => {\n  let coreProtection: CoreProtection;\n  let mockConfig: RecorderConfig;\n\n  beforeEach(() => {\n    mockConfig = {\n      enableFileSystemSink: true,\n      enableSupabaseSink: false,\n      enableCoreProtection: true,\n      redactPatterns: ['.env*', '*secret*'],\n      protectedPaths: [\n        'src/types/agent.ts',\n        'src/types/conversation.ts',\n        'prisma/schema.prisma',\n        'middleware.ts',\n        'components/ui/**',\n        'lib/supabase/**',\n      ],\n      learningPaths: [\n        'docs/patches/**',\n        'data/learning/**',\n      ],\n    };\n    coreProtection = new CoreProtection(mockConfig);\n  });\n\n  describe('isPristineCorePath', () => {\n    it('should identify pristine core files correctly', () => {\n      expect(coreProtection.isPristineCorePath('src/types/agent.ts')).toBe(true);\n      expect(coreProtection.isPristineCorePath('src/types/conversation.ts')).toBe(true);\n      expect(coreProtection.isPristineCorePath('prisma/schema.prisma')).toBe(true);\n      expect(coreProtection.isPristineCorePath('middleware.ts')).toBe(true);\n    });\n\n    it('should identify protected directories with wildcards', () => {\n      expect(coreProtection.isPristineCorePath('components/ui/button.tsx')).toBe(true);\n      expect(coreProtection.isPristineCorePath('components/ui/dialog.tsx')).toBe(true);\n      expect(coreProtection.isPristineCorePath('lib/supabase/client.ts')).toBe(true);\n      expect(coreProtection.isPristineCorePath('lib/supabase/server.ts')).toBe(true);\n    });\n\n    it('should allow non-protected files', () => {\n      expect(coreProtection.isPristineCorePath('components/chat/chat-window.tsx')).toBe(false);\n      expect(coreProtection.isPristineCorePath('app/page.tsx')).toBe(false);\n      expect(coreProtection.isPristineCorePath('lib/utils.ts')).toBe(false);\n    });\n\n    it('should handle path normalization', () => {\n      expect(coreProtection.isPristineCorePath('/src/types/agent.ts')).toBe(true);\n      expect(coreProtection.isPristineCorePath('./src/types/agent.ts')).toBe(false); // relative paths not normalized\n      expect(coreProtection.isPristineCorePath('src\\\\types\\\\agent.ts')).toBe(true); // Windows paths\n    });\n  });\n\n  describe('isLearningLayerPath', () => {\n    it('should identify learning layer paths correctly', () => {\n      expect(coreProtection.isLearningLayerPath('docs/patches/patch-1/CONSEQUENCES.md')).toBe(true);\n      expect(coreProtection.isLearningLayerPath('docs/patches/patch-2/ledger.jsonl')).toBe(true);\n      expect(coreProtection.isLearningLayerPath('data/learning/strategy-123.json')).toBe(true);\n    });\n\n    it('should reject non-learning paths', () => {\n      expect(coreProtection.isLearningLayerPath('src/types/agent.ts')).toBe(false);\n      expect(coreProtection.isLearningLayerPath('components/chat/chat-window.tsx')).toBe(false);\n    });\n  });\n\n  describe('validateTransformation', () => {\n    it('should pass validation for safe files', async () => {\n      const result = await coreProtection.validateTransformation([\n        'components/chat/chat-window.tsx',\n        'app/page.tsx',\n        'lib/utils.ts',\n      ]);\n\n      expect(result.isValid).toBe(true);\n      expect(result.violations).toHaveLength(0);\n      expect(result.allowedPaths).toHaveLength(3);\n      expect(result.protectedPaths).toHaveLength(0);\n    });\n\n    it('should detect pristine core violations', async () => {\n      const result = await coreProtection.validateTransformation([\n        'src/types/agent.ts',\n        'components/chat/chat-window.tsx',\n      ]);\n\n      expect(result.isValid).toBe(false);\n      expect(result.violations).toHaveLength(1);\n      expect(result.violations[0].path).toBe('src/types/agent.ts');\n      expect(result.violations[0].severity).toBe('critical');\n      expect(result.protectedPaths).toContain('src/types/agent.ts');\n      expect(result.allowedPaths).toContain('components/chat/chat-window.tsx');\n    });\n\n    it('should handle multiple violations with different severities', async () => {\n      const result = await coreProtection.validateTransformation([\n        'src/types/agent.ts', // critical\n        'next.config.js', // error (if configured)\n        'components/ui/button.tsx', // error\n      ]);\n\n      expect(result.isValid).toBe(false);\n      expect(result.violations.length).toBeGreaterThan(0);\n      \n      const criticalViolations = result.violations.filter(v => v.severity === 'critical');\n      expect(criticalViolations.length).toBeGreaterThan(0);\n    });\n\n    it('should allow learning layer modifications', async () => {\n      const result = await coreProtection.validateTransformation([\n        'docs/patches/patch-1/CONSEQUENCES.md',\n        'data/learning/new-strategy.json',\n      ]);\n\n      expect(result.isValid).toBe(true);\n      expect(result.violations).toHaveLength(0);\n      expect(result.allowedPaths).toHaveLength(2);\n    });\n  });\n\n  describe('auditCoreIntegrity', () => {\n    it('should pass audit when core files are intact', async () => {\n      // Mock fs.access to simulate existing files\n      const mockFs = require('fs').promises;\n      jest.spyOn(mockFs, 'access').mockResolvedValue(undefined);\n      jest.spyOn(mockFs, 'readFile').mockImplementation((path: string) => {\n        if (path.includes('agent.ts')) {\n          return Promise.resolve('export interface Agent { id: string; }');\n        }\n        if (path.includes('schema.prisma')) {\n          return Promise.resolve('generator client { provider = \"prisma-client-js\" }');\n        }\n        return Promise.resolve('export const test = true;');\n      });\n\n      const result = await coreProtection.auditCoreIntegrity();\n      \n      expect(result.isValid).toBe(true);\n      expect(result.violations).toHaveLength(0);\n      expect(result.protectedPaths.length).toBeGreaterThan(0);\n    });\n\n    it('should detect missing critical files', async () => {\n      // Mock fs.access to simulate missing files\n      const mockFs = require('fs').promises;\n      jest.spyOn(mockFs, 'access').mockRejectedValue(new Error('ENOENT'));\n\n      const result = await coreProtection.auditCoreIntegrity();\n      \n      expect(result.isValid).toBe(false);\n      expect(result.violations.length).toBeGreaterThan(0);\n      \n      const criticalViolations = result.violations.filter(v => v.severity === 'critical');\n      expect(criticalViolations.length).toBeGreaterThan(0);\n    });\n\n    it('should detect corrupted core files', async () => {\n      const mockFs = require('fs').promises;\n      jest.spyOn(mockFs, 'access').mockResolvedValue(undefined);\n      jest.spyOn(mockFs, 'readFile').mockImplementation((path: string) => {\n        if (path.includes('agent.ts')) {\n          return Promise.resolve('// corrupted file with no exports');\n        }\n        if (path.includes('schema.prisma')) {\n          return Promise.resolve('// missing generator client');\n        }\n        return Promise.resolve('export const test = true;');\n      });\n\n      const result = await coreProtection.auditCoreIntegrity();\n      \n      expect(result.isValid).toBe(false);\n      expect(result.violations.length).toBeGreaterThan(0);\n    });\n  });\n\n  describe('enforceProtection', () => {\n    it('should not throw for valid core state', async () => {\n      const mockFs = require('fs').promises;\n      jest.spyOn(mockFs, 'access').mockResolvedValue(undefined);\n      jest.spyOn(mockFs, 'readFile').mockImplementation(() => \n        Promise.resolve('export const valid = true;')\n      );\n\n      await expect(coreProtection.enforceProtection()).resolves.not.toThrow();\n    });\n\n    it('should throw for critical violations', async () => {\n      const mockFs = require('fs').promises;\n      jest.spyOn(mockFs, 'access').mockRejectedValue(new Error('ENOENT'));\n\n      await expect(coreProtection.enforceProtection()).rejects.toThrow('CRITICAL CORE PROTECTION VIOLATION');\n    });\n\n    it('should not throw for non-critical violations', async () => {\n      const mockFs = require('fs').promises;\n      jest.spyOn(mockFs, 'access').mockResolvedValue(undefined);\n      jest.spyOn(mockFs, 'readFile').mockImplementation((path: string) => {\n        if (path.includes('agent.ts')) {\n          return Promise.resolve('export interface Agent { id: string; }');\n        }\n        if (path.includes('schema.prisma')) {\n          return Promise.resolve('generator client { provider = \"prisma-client-js\" }');\n        }\n        // Simulate a warning-level issue\n        return Promise.resolve('export const test = true;');\n      });\n\n      await expect(coreProtection.enforceProtection()).resolves.not.toThrow();\n    });\n  });\n\n  describe('generateProtectionReport', () => {\n    it('should generate a comprehensive protection report', () => {\n      const report = coreProtection.generateProtectionReport();\n      \n      expect(report).toContain('# Core Protection Configuration');\n      expect(report).toContain('Protected Paths');\n      expect(report).toContain('Learning Layer Paths');\n      expect(report).toContain('Protection Mechanisms');\n      expect(report).toContain('Violation Response Protocol');\n      \n      // Should include configured paths\n      expect(report).toContain('src/types/agent.ts');\n      expect(report).toContain('docs/patches/**');\n    });\n  });\n\n  afterEach(() => {\n    jest.restoreAllMocks();\n  });\n});\n"],"names":["describe","coreProtection","mockConfig","beforeEach","enableFileSystemSink","enableSupabaseSink","enableCoreProtection","redactPatterns","protectedPaths","learningPaths","CoreProtection","it","expect","isPristineCorePath","toBe","isLearningLayerPath","result","validateTransformation","isValid","violations","toHaveLength","allowedPaths","path","severity","toContain","length","toBeGreaterThan","criticalViolations","filter","v","mockFs","require","promises","jest","spyOn","mockResolvedValue","undefined","mockImplementation","includes","Promise","resolve","auditCoreIntegrity","mockRejectedValue","Error","enforceProtection","resolves","not","toThrow","rejects","report","generateProtectionReport","afterEach","restoreAllMocks"],"mappings":"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"}