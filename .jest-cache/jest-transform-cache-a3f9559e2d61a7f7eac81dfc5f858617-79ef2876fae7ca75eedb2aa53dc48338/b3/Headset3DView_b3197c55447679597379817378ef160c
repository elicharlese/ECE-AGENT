ba607e0857541ac32cb7508a699db37a
"use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "Headset3DView", {
    enumerable: true,
    get: function() {
        return Headset3DView;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
function Headset3DView({ items }) {
    const containerRef = (0, _react.useRef)(null);
    const [rotation, setRotation] = (0, _react.useState)({
        x: -8,
        y: 20
    });
    const [dragging, setDragging] = (0, _react.useState)(false);
    const lastPos = (0, _react.useRef)(null);
    const rotationRef = (0, _react.useRef)(rotation);
    const rafId = (0, _react.useRef)(null);
    const pendingDelta = (0, _react.useRef)(null);
    const [radius, setRadius] = (0, _react.useState)(420);
    const visible = (0, _react.useMemo)(()=>items.slice(-24), [
        items
    ]);
    // Keep ref in sync
    (0, _react.useEffect)(()=>{
        rotationRef.current = rotation;
    }, [
        rotation
    ]);
    // Responsive radius based on container size
    (0, _react.useEffect)(()=>{
        const el = containerRef.current;
        if (!el || typeof ResizeObserver === "undefined") return;
        const ro = new ResizeObserver((entries)=>{
            const cr = entries[0]?.contentRect;
            if (!cr) return;
            const size = Math.min(cr.width, cr.height);
            // Clamp for readability; larger containers get a larger circle but bounded
            const r = Math.max(220, Math.min(520, Math.floor(size / 2.6)));
            setRadius(r);
        });
        ro.observe(el);
        return ()=>ro.disconnect();
    }, []);
    const onPointerDown = (e)=>{
        setDragging(true);
        lastPos.current = {
            x: e.clientX,
            y: e.clientY
        };
        e.target?.setPointerCapture?.(e.pointerId);
    };
    const onPointerMove = (e)=>{
        if (!dragging || !lastPos.current) return;
        const dx = e.clientX - lastPos.current.x;
        const dy = e.clientY - lastPos.current.y;
        lastPos.current = {
            x: e.clientX,
            y: e.clientY
        };
        // Accumulate deltas and apply via rAF for smoother updates
        const prev = pendingDelta.current;
        pendingDelta.current = {
            dx: (prev?.dx || 0) + dx,
            dy: (prev?.dy || 0) + dy
        };
        if (rafId.current == null) {
            rafId.current = requestAnimationFrame(()=>{
                rafId.current = null;
                const delta = pendingDelta.current;
                pendingDelta.current = null;
                if (!delta) return;
                const cur = rotationRef.current;
                const nextX = Math.max(-45, Math.min(45, cur.x - delta.dy * 0.15));
                const nextY = cur.y + delta.dx * 0.2;
                setRotation({
                    x: nextX,
                    y: nextY
                });
            });
        }
    };
    const onPointerUp = (e)=>{
        setDragging(false);
        lastPos.current = null;
        e.target?.releasePointerCapture?.(e.pointerId);
    };
    const onPointerLeave = (e)=>{
        if (!dragging) return;
        onPointerUp(e);
    };
    const onKeyDown = (e)=>{
        let handled = true;
        const step = 4;
        if (e.key === "ArrowLeft") {
            setRotation((r)=>({
                    ...r,
                    y: r.y - step
                }));
        } else if (e.key === "ArrowRight") {
            setRotation((r)=>({
                    ...r,
                    y: r.y + step
                }));
        } else if (e.key === "ArrowUp") {
            setRotation((r)=>({
                    ...r,
                    x: Math.max(-45, r.x - step)
                }));
        } else if (e.key === "ArrowDown") {
            setRotation((r)=>({
                    ...r,
                    x: Math.min(45, r.x + step)
                }));
        } else {
            handled = false;
        }
        if (handled) e.preventDefault();
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
        className: "absolute inset-0 bg-gradient-to-b from-gray-900 via-gray-800 to-gray-900 text-white",
        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
            className: "absolute inset-0 perspective-[1000px] overflow-hidden",
            ref: containerRef,
            onPointerDown: onPointerDown,
            onPointerMove: onPointerMove,
            onPointerUp: onPointerUp,
            onPointerCancel: onPointerUp,
            onPointerLeave: onPointerLeave,
            onKeyDown: onKeyDown,
            "aria-label": "3D Headset Chat Space",
            role: "region",
            "aria-roledescription": "3D immersive chat space",
            "aria-describedby": "immersive-3d-instructions",
            "aria-keyshortcuts": "ArrowLeft, ArrowRight, ArrowUp, ArrowDown",
            tabIndex: 0,
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    className: "absolute left-1/2 top-1/2 origin-center will-change-transform",
                    style: {
                        transformStyle: "preserve-3d",
                        transform: `translate(-50%, -50%) rotateX(${rotation.x}deg) rotateY(${rotation.y}deg)`
                    },
                    children: visible.map((item, idx)=>{
                        const angle = idx / visible.length * Math.PI * 2;
                        const x = Math.sin(angle) * radius;
                        const z = Math.cos(angle) * radius;
                        const rotY = angle * 180 / Math.PI;
                        return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                            className: "absolute w-64 h-40 p-3 rounded-lg shadow-lg border border-white/10",
                            style: {
                                transformStyle: "preserve-3d",
                                transform: `translate3d(${x}px, ${Math.sin(angle * 2) * 30}px, ${z}px) rotateY(${rotY}deg)`,
                                background: item.isOwn ? "linear-gradient(135deg, #1f2937, #374151)" : "linear-gradient(135deg, #111827, #1f2937)"
                            },
                            title: item.content.slice(0, 60),
                            "aria-label": `Message card ${idx + 1}`,
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                    className: "text-[10px] opacity-70",
                                    children: item.timestamp.toLocaleString()
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                    className: "text-xs mt-1 line-clamp-5 break-words",
                                    children: item.content
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                    className: "absolute inset-0 pointer-events-none border border-white/5 rounded-lg",
                                    style: {
                                        transform: "translateZ(1px)"
                                    }
                                })
                            ]
                        }, item.id);
                    })
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    id: "immersive-3d-instructions",
                    className: "absolute left-1/2 -translate-x-1/2 bottom-4 text-[11px] text-gray-300/90",
                    children: "Drag (mouse) or use arrow keys to rotate. Press the Headset button again to exit."
                })
            ]
        })
    });
}

//# sourceMappingURL=data:application/json;base64,