{"version":3,"sources":["/Users/elicharlese/CascadeProjects/AGENT/libs/observability/TransformationRecorder.ts"],"sourcesContent":["import { z } from 'zod';\nimport { promises as fs } from 'fs';\nimport { join, dirname } from 'path';\nimport { execSync } from 'child_process';\nimport {\n  Transformation,\n  ConsequenceRecord,\n  ObservationEvent,\n  GuardrailResult,\n  Artifact,\n  ToolCall,\n  CoreProtectionResult,\n  RecorderConfig,\n  TransformationSchema,\n  ConsequenceRecordSchema,\n  RecorderConfigSchema,\n} from '../../src/types/agent-observability';\nimport { CoreProtection } from './CoreProtection';\n\nexport interface TransformationSink {\n  write(record: ConsequenceRecord): Promise<void>;\n}\n\nexport class FileSystemSink implements TransformationSink {\n  constructor(private basePath: string) {}\n\n  async write(record: ConsequenceRecord): Promise<void> {\n    const patchDir = join(this.basePath, 'docs', 'patches', `patch-${record.transformation.patchId}`);\n    \n    // Ensure directory exists\n    await fs.mkdir(patchDir, { recursive: true });\n    \n    // Write JSONL ledger entry\n    const ledgerPath = join(patchDir, 'ledger.jsonl');\n    const ledgerEntry = JSON.stringify(record) + '\\n';\n    await fs.appendFile(ledgerPath, ledgerEntry, 'utf8');\n    \n    // Write human-readable consequences\n    const consequencesPath = join(patchDir, 'CONSEQUENCES.md');\n    const markdown = this.generateConsequencesMarkdown(record);\n    await fs.writeFile(consequencesPath, markdown, 'utf8');\n  }\n\n  private generateConsequencesMarkdown(record: ConsequenceRecord): string {\n    const { transformation, guardrails, summary, decision, coreIntegrityVerified } = record;\n    \n    const passedGuardrails = guardrails.filter(g => g.status === 'pass');\n    const failedGuardrails = guardrails.filter(g => g.status === 'fail');\n    const warningGuardrails = guardrails.filter(g => g.status === 'warn');\n    \n    return `# Transformation Consequences - Patch ${transformation.patchId}\n\n**Transformation ID**: \\`${transformation.id}\\`  \n**Branch**: \\`${transformation.branch}\\`  \n**Timestamp**: ${transformation.timestamp}  \n**Core Integrity**: ${coreIntegrityVerified ? '✅ VERIFIED' : '❌ COMPROMISED'}  \n**Decision**: **${decision.toUpperCase()}**\n\n## Summary\n\n${summary}\n\n## Files Modified\n\n${transformation.filesTouched.map(f => `- \\`${f}\\``).join('\\n')}\n\n## Git Statistics\n\n- **Additions**: ${transformation.gitStats.additions}\n- **Deletions**: ${transformation.gitStats.deletions}\n- **Changed Files**: ${transformation.gitStats.changedFiles}\n- **SHA**: \\`${transformation.gitStats.sha}\\`\n\n## Core Protection Status\n\n**Status**: \\`${transformation.coreProtectionStatus}\\`\n\n${transformation.coreProtectionStatus === 'violation_detected' ? \n  '⚠️ **WARNING**: Pristine core violation detected but blocked by protection mechanisms.' : \n  transformation.coreProtectionStatus === 'violation_blocked' ?\n  '🛑 **CRITICAL**: Attempted pristine core modification was blocked.' :\n  '✅ No pristine core violations detected.'\n}\n\n## Guardrail Results\n\n### ✅ Passed (${passedGuardrails.length})\n${passedGuardrails.map(g => `- **${g.name}**: ${Object.entries(g.metrics).map(([k,v]) => `${k}=${v}`).join(', ')}`).join('\\n')}\n\n${failedGuardrails.length > 0 ? `### ❌ Failed (${failedGuardrails.length})\n${failedGuardrails.map(g => `- **${g.name}**: ${Object.entries(g.metrics).map(([k,v]) => `${k}=${v}`).join(', ')}`).join('\\n')}` : ''}\n\n${warningGuardrails.length > 0 ? `### ⚠️ Warnings (${warningGuardrails.length})\n${warningGuardrails.map(g => `- **${g.name}**: ${Object.entries(g.metrics).map(([k,v]) => `${k}=${v}`).join(', ')}`).join('\\n')}` : ''}\n\n## Learning Insights\n\n${record.learningInsights?.length ? \n  record.learningInsights.map(insight => `- ${insight}`).join('\\n') : \n  'No adaptive learning insights recorded.'\n}\n\n---\n*Generated by TransformationRecorder v${record.version}*\n`;\n  }\n}\n\nexport class SupabaseSink implements TransformationSink {\n  constructor(private supabaseClient: any) {}\n\n  async write(record: ConsequenceRecord): Promise<void> {\n    // Transform to database schema\n    const transformationRow = {\n      id: record.transformation.id,\n      patch_id: record.transformation.patchId,\n      batch_id: record.transformation.batchId || null,\n      branch: record.transformation.branch,\n      author_id: record.transformation.authorId,\n      created_at: record.transformation.timestamp,\n      categories: record.transformation.categories,\n      files_touched: record.transformation.filesTouched,\n      git_stats: record.transformation.gitStats,\n      core_protection_status: record.transformation.coreProtectionStatus,\n      summary: record.summary,\n      decision: record.decision,\n      core_integrity_verified: record.coreIntegrityVerified,\n    };\n\n    // Insert transformation\n    const { error: transformationError } = await this.supabaseClient\n      .from('transformations')\n      .insert(transformationRow);\n\n    if (transformationError) {\n      throw new Error(`Failed to insert transformation: ${transformationError.message}`);\n    }\n\n    // Insert guardrails\n    const guardrailRows = record.guardrails.map(g => ({\n      id: `${record.transformation.id}-${g.name}`,\n      transformation_id: record.transformation.id,\n      name: g.name,\n      status: g.status,\n      created_at: g.timestamp,\n      duration: g.duration,\n      metrics: g.metrics,\n      exit_code: g.exitCode || null,\n    }));\n\n    if (guardrailRows.length > 0) {\n      const { error: guardrailError } = await this.supabaseClient\n        .from('guardrails')\n        .insert(guardrailRows);\n\n      if (guardrailError) {\n        throw new Error(`Failed to insert guardrails: ${guardrailError.message}`);\n      }\n    }\n\n    // Insert artifacts\n    const artifactRows = record.artifacts.map(a => ({\n      id: a.id,\n      transformation_id: record.transformation.id,\n      kind: a.kind,\n      path: a.path,\n      hash: a.hash || null,\n      size: a.size || null,\n      metadata: a.metadata || null,\n      created_at: new Date().toISOString(),\n    }));\n\n    if (artifactRows.length > 0) {\n      const { error: artifactError } = await this.supabaseClient\n        .from('artifacts')\n        .insert(artifactRows);\n\n      if (artifactError) {\n        throw new Error(`Failed to insert artifacts: ${artifactError.message}`);\n      }\n    }\n  }\n}\n\nexport class TransformationRecorder {\n  private transformation: Transformation | null = null;\n  private events: ObservationEvent[] = [];\n  private guardrails: GuardrailResult[] = [];\n  private artifacts: Artifact[] = [];\n  private toolCalls: ToolCall[] = [];\n  private sinks: TransformationSink[] = [];\n  private coreProtection: CoreProtection;\n\n  constructor(private config: RecorderConfig) {\n    this.config = RecorderConfigSchema.parse(config);\n    this.coreProtection = new CoreProtection(config);\n    \n    // Initialize sinks\n    if (config.enableFileSystemSink) {\n      this.sinks.push(new FileSystemSink(process.cwd()));\n    }\n    \n    if (config.enableSupabaseSink && process.env.SUPABASE_CLIENT) {\n      // Note: Supabase client would be injected in real implementation\n      // this.sinks.push(new SupabaseSink(supabaseClient));\n    }\n  }\n\n  async start(context: {\n    patchId: number;\n    batchId?: number;\n    branch: string;\n    authorId: string;\n    filesTouched: string[];\n  }): Promise<string> {\n    // Validate core protection BEFORE starting\n    const coreProtectionResult = await this.coreProtection.validateTransformation(context.filesTouched);\n    \n    if (!coreProtectionResult.isValid && coreProtectionResult.violations.some(v => v.severity === 'critical')) {\n      throw new Error(`CRITICAL: Pristine core violation detected. Cannot proceed with transformation.`);\n    }\n\n    // Get git information\n    const gitStats = this.getGitStats();\n    const transformationId = `patch-${context.patchId}@${gitStats.sha.substring(0, 7)}`;\n\n    this.transformation = TransformationSchema.parse({\n      id: transformationId,\n      patchId: context.patchId,\n      batchId: context.batchId,\n      branch: context.branch,\n      authorId: context.authorId,\n      timestamp: new Date().toISOString(),\n      categories: this.categorizeFiles(context.filesTouched),\n      filesTouched: context.filesTouched,\n      gitStats,\n      coreProtectionStatus: coreProtectionResult.isValid ? 'safe' : 'violation_detected',\n    });\n\n    // Record start event\n    await this.attachEvent({\n      name: 'transformation_started',\n      timestamp: new Date().toISOString(),\n      severity: 'info',\n      payload: { transformationId, filesTouched: context.filesTouched },\n      category: 'system',\n    });\n\n    return transformationId;\n  }\n\n  async attachEvent(event: ObservationEvent): Promise<void> {\n    this.events.push(event);\n  }\n\n  async attachArtifact(artifact: Artifact): Promise<void> {\n    this.artifacts.push(artifact);\n  }\n\n  async attachToolCall(toolCall: ToolCall): Promise<void> {\n    // Validate tool call against core protection if enabled\n    if (this.config.enableCoreProtection && toolCall.name === 'Edit') {\n      const filePath = toolCall.parameters.file_path as string;\n      if (filePath && this.coreProtection.isPristineCorePath(filePath)) {\n        toolCall.coreProtectionCheck = true;\n        await this.attachEvent({\n          name: 'core_protection_violation',\n          timestamp: new Date().toISOString(),\n          severity: 'critical',\n          payload: { toolCall: toolCall.name, filePath },\n          category: 'core_protection',\n        });\n      }\n    }\n    \n    this.toolCalls.push(toolCall);\n  }\n\n  async finalize(summary: string, decision: 'proceed' | 'fix_required' | 'rollback' | 'manual_review'): Promise<ConsequenceRecord> {\n    if (!this.transformation) {\n      throw new Error('Cannot finalize: transformation not started');\n    }\n\n    // Run all guardrails\n    await this.runGuardrails();\n\n    // Final core integrity check\n    const finalCoreCheck = await this.coreProtection.auditCoreIntegrity();\n    const coreIntegrityVerified = finalCoreCheck.isValid;\n\n    // Generate learning insights\n    const learningInsights = this.generateLearningInsights();\n\n    const record: ConsequenceRecord = ConsequenceRecordSchema.parse({\n      transformation: this.transformation,\n      events: this.events,\n      guardrails: this.guardrails,\n      artifacts: this.artifacts,\n      toolCalls: this.toolCalls,\n      summary,\n      decision,\n      coreIntegrityVerified,\n      learningInsights,\n      redactions: this.config.redactPatterns,\n      version: '1.0',\n    });\n\n    // Write to all sinks\n    for (const sink of this.sinks) {\n      await sink.write(record);\n    }\n\n    // Record completion event\n    await this.attachEvent({\n      name: 'transformation_completed',\n      timestamp: new Date().toISOString(),\n      severity: 'info',\n      payload: { decision, coreIntegrityVerified },\n      category: 'system',\n    });\n\n    return record;\n  }\n\n  private async runGuardrails(): Promise<void> {\n    const guardrailRunners = [\n      () => this.runTypecheck(),\n      () => this.runLint(),\n      () => this.runTests(),\n      () => this.runBuild(),\n      () => this.runCoreProtection(),\n    ];\n\n    for (const runner of guardrailRunners) {\n      try {\n        const result = await runner();\n        this.guardrails.push(result);\n      } catch (error) {\n        // Continue with other guardrails even if one fails\n        console.warn(`Guardrail failed: ${error}`);\n      }\n    }\n  }\n\n  private async runTypecheck(): Promise<GuardrailResult> {\n    const start = Date.now();\n    try {\n      const output = execSync('pnpm typecheck', { encoding: 'utf8', timeout: 30000 });\n      return {\n        name: 'typecheck',\n        status: 'pass',\n        timestamp: new Date().toISOString(),\n        duration: Date.now() - start,\n        metrics: { errors: 0 },\n        artifacts: [],\n        exitCode: 0,\n        stdout: output,\n      };\n    } catch (error: any) {\n      return {\n        name: 'typecheck',\n        status: 'fail',\n        timestamp: new Date().toISOString(),\n        duration: Date.now() - start,\n        metrics: { errors: 1 },\n        artifacts: [],\n        exitCode: error.status || 1,\n        stderr: error.message,\n      };\n    }\n  }\n\n  private async runLint(): Promise<GuardrailResult> {\n    const start = Date.now();\n    try {\n      const output = execSync('pnpm lint', { encoding: 'utf8', timeout: 30000 });\n      return {\n        name: 'lint',\n        status: 'pass',\n        timestamp: new Date().toISOString(),\n        duration: Date.now() - start,\n        metrics: { errors: 0, warnings: 0 },\n        artifacts: [],\n        exitCode: 0,\n        stdout: output,\n      };\n    } catch (error: any) {\n      return {\n        name: 'lint',\n        status: 'fail',\n        timestamp: new Date().toISOString(),\n        duration: Date.now() - start,\n        metrics: { errors: 1 },\n        artifacts: [],\n        exitCode: error.status || 1,\n        stderr: error.message,\n      };\n    }\n  }\n\n  private async runTests(): Promise<GuardrailResult> {\n    const start = Date.now();\n    try {\n      const output = execSync('pnpm test --coverage --passWithNoTests', { encoding: 'utf8', timeout: 60000 });\n      // Parse coverage from output (simplified)\n      const coverageMatch = output.match(/All files[^|]*\\|[^|]*\\|[^|]*\\|[^|]*\\|[^|]*(\\d+\\.?\\d*)/);\n      const coverage = coverageMatch ? parseFloat(coverageMatch[1]) : 0;\n      \n      return {\n        name: 'test',\n        status: coverage >= 90 ? 'pass' : 'warn',\n        timestamp: new Date().toISOString(),\n        duration: Date.now() - start,\n        metrics: { coverage, passed: 1, failed: 0 },\n        artifacts: ['coverage/lcov-report/index.html'],\n        exitCode: 0,\n        stdout: output,\n      };\n    } catch (error: any) {\n      return {\n        name: 'test',\n        status: 'fail',\n        timestamp: new Date().toISOString(),\n        duration: Date.now() - start,\n        metrics: { coverage: 0, passed: 0, failed: 1 },\n        artifacts: [],\n        exitCode: error.status || 1,\n        stderr: error.message,\n      };\n    }\n  }\n\n  private async runBuild(): Promise<GuardrailResult> {\n    const start = Date.now();\n    try {\n      const output = execSync('pnpm build', { encoding: 'utf8', timeout: 120000 });\n      return {\n        name: 'build',\n        status: 'pass',\n        timestamp: new Date().toISOString(),\n        duration: Date.now() - start,\n        metrics: { success: true },\n        artifacts: ['.next/build-manifest.json'],\n        exitCode: 0,\n        stdout: output,\n      };\n    } catch (error: any) {\n      return {\n        name: 'build',\n        status: 'fail',\n        timestamp: new Date().toISOString(),\n        duration: Date.now() - start,\n        metrics: { success: false },\n        artifacts: [],\n        exitCode: error.status || 1,\n        stderr: error.message,\n      };\n    }\n  }\n\n  private async runCoreProtection(): Promise<GuardrailResult> {\n    const start = Date.now();\n    const result = await this.coreProtection.auditCoreIntegrity();\n    \n    return {\n      name: 'core_protection',\n      status: result.isValid ? 'pass' : 'fail',\n      timestamp: new Date().toISOString(),\n      duration: Date.now() - start,\n      metrics: { \n        violations: result.violations.length,\n        protectedPaths: result.protectedPaths.length,\n        allowedPaths: result.allowedPaths.length,\n      },\n      artifacts: [],\n    };\n  }\n\n  private getGitStats() {\n    try {\n      const sha = execSync('git rev-parse HEAD', { encoding: 'utf8' }).trim();\n      const stats = execSync('git diff --stat HEAD~1', { encoding: 'utf8' });\n      \n      // Parse git diff stats (simplified)\n      const lines = stats.split('\\n');\n      const summaryLine = lines[lines.length - 2] || '';\n      const match = summaryLine.match(/(\\d+) files? changed(?:, (\\d+) insertions?)?(?:, (\\d+) deletions?)?/);\n      \n      return {\n        sha,\n        additions: match ? parseInt(match[2] || '0') : 0,\n        deletions: match ? parseInt(match[3] || '0') : 0,\n        changedFiles: match ? parseInt(match[1]) : 0,\n      };\n    } catch {\n      return {\n        sha: 'unknown',\n        additions: 0,\n        deletions: 0,\n        changedFiles: 0,\n      };\n    }\n  }\n\n  private categorizeFiles(files: string[]): Array<'code' | 'config' | 'database' | 'infrastructure' | 'docs'> {\n    const categories = new Set<'code' | 'config' | 'database' | 'infrastructure' | 'docs'>();\n    \n    for (const file of files) {\n      if (file.match(/\\.(ts|tsx|js|jsx)$/)) categories.add('code');\n      if (file.match(/\\.(json|yaml|yml|env|config)$/)) categories.add('config');\n      if (file.match(/prisma|migrations|\\.sql$/)) categories.add('database');\n      if (file.match(/\\.github|docker|vercel|\\.config\\./)) categories.add('infrastructure');\n      if (file.match(/\\.md$|docs\\//)) categories.add('docs');\n    }\n    \n    return Array.from(categories);\n  }\n\n  private generateLearningInsights(): string[] {\n    const insights: string[] = [];\n    \n    // Analyze guardrail patterns\n    const failedGuardrails = this.guardrails.filter(g => g.status === 'fail');\n    if (failedGuardrails.length > 0) {\n      insights.push(`Failed guardrails: ${failedGuardrails.map(g => g.name).join(', ')}`);\n    }\n    \n    // Analyze file patterns\n    if (this.transformation) {\n      const fileTypes = this.transformation.filesTouched.map(f => f.split('.').pop()).filter(Boolean);\n      const uniqueTypes = [...new Set(fileTypes)];\n      insights.push(`File types modified: ${uniqueTypes.join(', ')}`);\n    }\n    \n    // Analyze tool usage\n    const toolNames = [...new Set(this.toolCalls.map(t => t.name))];\n    if (toolNames.length > 0) {\n      insights.push(`Tools used: ${toolNames.join(', ')}`);\n    }\n    \n    return insights;\n  }\n}\n"],"names":["FileSystemSink","SupabaseSink","TransformationRecorder","constructor","basePath","write","record","patchDir","join","transformation","patchId","fs","mkdir","recursive","ledgerPath","ledgerEntry","JSON","stringify","appendFile","consequencesPath","markdown","generateConsequencesMarkdown","writeFile","guardrails","summary","decision","coreIntegrityVerified","passedGuardrails","filter","g","status","failedGuardrails","warningGuardrails","id","branch","timestamp","toUpperCase","filesTouched","map","f","gitStats","additions","deletions","changedFiles","sha","coreProtectionStatus","length","name","Object","entries","metrics","k","v","learningInsights","insight","version","supabaseClient","transformationRow","patch_id","batch_id","batchId","author_id","authorId","created_at","categories","files_touched","git_stats","core_protection_status","core_integrity_verified","error","transformationError","from","insert","Error","message","guardrailRows","transformation_id","duration","exit_code","exitCode","guardrailError","artifactRows","artifacts","a","kind","path","hash","size","metadata","Date","toISOString","artifactError","config","events","toolCalls","sinks","RecorderConfigSchema","parse","coreProtection","CoreProtection","enableFileSystemSink","push","process","cwd","enableSupabaseSink","env","SUPABASE_CLIENT","start","context","coreProtectionResult","validateTransformation","isValid","violations","some","severity","getGitStats","transformationId","substring","TransformationSchema","categorizeFiles","attachEvent","payload","category","event","attachArtifact","artifact","attachToolCall","toolCall","enableCoreProtection","filePath","parameters","file_path","isPristineCorePath","coreProtectionCheck","finalize","runGuardrails","finalCoreCheck","auditCoreIntegrity","generateLearningInsights","ConsequenceRecordSchema","redactions","redactPatterns","sink","guardrailRunners","runTypecheck","runLint","runTests","runBuild","runCoreProtection","runner","result","console","warn","now","output","execSync","encoding","timeout","errors","stdout","stderr","warnings","coverageMatch","match","coverage","parseFloat","passed","failed","success","protectedPaths","allowedPaths","trim","stats","lines","split","summaryLine","parseInt","files","Set","file","add","Array","insights","fileTypes","pop","Boolean","uniqueTypes","toolNames","t"],"mappings":"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"}