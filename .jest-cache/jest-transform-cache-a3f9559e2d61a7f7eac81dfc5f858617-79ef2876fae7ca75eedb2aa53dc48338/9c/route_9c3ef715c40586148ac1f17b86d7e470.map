{"version":3,"sources":["/Users/elicharlese/CascadeProjects/AGENT/app/api/agents/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\n\n// Mock AGENT system for deployment - will be replaced with actual implementation\nclass MockLLMWrapper {\n  async generate_response(prompt: string, agent_mode: string, context: any) {\n    // Simulate processing time\n    await new Promise(resolve => setTimeout(resolve, 500 + Math.random() * 1000))\n    \n    const responses = {\n      smart_assistant: `Hello! I'm your Smart Assistant. I understand you said: \"${prompt}\". How can I help you today?`,\n      code_companion: `I see you're working on code. Let me analyze: \"${prompt}\". I can help you with debugging, refactoring, or implementation.`,\n      creative_writer: `Your creative request: \"${prompt}\". I can help you brainstorm ideas, structure your content, or refine your writing.`,\n      legal_assistant: `Legal inquiry detected: \"${prompt}\". I can help analyze contracts, provide compliance guidance, or research legal topics.`,\n      designer_agent: `Design request: \"${prompt}\". I can help with visual concepts, user experience design, or creative problem-solving.`\n    }\n    \n    return {\n      content: responses[agent_mode as keyof typeof responses] || responses.smart_assistant,\n      confidence: 0.85,\n      reasoning_trace: [\n        { step: 1, reasoning: \"Analyzed user input and context\", timestamp: new Date().toISOString() },\n        { step: 2, reasoning: `Selected ${agent_mode} mode for response`, timestamp: new Date().toISOString() },\n        { step: 3, reasoning: \"Generated contextual response\", timestamp: new Date().toISOString() }\n      ]\n    }\n  }\n}\n\nclass MockAgentModes {\n  get_available_modes() {\n    return {\n      smart_assistant: { name: \"Smart Assistant\", description: \"General AI assistance\" },\n      code_companion: { name: \"Code Companion\", description: \"Programming and development help\" },\n      creative_writer: { name: \"Creative Writer\", description: \"Writing and content creation\" },\n      legal_assistant: { name: \"Legal Assistant\", description: \"Legal analysis and compliance\" },\n      designer_agent: { name: \"Designer Agent\", description: \"Visual design and UX\" }\n    }\n  }\n}\n\nclass MockDataCollector {\n  interactions: any[] = []\n  \n  log_interaction(conversation_id: string, user_input: string, agent_response: string, agent_mode: string, processing_time: number) {\n    const interaction = {\n      id: `interaction_${Date.now()}`,\n      conversation_id,\n      user_input,\n      agent_response,\n      agent_mode,\n      processing_time,\n      timestamp: new Date().toISOString()\n    }\n    this.interactions.push(interaction)\n    return interaction.id\n  }\n  \n  get_analytics() {\n    return {\n      total_interactions: this.interactions.length,\n      average_processing_time: this.interactions.reduce((sum, i) => sum + i.processing_time, 0) / this.interactions.length || 0,\n      mode_usage: this.interactions.reduce((acc, i) => {\n        acc[i.agent_mode] = (acc[i.agent_mode] || 0) + 1\n        return acc\n      }, {} as Record<string, number>)\n    }\n  }\n}\n\n// Global instances\nlet llmWrapper = new MockLLMWrapper()\nlet agentModes = new MockAgentModes()\nlet dataCollector = new MockDataCollector()\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json()\n    const {\n      message,\n      conversationId,\n      userId,\n      agentMode = 'smart_assistant',\n      context = {},\n      enableReasoning = true,\n      collectFeedback = true\n    } = body\n\n    if (!message || !conversationId) {\n      return NextResponse.json(\n        { error: 'Missing required fields: message and conversationId' },\n        { status: 400 }\n      )\n    }\n\n    // Start timing for performance tracking\n    const startTime = Date.now()\n\n    let response: any = {}\n    let reasoningTrace: any[] = []\n    let processingTime = 0\n\n    // Use mock LLM for response generation\n    if (llmWrapper) {\n      const llmResponse = await llmWrapper.generate_response(message, agentMode, context)\n\n      response = {\n        content: llmResponse.content,\n        agentMode: agentMode,\n        confidence: llmResponse.confidence,\n        reasoningTrace: llmResponse.reasoning_trace,\n        examplesRetrieved: Math.floor(Math.random() * 5),\n        toolsUsed: [],\n        suggestions: []\n      }\n\n      reasoningTrace = llmResponse.reasoning_trace || []\n      processingTime = Date.now() - startTime\n    }\n\n    // Log interaction for learning and analytics\n    if (dataCollector && !response.error) {\n      const interactionId = dataCollector.log_interaction(\n        conversationId,\n        message,\n        response.content,\n        agentMode,\n        processingTime\n      )\n\n      response.interactionId = interactionId\n    }\n\n    // Add metadata\n    response.metadata = {\n      processingTime,\n      timestamp: new Date().toISOString(),\n      agentVersion: '1.0.0-mock',\n      modelUsed: 'mock-llm'\n    }\n\n    return NextResponse.json(response)\n\n  } catch (error) {\n    console.error('AGENT API Error:', error)\n\n    return NextResponse.json(\n      {\n        error: 'Internal server error',\n        message: process.env.NODE_ENV === 'development' ? (error as Error).message : 'Something went wrong'\n      },\n      { status: 500 }\n    )\n  }\n}\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url)\n    const action = searchParams.get('action')\n\n    switch (action) {\n      case 'analytics':\n        if (dataCollector) {\n          const analytics = dataCollector.get_analytics()\n          return NextResponse.json(analytics)\n        }\n        break\n\n      case 'modes':\n        if (agentModes) {\n          const modes = agentModes.get_available_modes()\n          return NextResponse.json({ modes })\n        }\n        break\n\n      case 'health':\n        const health = {\n          status: 'healthy',\n          timestamp: new Date().toISOString(),\n          components: {\n            llm: 'ready (mock)',\n            vectorStore: 'ready (mock)',\n            agentModes: 'ready (mock)',\n            raiseController: 'ready (mock)',\n            dataCollector: 'ready (mock)'\n          }\n        }\n        return NextResponse.json(health)\n\n      default:\n        return NextResponse.json({\n          message: 'AGENT API (Mock Implementation)',\n          endpoints: {\n            'POST /api/agents': 'Process message with AGENT LLM',\n            'GET /api/agents?action=analytics': 'Get interaction analytics',\n            'GET /api/agents?action=modes': 'Get available agent modes',\n            'GET /api/agents?action=health': 'Get system health status'\n          },\n          note: 'This is a mock implementation for deployment. Full AGENT system will be integrated soon.'\n        })\n    }\n\n    return NextResponse.json({ error: 'Invalid action' }, { status: 400 })\n\n  } catch (error) {\n    console.error('AGENT API GET Error:', error)\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    )\n  }\n}\n"],"names":["GET","POST","MockLLMWrapper","generate_response","prompt","agent_mode","context","Promise","resolve","setTimeout","Math","random","responses","smart_assistant","code_companion","creative_writer","legal_assistant","designer_agent","content","confidence","reasoning_trace","step","reasoning","timestamp","Date","toISOString","MockAgentModes","get_available_modes","name","description","MockDataCollector","log_interaction","conversation_id","user_input","agent_response","processing_time","interaction","id","now","interactions","push","get_analytics","total_interactions","length","average_processing_time","reduce","sum","i","mode_usage","acc","llmWrapper","agentModes","dataCollector","request","body","json","message","conversationId","userId","agentMode","enableReasoning","collectFeedback","NextResponse","error","status","startTime","response","reasoningTrace","processingTime","llmResponse","examplesRetrieved","floor","toolsUsed","suggestions","interactionId","metadata","agentVersion","modelUsed","console","process","env","NODE_ENV","searchParams","URL","url","action","get","analytics","modes","health","components","llm","vectorStore","raiseController","endpoints","note"],"mappings":"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"}