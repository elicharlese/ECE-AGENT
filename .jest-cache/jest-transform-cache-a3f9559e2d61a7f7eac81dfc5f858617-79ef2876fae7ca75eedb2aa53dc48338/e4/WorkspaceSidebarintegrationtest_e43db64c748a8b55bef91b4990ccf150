c285e868d5c95b27c8488a6126622d88
"use strict";
jest.mock("@/services/message-service", ()=>({
        messageService: {
            getMessages: (...args)=>getMessagesMock(...args)
        },
        subscribeToMessages: (chatId, cb)=>{
            subscribeCb = cb;
            return ()=>{
                subscribeCb = null;
            };
        }
    }));
jest.mock("@/services/profile-service", ()=>({
        getWorkspaceSettings: (...args)=>getWorkspaceSettingsMock(...args),
        setWorkspaceSettings: (...args)=>setWorkspaceSettingsMock(...args),
        profileService: {
            getProfile: (...args)=>getProfileMock(...args)
        }
    }));
jest.mock("@/services/mcp-service", ()=>({
        mcpService: {
            onMcpEvent: (handler)=>{
                onMcpHandler = handler;
            },
            offMcpEvent: (handler)=>{
                if (onMcpHandler === handler) onMcpHandler = null;
            },
            getMcpStatus: ()=>({
                    connected: true,
                    sessionId: "sid-123",
                    streaming: true,
                    lastEventAt: Date.now()
                })
        }
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _userevent = /*#__PURE__*/ _interop_require_default(require("@testing-library/user-event"));
require("@testing-library/jest-dom");
const _workspacesidebar = require("../../components/workspace/workspace-sidebar");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// --- Mocks ---
const getMessagesMock = jest.fn();
let subscribeCb = null;
const getWorkspaceSettingsMock = jest.fn();
const setWorkspaceSettingsMock = jest.fn();
const getProfileMock = jest.fn();
let onMcpHandler = null;
function renderSidebar(chatId = "chat1") {
    return (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_workspacesidebar.WorkspaceSidebar, {
        panelState: "expanded",
        onSetPanelState: ()=>{},
        chatId: chatId
    }));
}
beforeEach(()=>{
    getMessagesMock.mockReset();
    getWorkspaceSettingsMock.mockReset();
    setWorkspaceSettingsMock.mockReset();
    getProfileMock.mockReset();
    subscribeCb = null;
    onMcpHandler = null;
    // default mocks
    getWorkspaceSettingsMock.mockResolvedValue({});
    getMessagesMock.mockResolvedValue([]);
});
// --- Tests ---
test("renders initial messages mapped as workspace items", async ()=>{
    getMessagesMock.mockResolvedValueOnce([
        {
            id: "m1",
            content: "hello world",
            created_at: new Date().toISOString(),
            role: "user",
            user_id: "u1"
        }
    ]);
    getProfileMock.mockResolvedValueOnce({
        user_id: "u1",
        username: "alice",
        full_name: "Alice",
        avatar_url: null,
        cover_url: null,
        solana_address: null,
        settings: null,
        created_at: "",
        updated_at: ""
    });
    renderSidebar("chat1");
    await (0, _react1.waitFor)(()=>expect(_react1.screen.getByText(/hello world/i)).toBeInTheDocument());
});
test("appends realtime inserted messages", async ()=>{
    renderSidebar("chat1");
    await (0, _react1.waitFor)(()=>expect(subscribeCb).toBeTruthy());
    // simulate realtime insert
    await (0, _react1.act)(async ()=>{
        subscribeCb?.({
            id: "m2",
            content: "realtime event",
            role: "user",
            user_id: "u2",
            timestamp: Date.now()
        });
    });
    await (0, _react1.waitFor)(()=>expect(_react1.screen.getByText(/realtime event/i)).toBeInTheDocument());
});
test("persists settings to localStorage and profile", async ()=>{
    renderSidebar("chat1");
    // open settings tab explicitly by role
    const settingsTab = await _react1.screen.findByRole("tab", {
        name: /Settings/i
    });
    const user = _userevent.default.setup();
    await user.click(settingsTab);
    // wait for settings content to be mounted and scope queries to it
    const settingsPanel = await _react1.screen.findByText(/Workspace Settings/i);
    const settingsContainer = settingsPanel.closest("div");
    // toggle via role/name in the Settings panel
    const cb = await (0, _react1.within)(settingsContainer).findByRole("checkbox", {
        name: /Auto-save workspace items/i
    });
    _react1.fireEvent.click(cb);
    await (0, _react1.waitFor)(()=>{
        expect(setWorkspaceSettingsMock).toHaveBeenCalled();
    });
    const key = "ws_settings_chat1";
    const stored = window.localStorage.getItem(key);
    expect(stored).toBeTruthy();
    const parsed = JSON.parse(stored);
    expect(parsed).toHaveProperty("autoSaveItems");
});
test("adds MCP streaming events as tool_execution items", async ()=>{
    renderSidebar("chat1");
    await (0, _react1.waitFor)(()=>expect(onMcpHandler).toBeTruthy());
    await (0, _react1.act)(async ()=>{
        onMcpHandler?.("SSE: ping-ok");
    });
    await (0, _react1.waitFor)(()=>expect(_react1.screen.getByText(/SSE: ping-ok/i)).toBeInTheDocument());
});

//# sourceMappingURL=data:application/json;base64,