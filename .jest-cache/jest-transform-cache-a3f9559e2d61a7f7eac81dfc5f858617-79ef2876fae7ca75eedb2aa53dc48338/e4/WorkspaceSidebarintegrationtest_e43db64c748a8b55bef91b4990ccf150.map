{"version":3,"sources":["/Users/elicharlese/CascadeProjects/AGENT/__tests__/components/WorkspaceSidebar.integration.test.tsx"],"sourcesContent":["import React from 'react'\nimport { render, screen, waitFor, fireEvent, act, within } from '@testing-library/react'\nimport userEvent from '@testing-library/user-event'\nimport '@testing-library/jest-dom'\nimport { WorkspaceSidebar } from '@/components/workspace/workspace-sidebar'\n\n// --- Mocks ---\nconst getMessagesMock = jest.fn()\nlet subscribeCb: ((msg: any) => void) | null = null\n\njest.mock('@/services/message-service', () => ({\n  messageService: {\n    getMessages: (...args: any[]) => getMessagesMock(...args),\n  },\n  subscribeToMessages: (chatId: string, cb: (msg: any) => void) => {\n    subscribeCb = cb\n    return () => {\n      subscribeCb = null\n    }\n  },\n}))\n\nconst getWorkspaceSettingsMock = jest.fn()\nconst setWorkspaceSettingsMock = jest.fn()\nconst getProfileMock = jest.fn()\n\njest.mock('@/services/profile-service', () => ({\n  getWorkspaceSettings: (...args: any[]) => getWorkspaceSettingsMock(...args),\n  setWorkspaceSettings: (...args: any[]) => setWorkspaceSettingsMock(...args),\n  profileService: {\n    getProfile: (...args: any[]) => getProfileMock(...args),\n  },\n}))\n\nlet onMcpHandler: ((evt: string) => void) | null = null\njest.mock('@/services/mcp-service', () => ({\n  mcpService: {\n    onMcpEvent: (handler: (evt: string) => void) => {\n      onMcpHandler = handler\n    },\n    offMcpEvent: (handler: (evt: string) => void) => {\n      if (onMcpHandler === handler) onMcpHandler = null\n    },\n    getMcpStatus: () => ({ connected: true, sessionId: 'sid-123', streaming: true, lastEventAt: Date.now() }),\n  },\n}))\n\nfunction renderSidebar(chatId: string = 'chat1') {\n  return render(\n    <WorkspaceSidebar\n      panelState=\"expanded\"\n      onSetPanelState={() => {}}\n      chatId={chatId}\n    />\n  )\n}\n\nbeforeEach(() => {\n  getMessagesMock.mockReset()\n  getWorkspaceSettingsMock.mockReset()\n  setWorkspaceSettingsMock.mockReset()\n  getProfileMock.mockReset()\n  subscribeCb = null\n  onMcpHandler = null\n  // default mocks\n  getWorkspaceSettingsMock.mockResolvedValue({})\n  getMessagesMock.mockResolvedValue([])\n})\n\n// --- Tests ---\n\ntest('renders initial messages mapped as workspace items', async () => {\n  getMessagesMock.mockResolvedValueOnce([\n    { id: 'm1', content: 'hello world', created_at: new Date().toISOString(), role: 'user', user_id: 'u1' },\n  ])\n  getProfileMock.mockResolvedValueOnce({ user_id: 'u1', username: 'alice', full_name: 'Alice', avatar_url: null, cover_url: null, solana_address: null, settings: null, created_at: '', updated_at: '' })\n\n  renderSidebar('chat1')\n\n  await waitFor(() => expect(screen.getByText(/hello world/i)).toBeInTheDocument())\n})\n\ntest('appends realtime inserted messages', async () => {\n  renderSidebar('chat1')\n  await waitFor(() => expect(subscribeCb).toBeTruthy())\n\n  // simulate realtime insert\n  await act(async () => {\n    subscribeCb?.({ id: 'm2', content: 'realtime event', role: 'user', user_id: 'u2', timestamp: Date.now() })\n  })\n\n  await waitFor(() => expect(screen.getByText(/realtime event/i)).toBeInTheDocument())\n})\n\ntest('persists settings to localStorage and profile', async () => {\n  renderSidebar('chat1')\n\n  // open settings tab explicitly by role\n  const settingsTab = await screen.findByRole('tab', { name: /Settings/i })\n  const user = userEvent.setup()\n  await user.click(settingsTab)\n  // wait for settings content to be mounted and scope queries to it\n  const settingsPanel = await screen.findByText(/Workspace Settings/i)\n  const settingsContainer = settingsPanel.closest('div') as HTMLElement\n\n  // toggle via role/name in the Settings panel\n  const cb = await within(settingsContainer).findByRole('checkbox', { name: /Auto-save workspace items/i })\n  fireEvent.click(cb)\n\n  await waitFor(() => {\n    expect(setWorkspaceSettingsMock).toHaveBeenCalled()\n  })\n\n  const key = 'ws_settings_chat1'\n  const stored = window.localStorage.getItem(key)\n  expect(stored).toBeTruthy()\n  const parsed = JSON.parse(stored as string)\n  expect(parsed).toHaveProperty('autoSaveItems')\n})\n\ntest('adds MCP streaming events as tool_execution items', async () => {\n  renderSidebar('chat1')\n  await waitFor(() => expect(onMcpHandler).toBeTruthy())\n\n  await act(async () => {\n    onMcpHandler?.('SSE: ping-ok')\n  })\n\n  await waitFor(() => expect(screen.getByText(/SSE: ping-ok/i)).toBeInTheDocument())\n})\n"],"names":["jest","mock","messageService","getMessages","args","getMessagesMock","subscribeToMessages","chatId","cb","subscribeCb","getWorkspaceSettings","getWorkspaceSettingsMock","setWorkspaceSettings","setWorkspaceSettingsMock","profileService","getProfile","getProfileMock","mcpService","onMcpEvent","handler","onMcpHandler","offMcpEvent","getMcpStatus","connected","sessionId","streaming","lastEventAt","Date","now","fn","renderSidebar","render","WorkspaceSidebar","panelState","onSetPanelState","beforeEach","mockReset","mockResolvedValue","test","mockResolvedValueOnce","id","content","created_at","toISOString","role","user_id","username","full_name","avatar_url","cover_url","solana_address","settings","updated_at","waitFor","expect","screen","getByText","toBeInTheDocument","toBeTruthy","act","timestamp","settingsTab","findByRole","name","user","userEvent","setup","click","settingsPanel","findByText","settingsContainer","closest","within","fireEvent","toHaveBeenCalled","key","stored","window","localStorage","getItem","parsed","JSON","parse","toHaveProperty"],"mappings":"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"}