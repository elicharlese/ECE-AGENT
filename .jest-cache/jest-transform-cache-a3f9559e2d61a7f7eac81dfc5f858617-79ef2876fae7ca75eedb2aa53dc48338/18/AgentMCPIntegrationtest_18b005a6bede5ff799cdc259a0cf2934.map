{"version":3,"sources":["/Users/elicharlese/CascadeProjects/AGENT/__tests__/components/AgentMCPIntegration.test.tsx"],"sourcesContent":["import React from 'react'\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react'\nimport { AgentMCPIntegration } from '@/components/agents/AgentMCPIntegration'\n\njest.mock('@/services/agent-service', () => ({\n  agentService: {\n    getAgent: jest.fn().mockResolvedValue({\n      id: 'agent-1',\n      name: 'Test Agent',\n      description: 'desc',\n      avatar: undefined,\n      capabilities: [],\n      mcpTools: ['brave-search'],\n      status: 'online',\n    }),\n  },\n}))\n\ndescribe('AgentMCPIntegration', () => {\n  it('renders MCP tools after loading', async () => {\n    const onToolExecute = jest.fn().mockResolvedValue({ ok: true })\n\n    render(<AgentMCPIntegration agentId=\"agent-1\" onToolExecute={onToolExecute} />)\n\n    // Loading state first\n    expect(screen.getByText(/Loading MCP tools/i)).toBeInTheDocument()\n\n    // Tool name appears after agent loads\n    await waitFor(() => expect(screen.getByText('brave-search')).toBeInTheDocument())\n  })\n\n  it('executes tool on Run click and renders results', async () => {\n    const result = { results: ['Search result 1'] }\n    const onToolExecute = jest.fn().mockResolvedValue(result)\n\n    render(<AgentMCPIntegration agentId=\"agent-1\" onToolExecute={onToolExecute} />)\n\n    await waitFor(() => expect(screen.getByText('brave-search')).toBeInTheDocument())\n\n    const runBtn = screen.getByRole('button', { name: 'Run' })\n    fireEvent.click(runBtn)\n\n    await waitFor(() => expect(onToolExecute).toHaveBeenCalledWith('brave-search', expect.any(Object)))\n\n    // JSON result should render\n    await waitFor(() => expect(screen.getByText(/Search result 1/)).toBeInTheDocument())\n  })\n})\n"],"names":["jest","mock","agentService","getAgent","fn","mockResolvedValue","id","name","description","avatar","undefined","capabilities","mcpTools","status","describe","it","onToolExecute","ok","render","AgentMCPIntegration","agentId","expect","screen","getByText","toBeInTheDocument","waitFor","result","results","runBtn","getByRole","fireEvent","click","toHaveBeenCalledWith","any","Object"],"mappings":";AAIAA,KAAKC,IAAI,CAAC,4BAA4B,IAAO,CAAA;QAC3CC,cAAc;YACZC,UAAUH,KAAKI,EAAE,GAAGC,iBAAiB,CAAC;gBACpCC,IAAI;gBACJC,MAAM;gBACNC,aAAa;gBACbC,QAAQC;gBACRC,cAAc,EAAE;gBAChBC,UAAU;oBAAC;iBAAe;gBAC1BC,QAAQ;YACV;QACF;IACF,CAAA;;;;;8DAhBkB;wBACiC;qCACf;;;;;;AAgBpCC,SAAS,uBAAuB;IAC9BC,GAAG,mCAAmC;QACpC,MAAMC,gBAAgBhB,KAAKI,EAAE,GAAGC,iBAAiB,CAAC;YAAEY,IAAI;QAAK;QAE7DC,IAAAA,cAAM,gBAAC,qBAACC,wCAAmB;YAACC,SAAQ;YAAUJ,eAAeA;;QAE7D,sBAAsB;QACtBK,OAAOC,cAAM,CAACC,SAAS,CAAC,uBAAuBC,iBAAiB;QAEhE,sCAAsC;QACtC,MAAMC,IAAAA,eAAO,EAAC,IAAMJ,OAAOC,cAAM,CAACC,SAAS,CAAC,iBAAiBC,iBAAiB;IAChF;IAEAT,GAAG,kDAAkD;QACnD,MAAMW,SAAS;YAAEC,SAAS;gBAAC;aAAkB;QAAC;QAC9C,MAAMX,gBAAgBhB,KAAKI,EAAE,GAAGC,iBAAiB,CAACqB;QAElDR,IAAAA,cAAM,gBAAC,qBAACC,wCAAmB;YAACC,SAAQ;YAAUJ,eAAeA;;QAE7D,MAAMS,IAAAA,eAAO,EAAC,IAAMJ,OAAOC,cAAM,CAACC,SAAS,CAAC,iBAAiBC,iBAAiB;QAE9E,MAAMI,SAASN,cAAM,CAACO,SAAS,CAAC,UAAU;YAAEtB,MAAM;QAAM;QACxDuB,iBAAS,CAACC,KAAK,CAACH;QAEhB,MAAMH,IAAAA,eAAO,EAAC,IAAMJ,OAAOL,eAAegB,oBAAoB,CAAC,gBAAgBX,OAAOY,GAAG,CAACC;QAE1F,4BAA4B;QAC5B,MAAMT,IAAAA,eAAO,EAAC,IAAMJ,OAAOC,cAAM,CAACC,SAAS,CAAC,oBAAoBC,iBAAiB;IACnF;AACF"}