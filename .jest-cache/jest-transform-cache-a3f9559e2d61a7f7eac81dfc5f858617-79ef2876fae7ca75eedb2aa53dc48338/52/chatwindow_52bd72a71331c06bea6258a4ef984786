dc71a6790148d72972176740bd70368a
"use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "ChatWindow", {
    enumerable: true,
    get: function() {
        return ChatWindow;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _messagebubble = require("./message-bubble");
const _mobilemessageinput = require("./mobile-message-input");
const _pulltorefresh = require("./pull-to-refresh");
const _dynamic = /*#__PURE__*/ _interop_require_default(require("next/dynamic"));
const _dialog = require("../ui/dialog");
const _usemobile = require("../../hooks/use-mobile");
const _usehaptics = require("../../hooks/use-haptics");
const _usewebsocket = require("../../hooks/use-websocket");
const _typingindicator = require("./typing-indicator");
const _useconversations = require("../../hooks/use-conversations");
const _enhancedchatheader = require("./enhanced-chat-header");
const _inviteusersdialog = require("./invite-users-dialog");
const _client = require("../../lib/supabase/client");
const _profileservice = require("../../services/profile-service");
const _lucidereact = require("lucide-react");
const _datefns = require("date-fns");
const _skeleton = require("../ui/skeleton");
const _messageservice = require("../../services/message-service");
const _usetoast = require("../ui/use-toast");
const _DesktopMessageInput = require("./DesktopMessageInput");
const _Headset3DView = require("./Headset3DView");
const _featureflags = require("../../lib/feature-flags");
const _analytics = require("../../lib/analytics");
const _workspacemode = require("../workspace/workspace-mode");
const _workspacetoolbar = require("../workspace/workspace-toolbar");
const _useworkspace = require("../../hooks/use-workspace");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const AppLauncher = (0, _dynamic.default)(()=>Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../apps/app-launcher"))).then((m)=>m.AppLauncher), {
    loadableGenerated: {
        webpack: ()=>[
                require.resolveWeak("../apps/app-launcher")
            ]
    },
    ssr: false,
    loading: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
            className: "text-xs text-gray-400",
            children: "Loadingâ€¦"
        })
});
const AppMessage = (0, _dynamic.default)(()=>Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../apps/app-message"))).then((m)=>m.AppMessage), {
    loadableGenerated: {
        webpack: ()=>[
                require.resolveWeak("../apps/app-message")
            ]
    },
    ssr: false
});
const CalculatorApp = (0, _dynamic.default)(()=>Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../apps/mini-apps/calculator-app"))).then((m)=>m.CalculatorApp), {
    loadableGenerated: {
        webpack: ()=>[
                require.resolveWeak("../apps/mini-apps/calculator-app")
            ]
    },
    ssr: false
});
const TicTacToeApp = (0, _dynamic.default)(()=>Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../apps/mini-apps/tic-tac-toe-app"))).then((m)=>m.TicTacToeApp), {
    loadableGenerated: {
        webpack: ()=>[
                require.resolveWeak("../apps/mini-apps/tic-tac-toe-app")
            ]
    },
    ssr: false
});
const EventPlannerApp = (0, _dynamic.default)(()=>Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../apps/mini-apps/event-planner-app"))).then((m)=>m.EventPlannerApp), {
    loadableGenerated: {
        webpack: ()=>[
                require.resolveWeak("../apps/mini-apps/event-planner-app")
            ]
    },
    ssr: false
});
const AgentIntegration = (0, _dynamic.default)(()=>Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../agents/agent-integration"))).then((m)=>m.AgentIntegration), {
    loadableGenerated: {
        webpack: ()=>[
                require.resolveWeak("../agents/agent-integration")
            ]
    },
    ssr: false
});
const PhoneCallUI = (0, _dynamic.default)(()=>Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../calls/phone-call-ui"))).then((m)=>m.PhoneCallUI), {
    loadableGenerated: {
        webpack: ()=>[
                require.resolveWeak("../calls/phone-call-ui")
            ]
    },
    ssr: false
});
const VideoCallUI = (0, _dynamic.default)(()=>Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../calls/video-call-ui"))).then((m)=>m.VideoCallUI), {
    loadableGenerated: {
        webpack: ()=>[
                require.resolveWeak("../calls/video-call-ui")
            ]
    },
    ssr: false
});
const mockMessages = [
    {
        id: "1",
        content: "Hey! How was your day?",
        timestamp: new Date(Date.now() - 1000 * 60 * 30),
        senderId: "2",
        senderName: "Sarah Wilson",
        type: "text",
        isOwn: false
    },
    {
        id: "2",
        content: "It was great! Just finished a big project at work. How about you?",
        timestamp: new Date(Date.now() - 1000 * 60 * 25),
        senderId: "1",
        senderName: "You",
        type: "text",
        isOwn: true
    },
    {
        id: "3",
        content: "\uD83D\uDCC5 Event: Team Meeting\n\uD83D\uDCCD Conference Room A\n\uD83D\uDD50 2024-01-15 at 14:00\n\uD83D\uDC65 Attendees: Sarah, John, Mike\n\uD83D\uDCDD Quarterly review and planning",
        timestamp: new Date(Date.now() - 1000 * 60 * 20),
        senderId: "2",
        senderName: "Sarah Wilson",
        type: "app",
        isOwn: false,
        appData: {
            appId: "event-planner",
            appName: "Event Planner"
        }
    },
    {
        id: "4",
        content: "\uD83C\uDFAE Tic Tac Toe: Player X wins!",
        timestamp: new Date(Date.now() - 1000 * 60 * 18),
        senderId: "1",
        senderName: "You",
        type: "app",
        isOwn: true,
        appData: {
            appId: "tic-tac-toe",
            appName: "Tic Tac Toe"
        }
    },
    {
        id: "5",
        content: "Thanks! Want to celebrate over dinner this weekend?",
        timestamp: new Date(Date.now() - 1000 * 60 * 15),
        senderId: "1",
        senderName: "You",
        type: "text",
        isOwn: true,
        isLiked: true,
        likeCount: 2
    }
];
function ChatWindow({ chatId, onToggleSidebar, sidebarCollapsed }) {
    const [messages, setMessages] = (0, _react.useState)([]);
    const [newMessage, setNewMessage] = (0, _react.useState)("");
    const [activeApp, setActiveApp] = (0, _react.useState)(null);
    const [activeAppName, setActiveAppName] = (0, _react.useState)("");
    const [showAgentIntegration, setShowAgentIntegration] = (0, _react.useState)(false);
    const [showPhoneCall, setShowPhoneCall] = (0, _react.useState)(false);
    const [showVideoCall, setShowVideoCall] = (0, _react.useState)(false);
    const [showInviteDialog, setShowInviteDialog] = (0, _react.useState)(false);
    const [participantsCount, setParticipantsCount] = (0, _react.useState)(1);
    const messagesEndRef = (0, _react.useRef)(null);
    const contentRef = (0, _react.useRef)(null);
    const [isAtBottom, setIsAtBottom] = (0, _react.useState)(true);
    const [showJump, setShowJump] = (0, _react.useState)(false);
    const [lastReadAt, setLastReadAt] = (0, _react.useState)(null);
    const [isLoading, setIsLoading] = (0, _react.useState)(true);
    const [isHeadsetView, setIsHeadsetView] = (0, _react.useState)(false);
    const [workspaceMode, setWorkspaceMode] = (0, _react.useState)("chat");
    const isMobile = (0, _usemobile.useIsMobile)();
    const { triggerHaptic } = (0, _usehaptics.useHaptics)();
    const { isConnected, messages: wsMessages, joinConversation, sendChatMessage, sendTyping, sendEditMessage, typingUsers: wsTypingUsers } = (0, _usewebsocket.useWebSocket)();
    const { conversations, inviteParticipants } = (0, _useconversations.useConversations)();
    const [workspaceState, workspaceActions] = (0, _useworkspace.useWorkspace)(chatId);
    // Restore headset view per chat from localStorage (desktop-only, feature gated)
    (0, _react.useEffect)(()=>{
        const enabled = (0, _featureflags.isFeatureEnabled)(_featureflags.FEATURES.IMMERSIVE_CHAT);
        if (!enabled || isMobile) {
            setIsHeadsetView(false);
            return;
        }
        try {
            const raw = localStorage.getItem(`chat_immersive_3d_${chatId}`);
            setIsHeadsetView(raw === "1");
        } catch  {}
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [
        chatId,
        isMobile
    ]);
    const handleToggleHeadsetView = (0, _react.useCallback)(()=>{
        const enabled = (0, _featureflags.isFeatureEnabled)(_featureflags.FEATURES.IMMERSIVE_CHAT);
        if (!enabled || isMobile) return;
        setIsHeadsetView((prev)=>{
            const next = !prev;
            try {
                localStorage.setItem(`chat_immersive_3d_${chatId}`, next ? "1" : "0");
            } catch  {}
            (0, _analytics.trackEvent)({
                name: "immersive_chat_toggle",
                properties: {
                    chatId,
                    enabled: next
                }
            });
            return next;
        });
    }, [
        chatId,
        isMobile
    ]);
    const shouldShowHeadset3D = (0, _react.useMemo)(()=>isHeadsetView && !isMobile && (0, _featureflags.isFeatureEnabled)(_featureflags.FEATURES.IMMERSIVE_CHAT), [
        isHeadsetView,
        isMobile
    ]);
    const scrollToBottom = (0, _react.useCallback)(()=>{
        messagesEndRef.current?.scrollIntoView({
            behavior: "smooth"
        });
        setIsAtBottom(true);
        // Mark as read when user jumps to latest
        const lastTs = messages[messages.length - 1]?.timestamp;
        if (lastTs) {
            setLastReadAt(lastTs);
            try {
                localStorage.setItem(`chat_last_read_${chatId}`, String(lastTs.getTime()));
            } catch  {}
        }
    }, [
        messages,
        chatId
    ]);
    // Persist and restore last read timestamp per chat
    (0, _react.useEffect)(()=>{
        try {
            const raw = localStorage.getItem(`chat_last_read_${chatId}`);
            if (raw) {
                const d = new Date(Number(raw));
                if (!Number.isNaN(d.valueOf())) setLastReadAt(d);
            } else if (messages.length) {
                // Default to latest message to avoid showing old messages as new on first open
                const lastTs = messages[messages.length - 1].timestamp;
                setLastReadAt(lastTs);
                localStorage.setItem(`chat_last_read_${chatId}`, String(lastTs.getTime()));
            }
        } catch  {}
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [
        chatId
    ]);
    // Auto-scroll when new messages arrive only if user is near bottom or message is own
    (0, _react.useEffect)(()=>{
        if (messages.length === 0) return;
        const latest = messages[messages.length - 1];
        if (isAtBottom || latest.isOwn) {
            scrollToBottom();
        } else {
            setShowJump(true);
        }
    }, [
        messages,
        isAtBottom,
        scrollToBottom
    ]);
    (0, _react.useEffect)(()=>{
        // Join the conversation when the component mounts
        if (isConnected) {
            joinConversation(chatId);
        }
    }, [
        isConnected,
        chatId
    ]);
    // Load initial messages from backend (Supabase)
    (0, _react.useEffect)(()=>{
        let cancelled = false;
        const run = async ()=>{
            setIsLoading(true);
            try {
                const { data: auth } = await _client.supabase.auth.getUser();
                const me = auth?.user?.id ?? null;
                const msgs = await _messageservice.messageService.getMessages(chatId);
                const mapped = msgs.map((m)=>({
                        id: m.id,
                        content: m.content,
                        timestamp: new Date(m.created_at),
                        senderId: m.user_id,
                        senderName: m.role === "assistant" ? "AI Assistant" : m.user_id === me ? "You" : "Other",
                        type: m.type || "text",
                        isOwn: m.user_id === me
                    }));
                if (!cancelled) setMessages(mapped);
            } catch (e) {
                console.warn("Failed to load messages", e);
            } finally{
                if (!cancelled) setIsLoading(false);
            }
        };
        run();
        return ()=>{
            cancelled = true;
        };
    }, [
        chatId
    ]);
    // Fetch participant count to determine chat type (direct vs group)
    (0, _react.useEffect)(()=>{
        let cancelled = false;
        const run = async ()=>{
            try {
                const { count } = await _client.supabase.from("conversation_participants").select("user_id", {
                    count: "exact",
                    head: true
                }).eq("conversation_id", chatId);
                if (!cancelled) setParticipantsCount(typeof count === "number" ? count : 1);
            } catch (e) {
                if (!cancelled) setParticipantsCount(1);
                console.warn("Failed to load participant count", e);
            }
        };
        run();
        return ()=>{
            cancelled = true;
        };
    }, [
        chatId
    ]);
    (0, _react.useEffect)(()=>{
        // Map the latest useWebSocket message (shape: { id, text, sender, senderName?, timestamp, conversationId, type? })
        if (wsMessages.length === 0) return;
        const latest = wsMessages[wsMessages.length - 1];
        if (latest && typeof latest === "object" && "text" in latest) {
            const mapped = {
                id: latest.id || Date.now().toString(),
                content: latest.text || "",
                timestamp: latest.timestamp instanceof Date ? latest.timestamp : new Date(latest.timestamp || Date.now()),
                senderId: latest.sender === "user" ? "1" : latest.sender === "ai" ? "ai-assistant" : "other",
                senderName: latest.senderName || (latest.sender === "user" ? "You" : latest.sender === "ai" ? "AI Assistant" : "Other"),
                type: latest.type || "text",
                isOwn: latest.sender === "user",
                mediaUrl: latest.mediaUrl,
                fileName: latest.fileName,
                fileSize: latest.fileSize,
                isPinned: latest.isPinned,
                isLiked: latest.isLiked,
                likeCount: latest.likeCount,
                appData: latest.appData ? {
                    appId: latest.appData.appId,
                    appName: latest.appData.appName
                } : undefined
            };
            setMessages((prev)=>prev.some((m)=>m.id === mapped.id) ? prev : [
                    ...prev,
                    mapped
                ]);
        }
    }, [
        wsMessages
    ]);
    // React to edit events sent over WebSocket in mock/real mode
    (0, _react.useEffect)(()=>{
        if (wsMessages.length === 0) return;
        const latest = wsMessages[wsMessages.length - 1];
        if (latest && latest.type === "message_edited" && latest.id) {
            const newText = latest.text ?? latest.content;
            if (typeof newText === "string") {
                setMessages((prev)=>prev.map((m)=>m.id === latest.id ? {
                            ...m,
                            content: newText
                        } : m));
            }
        }
    }, [
        wsMessages
    ]);
    const handleSendMessage = ()=>{
        if (!newMessage.trim()) return;
        // Send message via WebSocket
        // useWebSocket expects (text, conversationId)
        sendChatMessage(newMessage, chatId);
        setNewMessage("");
        // Update last read immediately on send
        const now = new Date();
        setLastReadAt(now);
        try {
            localStorage.setItem(`chat_last_read_${chatId}`, String(now.getTime()));
        } catch  {}
    };
    const handleEmojiSelect = (emoji)=>{
        setNewMessage((prev)=>prev + emoji);
    };
    const handleFileSelect = (file, type)=>{
        const fileUrl = URL.createObjectURL(file);
        const message = {
            id: Date.now().toString(),
            content: `Shared a ${type}`,
            timestamp: new Date(),
            senderId: "1",
            senderName: "You",
            type: type,
            isOwn: true,
            mediaUrl: fileUrl,
            fileName: file.name,
            fileSize: `${(file.size / 1024 / 1024).toFixed(1)} MB`
        };
        setMessages((prev)=>[
                ...prev,
                message
            ]);
    };
    const handleGifSelect = (gif)=>{
        const message = {
            id: Date.now().toString(),
            content: gif.title,
            timestamp: new Date(),
            senderId: "1",
            senderName: "You",
            type: "gif",
            isOwn: true,
            mediaUrl: gif.url,
            gifData: {
                id: gif.id,
                title: gif.title,
                url: gif.url,
                preview_url: gif.preview_url,
                width: gif.width,
                height: gif.height
            }
        };
        setMessages((prev)=>[
                ...prev,
                message
            ]);
    };
    const handleRefresh = async ()=>{
        await new Promise((resolve)=>setTimeout(resolve, 1000));
        triggerHaptic("success");
        console.log("Refreshed messages");
    };
    const handleLaunchApp = (appId, appName)=>{
        setActiveApp(appId);
        setActiveAppName(appName);
    };
    const handleAppShare = (content, appId, appName)=>{
        const message = {
            id: Date.now().toString(),
            content,
            timestamp: new Date(),
            senderId: "1",
            senderName: "You",
            type: "app",
            isOwn: true,
            appData: {
                appId,
                appName
            }
        };
        setMessages((prev)=>[
                ...prev,
                message
            ]);
        setActiveApp(null);
        setActiveAppName("");
    };
    const handleOpenApp = (appId)=>{
        // Find app name from the message or use default
        const appNames = {
            calculator: "Calculator",
            "tic-tac-toe": "Tic Tac Toe",
            "event-planner": "Event Planner"
        };
        handleLaunchApp(appId, appNames[appId] || "App");
    };
    const renderActiveApp = ()=>{
        switch(activeApp){
            case "calculator":
                return /*#__PURE__*/ (0, _jsxruntime.jsx)(CalculatorApp, {
                    onShare: (result)=>handleAppShare(result, "calculator", "Calculator")
                });
            case "tic-tac-toe":
                return /*#__PURE__*/ (0, _jsxruntime.jsx)(TicTacToeApp, {
                    onShare: (result)=>handleAppShare(result, "tic-tac-toe", "Tic Tac Toe")
                });
            case "event-planner":
                return /*#__PURE__*/ (0, _jsxruntime.jsx)(EventPlannerApp, {
                    onShare: (event)=>handleAppShare(event, "event-planner", "Event Planner")
                });
            default:
                return null;
        }
    };
    // Optimistic update + persist + broadcast for inline edit
    const handleUpdateMessage = async (id, content)=>{
        let previousContent = "";
        setMessages((prev)=>{
            previousContent = prev.find((m)=>m.id === id)?.content || "";
            return prev.map((m)=>m.id === id ? {
                    ...m,
                    content
                } : m);
        });
        try {
            await _messageservice.messageService.updateMessage(id, content);
            // Broadcast edit event so other clients can sync
            sendEditMessage(id, content, chatId);
            (0, _usetoast.toast)({
                title: "Message updated",
                description: "Your edit has been saved."
            });
        } catch (e) {
            // Revert on error
            setMessages((prev)=>prev.map((m)=>m.id === id ? {
                        ...m,
                        content: previousContent
                    } : m));
            (0, _usetoast.toast)({
                title: "Failed to update message",
                description: e?.message || "Please try again.",
                variant: "destructive"
            });
        }
    };
    const handleAgentMessage = (agentId, message)=>{
        const agentMessage = {
            id: Date.now().toString(),
            content: message,
            timestamp: new Date(),
            senderId: agentId,
            senderName: `Agent ${agentId}`,
            type: "text",
            isOwn: false
        };
        setMessages((prev)=>[
                ...prev,
                agentMessage
            ]);
    };
    const handleAgentAppLaunch = (appId, agentId, context)=>{
        const appNames = {
            calculator: "Calculator",
            "tic-tac-toe": "Tic Tac Toe",
            "event-planner": "Event Planner"
        };
        // Launch app with agent context
        setActiveApp(appId);
        setActiveAppName(appNames[appId] || "App");
        // Send agent message about app launch
        handleAgentMessage(agentId, `I've launched ${appNames[appId]} for you based on our conversation.`);
    };
    const handleWorkflowTrigger = (workflowId, agentId)=>{
        console.log(`Agent ${agentId} triggered workflow ${workflowId}`);
        handleAgentMessage(agentId, `I'm running a workflow to help with your request...`);
    };
    const handlePhoneCall = ()=>{
        setShowPhoneCall(true);
        triggerHaptic("medium");
    };
    const handleVideoCall = ()=>{
        setShowVideoCall(true);
        triggerHaptic("medium");
    };
    const handlePopout = ()=>{
        try {
            const origin = typeof window !== "undefined" ? window.location.origin : "";
            const url = new URL("/messages", origin || "http://localhost");
            url.searchParams.set("c", chatId);
            url.searchParams.set("popout", "1");
            window.open(url.toString(), "_blank", "noopener,noreferrer,width=520,height=720");
        } catch (e) {
            console.error("Failed to open popout window", e);
        }
    };
    const openAppLauncherDrawer = ()=>{
        try {
            const el = document.querySelector('[aria-label="Open apps drawer"]');
            el?.click();
        } catch (e) {
        // no-op
        }
    };
    const handleInviteUsers = async (users)=>{
        // Resolve identifiers to user IDs
        const resolved = await Promise.all(users.map(async (u)=>{
            if (u.id) return u.id;
            if (u.type === "username") {
                const uname = u.identifier.startsWith("@") ? u.identifier.slice(1) : u.identifier;
                const prof = await (0, _profileservice.getProfileByUsername)(uname);
                return prof?.user_id;
            }
            if (u.type === "email") {
                const prof = await (0, _profileservice.getProfileByIdentifier)(u.identifier);
                return prof?.user_id;
            }
            // wallet: attempt lookup by solana_address
            try {
                // Debug logging to verify this branch executes in tests
                // eslint-disable-next-line no-console
                console.info("[invite] wallet lookup start", u.identifier);
                const { data, error } = await _client.supabase.from("profiles").select("user_id").eq("solana_address", u.identifier).limit(1);
                // eslint-disable-next-line no-console
                console.info("[invite] wallet lookup result", data);
                // eslint-disable-next-line no-console
                if (error) console.info("[invite] wallet lookup error", error);
                const id = Array.isArray(data) ? data[0]?.user_id ?? null : data?.user_id ?? null;
                return id;
            } catch  {
                // eslint-disable-next-line no-console
                console.error("[invite] wallet lookup error");
                return null;
            }
        }));
        const userIds = Array.from(new Set(resolved.filter((id)=>!!id)));
        if (userIds.length === 0) {
            throw new Error("No matching users found for invitations");
        }
        await inviteParticipants(chatId, userIds);
    };
    // Scroll observer to toggle Jump button
    const handleScroll = (e)=>{
        const el = e.currentTarget;
        const distanceFromBottom = el.scrollHeight - el.scrollTop - el.clientHeight;
        const atBottom = distanceFromBottom < 40;
        setIsAtBottom(atBottom);
        setShowJump(!atBottom && messages.length > 0);
        if (atBottom && messages.length > 0) {
            const lastTs = messages[messages.length - 1].timestamp;
            if (!lastReadAt || lastTs > lastReadAt) {
                setLastReadAt(lastTs);
                try {
                    localStorage.setItem(`chat_last_read_${chatId}`, String(lastTs.getTime()));
                } catch  {}
            }
        }
    };
    // Day divider helpers
    const dayLabel = (d)=>(0, _datefns.isToday)(d) ? "Today" : (0, _datefns.isYesterday)(d) ? "Yesterday" : (0, _datefns.format)(d, "EEEE, MMM d");
    const firstUnreadIndex = (0, _react.useMemo)(()=>{
        if (!lastReadAt) return -1;
        return messages.findIndex((m)=>m.timestamp > lastReadAt);
    }, [
        messages,
        lastReadAt
    ]);
    const DateDivider = ({ label })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
            className: "sticky top-0 z-10 flex items-center justify-center py-1",
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                className: "text-xs text-gray-600 dark:text-gray-300 bg-white/70 dark:bg-gray-900/70 backdrop-blur px-3 py-0.5 rounded-full border border-gray-200 dark:border-gray-700",
                children: label
            })
        });
    const UnreadDivider = ()=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
            className: "sticky top-0 z-20 flex items-center gap-2 my-2",
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    className: "flex-1 h-px bg-red-300/60"
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                    className: "text-[11px] tracking-wide uppercase text-red-600 bg-red-50 dark:bg-red-900/20 dark:text-red-300 px-2 py-0.5 rounded-full border border-red-200 dark:border-red-800",
                    children: "New"
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    className: "flex-1 h-px bg-red-300/60"
                })
            ]
        });
    // Derive chat info from conversations state using chatId
    const conversation = conversations.find((c)=>c.id === chatId);
    const isGroup = participantsCount > 2;
    const chatInfo = {
        id: chatId,
        name: conversation?.title || "New Chat",
        email: "",
        phone: undefined,
        bio: conversation?.title ? `Conversation â€¢ ${conversation.title}` : "New conversation",
        status: "online",
        customStatus: undefined,
        avatar: undefined,
        type: isGroup ? "group" : "direct",
        participants: participantsCount,
        isAgent: Boolean(conversation?.agent_id)
    };
    const pinnedForHeader = messages.filter((m)=>m.isPinned).map((m)=>({
            id: m.id,
            content: m.content,
            sender: m.senderName,
            timestamp: m.timestamp
        }));
    const headsetItems = (0, _react.useMemo)(()=>messages.map((m)=>({
                id: m.id,
                content: m.content,
                timestamp: m.timestamp,
                isOwn: m.isOwn
            })), [
        messages
    ]);
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        className: "flex flex-col h-full bg-white dark:bg-gray-900",
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_workspacetoolbar.WorkspaceToolbar, {
                mode: workspaceMode,
                layout: workspaceState.layout,
                activeTab: workspaceState.activeTab,
                activeParticipants: participantsCount,
                isConnected: isConnected,
                onModeChange: (mode)=>{
                    setWorkspaceMode(mode);
                    workspaceActions.setMode(mode);
                },
                onLayoutChange: workspaceActions.setLayout,
                onTabChange: workspaceActions.setActiveTab,
                onStartVideoCall: ()=>{
                    setShowVideoCall(true);
                    workspaceActions.startVideoCall();
                },
                onStartPhoneCall: ()=>{
                    setShowPhoneCall(true);
                    workspaceActions.startPhoneCall();
                },
                onExecuteTool: (toolType)=>workspaceActions.executeToolAction(toolType, {}),
                onGenerateMedia: (type)=>workspaceActions.generateMedia(type, `Generate ${type}`)
            }),
            workspaceMode === "workspace" ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_workspacemode.WorkspaceMode, {
                chatId: chatId,
                messages: messages,
                onSendMessage: handleSendMessage,
                onEditMessage: handleUpdateMessage,
                typingUsers: wsTypingUsers,
                isConnected: isConnected
            }) : /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_enhancedchatheader.EnhancedChatHeader, {
                        chatInfo: chatInfo,
                        pinnedMessages: pinnedForHeader,
                        onPhoneCall: handlePhoneCall,
                        onVideoCall: handleVideoCall,
                        onOpenAgentSettings: ()=>setShowAgentIntegration(true),
                        onPopout: handlePopout,
                        onOpenAppLauncher: openAppLauncherDrawer,
                        onInviteUsers: isGroup ? ()=>setShowInviteDialog(true) : undefined,
                        isMobile: isMobile,
                        onToggleHeadsetView: handleToggleHeadsetView,
                        isHeadsetView: isHeadsetView
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(AppLauncher, {
                        onLaunchApp: handleLaunchApp
                    }),
                    shouldShowHeadset3D ? /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        className: "flex-1 min-h-0 overflow-hidden relative",
                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_Headset3DView.Headset3DView, {
                            items: headsetItems
                        })
                    }) : /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: "flex-1 min-h-0 overflow-hidden relative",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_pulltorefresh.PullToRefresh, {
                                onRefresh: handleRefresh,
                                ref: contentRef,
                                onScroll: handleScroll,
                                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                    className: `h-full ${isMobile ? "px-3 py-2" : "p-3 md:p-4 lg:p-6"}`,
                                    children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                        className: "space-y-4",
                                        children: [
                                            isLoading ? /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                                className: "space-y-4 p-2",
                                                children: Array.from({
                                                    length: 6
                                                }).map((_, i)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                        className: "flex gap-2",
                                                        children: [
                                                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_skeleton.Skeleton, {
                                                                className: "h-8 w-8 rounded-full"
                                                            }),
                                                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                                className: "flex-1 space-y-2",
                                                                children: [
                                                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_skeleton.Skeleton, {
                                                                        className: "h-4 w-2/3"
                                                                    }),
                                                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_skeleton.Skeleton, {
                                                                        className: "h-4 w-1/3"
                                                                    })
                                                                ]
                                                            })
                                                        ]
                                                    }, i))
                                            }) : null,
                                            !isLoading && messages.length === 0 && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                                className: "py-12 text-center text-sm text-gray-500 dark:text-gray-400",
                                                children: "No messages yet. Say hello!"
                                            }),
                                            messages.map((message, idx)=>{
                                                const prev = messages[idx - 1];
                                                const showDay = !prev || prev.timestamp.toDateString() !== message.timestamp.toDateString();
                                                const showUnread = firstUnreadIndex === idx;
                                                return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                    children: [
                                                        showDay && /*#__PURE__*/ (0, _jsxruntime.jsx)(DateDivider, {
                                                            label: dayLabel(message.timestamp)
                                                        }),
                                                        showUnread && /*#__PURE__*/ (0, _jsxruntime.jsx)(UnreadDivider, {}),
                                                        message.type === "app" ? /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                                            className: `flex ${message.isOwn ? "justify-end" : "justify-start"}`,
                                                            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(AppMessage, {
                                                                message: {
                                                                    appId: message.appData?.appId || "",
                                                                    appName: message.appData?.appName || "",
                                                                    content: message.content,
                                                                    timestamp: message.timestamp
                                                                },
                                                                onOpenApp: handleOpenApp
                                                            })
                                                        }) : /*#__PURE__*/ (0, _jsxruntime.jsx)(_messagebubble.MessageBubble, {
                                                            message: message,
                                                            onUpdateMessage: handleUpdateMessage
                                                        })
                                                    ]
                                                }, message.id);
                                            }),
                                            Object.entries(wsTypingUsers).map(([userId, userInfo])=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_typingindicator.TypingIndicator, {
                                                    userId: userId,
                                                    userName: userInfo.name
                                                }, userId)),
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                                ref: messagesEndRef
                                            })
                                        ]
                                    })
                                })
                            }),
                            showJump && /*#__PURE__*/ (0, _jsxruntime.jsxs)("button", {
                                onClick: scrollToBottom,
                                className: "absolute bottom-24 right-4 z-30 bg-blue-600 text-white shadow-lg rounded-full px-3 py-2 flex items-center gap-2 hover:bg-blue-700 focus:outline-none",
                                "aria-label": "Jump to latest",
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.ChevronDown, {
                                        className: "h-4 w-4"
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                        className: "text-xs font-medium",
                                        children: "Jump to latest"
                                    })
                                ]
                            })
                        ]
                    })
                ]
            }),
            !shouldShowHeadset3D && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: "flex-shrink-0",
                children: isMobile ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_mobilemessageinput.MobileMessageInput, {
                    value: newMessage,
                    onChange: setNewMessage,
                    onSend: handleSendMessage,
                    onEmojiSelect: handleEmojiSelect,
                    onFileSelect: handleFileSelect,
                    onGifSelect: handleGifSelect,
                    onLaunchApp: handleLaunchApp,
                    onAgentToggle: ()=>{}
                }) : /*#__PURE__*/ (0, _jsxruntime.jsx)(_DesktopMessageInput.DesktopMessageInput, {
                    value: newMessage,
                    onChange: setNewMessage,
                    onSend: handleSendMessage,
                    onEmojiSelect: handleEmojiSelect,
                    onFileSelect: handleFileSelect,
                    onGifSelect: handleGifSelect,
                    onLaunchApp: handleLaunchApp,
                    onAgentToggle: ()=>{}
                })
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_dialog.Dialog, {
                open: !!activeApp,
                onOpenChange: ()=>setActiveApp(null),
                children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_dialog.DialogContent, {
                    className: "max-w-fit",
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_dialog.DialogHeader, {
                            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_dialog.DialogTitle, {
                                children: activeAppName
                            })
                        }),
                        renderActiveApp()
                    ]
                })
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_dialog.Dialog, {
                open: showAgentIntegration,
                onOpenChange: setShowAgentIntegration,
                children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_dialog.DialogContent, {
                    className: "max-w-6xl max-h-[90vh] overflow-hidden",
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_dialog.DialogHeader, {
                            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_dialog.DialogTitle, {
                                children: "Agent Integration"
                            })
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(AgentIntegration, {
                            chatId: chatId,
                            onAgentMessage: handleAgentMessage,
                            onAppLaunch: handleAgentAppLaunch,
                            onWorkflowTrigger: handleWorkflowTrigger
                        })
                    ]
                })
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_inviteusersdialog.InviteUsersDialog, {
                isOpen: showInviteDialog,
                onClose: ()=>setShowInviteDialog(false),
                chatId: chatId,
                chatName: chatInfo.name,
                isGroupChat: isGroup,
                onInviteUsers: handleInviteUsers
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(PhoneCallUI, {
                isOpen: showPhoneCall,
                onClose: ()=>setShowPhoneCall(false),
                contact: chatInfo,
                callType: "outgoing"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(VideoCallUI, {
                isOpen: showVideoCall,
                onClose: ()=>setShowVideoCall(false),
                contact: chatInfo,
                callType: "outgoing"
            })
        ]
    });
}

//# sourceMappingURL=data:application/json;base64,