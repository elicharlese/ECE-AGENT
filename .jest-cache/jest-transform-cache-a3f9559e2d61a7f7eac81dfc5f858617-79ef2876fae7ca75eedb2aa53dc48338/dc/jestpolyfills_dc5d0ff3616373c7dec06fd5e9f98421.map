{"version":3,"sources":["/Users/elicharlese/CascadeProjects/AGENT/jest.polyfills.ts"],"sourcesContent":["// Polyfills that must load before any test framework or modules\n\n// TextEncoder/TextDecoder for libraries (e.g., MSW interceptors) that expect them in Node/JSDOM\n// @ts-ignore\nif (typeof (global as any).TextEncoder === 'undefined') {\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  const { TextEncoder } = require('util')\n  // @ts-ignore\n  ;(global as any).TextEncoder = TextEncoder\n}\n// @ts-ignore\nif (typeof (global as any).TextDecoder === 'undefined') {\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  const { TextDecoder } = require('util')\n  // @ts-ignore\n  ;(global as any).TextDecoder = TextDecoder\n}\n\n// Ensure Supabase env vars exist for tests before any modules import the client\nif (!process.env.NEXT_PUBLIC_SUPABASE_URL) {\n  process.env.NEXT_PUBLIC_SUPABASE_URL = 'https://test.supabase.co'\n}\nif (!process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY) {\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY = 'test-anon-key'\n}\n\n// Provide Web Streams polyfills used by MSW in Node/JSDOM\ntry {\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  const webStreams = require('stream/web')\n  // @ts-ignore\n  if (typeof (global as any).TransformStream === 'undefined' && webStreams?.TransformStream) {\n    // @ts-ignore\n    ;(global as any).TransformStream = webStreams.TransformStream\n  }\n  // @ts-ignore\n  if (typeof (global as any).ReadableStream === 'undefined' && webStreams?.ReadableStream) {\n    // @ts-ignore\n    ;(global as any).ReadableStream = webStreams.ReadableStream\n  }\n  // @ts-ignore\n  if (typeof (global as any).WritableStream === 'undefined' && webStreams?.WritableStream) {\n    // @ts-ignore\n    ;(global as any).WritableStream = webStreams.WritableStream\n  }\n} catch {}\n\n// Ensure fetch API classes exist on global for modules that reference them at import time\n// Next's next/server defines classes extending global Request/Response during import\n// which can fail if not set up first in JSDOM.\n// @ts-ignore\nif (typeof globalThis.Request === 'undefined' && typeof window !== 'undefined') {\n  // @ts-ignore\n  globalThis.Request = (window as any).Request\n}\n// @ts-ignore\nif (typeof globalThis.Response === 'undefined' && typeof window !== 'undefined') {\n  // @ts-ignore\n  globalThis.Response = (window as any).Response\n}\n// @ts-ignore\nif (typeof globalThis.Headers === 'undefined' && typeof window !== 'undefined') {\n  // @ts-ignore\n  globalThis.Headers = (window as any).Headers\n}\n\n// Add static Response.json if missing (NextResponse.json relies on it)\n// @ts-ignore\nif (typeof globalThis.Response !== 'undefined' && typeof (globalThis.Response as any).json !== 'function') {\n  // @ts-ignore\n  ;(globalThis.Response as any).json = (data: any, init?: ResponseInit) => {\n    const headers = new Headers(init?.headers || {})\n    if (!headers.has('content-type')) headers.set('content-type', 'application/json')\n    return new Response(JSON.stringify(data), { ...init, headers })\n  }\n}\n\n// Polyfill ResizeObserver for Radix UI components in tests\nclass MockResizeObserver {\n  observe() {}\n  unobserve() {}\n  disconnect() {}\n}\n// @ts-ignore\nif (typeof (global as any).ResizeObserver === 'undefined') {\n  // @ts-ignore\n  ;(global as any).ResizeObserver = MockResizeObserver\n}\n\n// Basic BroadcastChannel polyfill used by MSW's ws module\n// @ts-ignore\nif (typeof (global as any).BroadcastChannel === 'undefined') {\n  class MockBroadcastChannel {\n    name: string\n    onmessage: ((this: BroadcastChannel, ev: MessageEvent) => any) | null = null\n    constructor(name: string) {\n      this.name = name\n    }\n    postMessage(_msg: any) {}\n    close() {}\n    addEventListener(_type: string, _listener: any) {}\n    removeEventListener(_type: string, _listener: any) {}\n    dispatchEvent(_event: any) { return true }\n  }\n  // @ts-ignore\n  ;(global as any).BroadcastChannel = MockBroadcastChannel as any\n}\n"],"names":["global","TextEncoder","require","TextDecoder","process","env","NEXT_PUBLIC_SUPABASE_URL","NEXT_PUBLIC_SUPABASE_ANON_KEY","webStreams","TransformStream","ReadableStream","WritableStream","globalThis","Request","window","Response","Headers","json","data","init","headers","has","set","JSON","stringify","MockResizeObserver","observe","unobserve","disconnect","ResizeObserver","BroadcastChannel","MockBroadcastChannel","constructor","name","onmessage","postMessage","_msg","close","addEventListener","_type","_listener","removeEventListener","dispatchEvent","_event"],"mappings":"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"}