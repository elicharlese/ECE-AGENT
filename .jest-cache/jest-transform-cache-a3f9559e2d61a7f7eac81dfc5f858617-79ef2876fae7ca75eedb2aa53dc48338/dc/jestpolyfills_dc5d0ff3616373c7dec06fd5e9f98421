511503e9ac3c31de4adc2cce7fe29abd
// Polyfills that must load before any test framework or modules
// TextEncoder/TextDecoder for libraries (e.g., MSW interceptors) that expect them in Node/JSDOM
// @ts-ignore
"use strict";
if (typeof global.TextEncoder === "undefined") {
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    const { TextEncoder } = require("util");
    global.TextEncoder = TextEncoder;
}
// @ts-ignore
if (typeof global.TextDecoder === "undefined") {
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    const { TextDecoder } = require("util");
    global.TextDecoder = TextDecoder;
}
// Ensure Supabase env vars exist for tests before any modules import the client
if (!process.env.NEXT_PUBLIC_SUPABASE_URL) {
    process.env.NEXT_PUBLIC_SUPABASE_URL = "https://test.supabase.co";
}
if (!process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY) {
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY = "test-anon-key";
}
// Provide Web Streams polyfills used by MSW in Node/JSDOM
try {
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    const webStreams = require("stream/web");
    // @ts-ignore
    if (typeof global.TransformStream === "undefined" && webStreams?.TransformStream) {
        global.TransformStream = webStreams.TransformStream;
    }
    // @ts-ignore
    if (typeof global.ReadableStream === "undefined" && webStreams?.ReadableStream) {
        global.ReadableStream = webStreams.ReadableStream;
    }
    // @ts-ignore
    if (typeof global.WritableStream === "undefined" && webStreams?.WritableStream) {
        global.WritableStream = webStreams.WritableStream;
    }
} catch  {}
// Ensure fetch API classes exist on global for modules that reference them at import time
// Next's next/server defines classes extending global Request/Response during import
// which can fail if not set up first in JSDOM.
// @ts-ignore
if (typeof globalThis.Request === "undefined" && typeof window !== "undefined") {
    // @ts-ignore
    globalThis.Request = window.Request;
}
// @ts-ignore
if (typeof globalThis.Response === "undefined" && typeof window !== "undefined") {
    // @ts-ignore
    globalThis.Response = window.Response;
}
// @ts-ignore
if (typeof globalThis.Headers === "undefined" && typeof window !== "undefined") {
    // @ts-ignore
    globalThis.Headers = window.Headers;
}
// Add static Response.json if missing (NextResponse.json relies on it)
// @ts-ignore
if (typeof globalThis.Response !== "undefined" && typeof globalThis.Response.json !== "function") {
    globalThis.Response.json = (data, init)=>{
        const headers = new Headers(init?.headers || {});
        if (!headers.has("content-type")) headers.set("content-type", "application/json");
        return new Response(JSON.stringify(data), {
            ...init,
            headers
        });
    };
}
// Polyfill ResizeObserver for Radix UI components in tests
class MockResizeObserver {
    observe() {}
    unobserve() {}
    disconnect() {}
}
// @ts-ignore
if (typeof global.ResizeObserver === "undefined") {
    global.ResizeObserver = MockResizeObserver;
}
// Basic BroadcastChannel polyfill used by MSW's ws module
// @ts-ignore
if (typeof global.BroadcastChannel === "undefined") {
    class MockBroadcastChannel {
        constructor(name){
            this.onmessage = null;
            this.name = name;
        }
        postMessage(_msg) {}
        close() {}
        addEventListener(_type, _listener) {}
        removeEventListener(_type, _listener) {}
        dispatchEvent(_event) {
            return true;
        }
    }
    global.BroadcastChannel = MockBroadcastChannel;
}

//# sourceMappingURL=data:application/json;base64,