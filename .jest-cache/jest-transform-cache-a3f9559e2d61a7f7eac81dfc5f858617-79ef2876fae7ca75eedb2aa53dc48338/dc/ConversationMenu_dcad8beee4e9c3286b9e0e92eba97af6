9e2d61d5a03af1da8e8f69508c1799dc
"use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "ConversationMenu", {
    enumerable: true,
    get: function() {
        return ConversationMenu;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _dropdownmenu = require("../ui/dropdown-menu");
const _usetoast = require("../ui/use-toast");
const _client = require("../../lib/supabase/client");
const _conversationservice = require("../../services/conversation-service");
const _navigation = require("next/navigation");
const _Icon = require("../icons/Icon");
const _useconversations = require("../../hooks/use-conversations");
const _alertdialog = require("../ui/alert-dialog");
const _UserSelectorDialog = require("./UserSelectorDialog");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
function ConversationMenu({ chatId, currentUserId, creatorUserId, onOpenMCPSettings, onEnded, className }) {
    const [muted, setMuted] = _react.useState(false);
    const router = (0, _navigation.useRouter)();
    const { archiveConversation, leaveConversation, inviteParticipants } = (0, _useconversations.useConversations)();
    const [isArchived, setIsArchived] = _react.useState(false);
    const [inviteOpen, setInviteOpen] = _react.useState(false);
    // Load per-user flags for this conversation
    _react.useEffect(()=>{
        let active = true;
        const loadFlags = async ()=>{
            try {
                const { data, error } = await _client.supabase.from("conversation_participants").select("is_archived").eq("conversation_id", chatId).eq("user_id", currentUserId).maybeSingle();
                if (!active) return;
                if (error) return;
                setIsArchived(!!data?.is_archived);
            } catch  {}
        };
        if (chatId && currentUserId) loadFlags();
        return ()=>{
            active = false;
        };
    }, [
        chatId,
        currentUserId
    ]);
    const handleMarkAllAsRead = async ()=>{
        try {
            await _client.supabase.from("conversation_participants").update({
                last_read_at: new Date().toISOString()
            }).eq("conversation_id", chatId).eq("user_id", currentUserId);
            (0, _usetoast.toast)({
                title: "Marked as read"
            });
        } catch (e) {
            (0, _usetoast.toast)({
                title: "Failed to mark as read",
                description: e instanceof Error ? e.message : String(e),
                variant: "destructive"
            });
        }
    };
    const handleCopyConversationId = async ()=>{
        try {
            await navigator.clipboard.writeText(chatId);
            (0, _usetoast.toast)({
                title: "Conversation ID copied"
            });
        } catch (e) {
            (0, _usetoast.toast)({
                title: "Copy failed",
                description: "Could not copy Conversation ID",
                variant: "destructive"
            });
        }
    };
    const handleEndChat = async ()=>{
        // If current user is the creator, delete conversation (RLS allows)
        if (creatorUserId && creatorUserId === currentUserId) {
            try {
                await _conversationservice.conversationService.deleteConversation(chatId);
                (0, _usetoast.toast)({
                    title: "Conversation deleted"
                });
                onEnded?.("deleted");
                try {
                    router.push("/messages");
                } catch  {}
                return;
            } catch (e) {
                (0, _usetoast.toast)({
                    title: "Failed to delete",
                    description: e instanceof Error ? e.message : String(e),
                    variant: "destructive"
                });
                onEnded?.("failed");
                return;
            }
        }
        // Otherwise, attempt to leave by removing membership row
        try {
            await leaveConversation(chatId);
            (0, _usetoast.toast)({
                title: "Left conversation"
            });
            onEnded?.("left");
            try {
                router.push("/messages");
            } catch  {}
        } catch (e) {
            (0, _usetoast.toast)({
                title: "Failed to end chat",
                description: e instanceof Error ? e.message : String(e),
                variant: "destructive"
            });
            onEnded?.("failed");
        }
    };
    const handleToggleArchive = async (next)=>{
        try {
            await archiveConversation(chatId, next);
            setIsArchived(next);
            (0, _usetoast.toast)({
                title: next ? "Conversation archived" : "Conversation unarchived"
            });
            if (next) {
                // If archiving, navigate away
                try {
                    router.push("/messages");
                } catch  {}
                onEnded?.("archived");
            }
        } catch (e) {
            (0, _usetoast.toast)({
                title: "Failed to toggle archive",
                description: e instanceof Error ? e.message : String(e),
                variant: "destructive"
            });
        }
    };
    const handleInvite = ()=>{
        setInviteOpen(true);
    };
    const handleConfirmInvite = async (ids)=>{
        if (!ids || ids.length === 0) return;
        try {
            await inviteParticipants(chatId, ids);
            (0, _usetoast.toast)({
                title: "Participants invited"
            });
        } catch (e) {
            (0, _usetoast.toast)({
                title: "Failed to invite",
                description: e instanceof Error ? e.message : String(e),
                variant: "destructive"
            });
        }
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_dropdownmenu.DropdownMenu, {
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_dropdownmenu.DropdownMenuTrigger, {
                        asChild: true,
                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                            className: className ?? "p-2 rounded-md hover:bg-gray-100",
                            "aria-label": "Conversation options",
                            title: "Conversation options",
                            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_Icon.Icon, {
                                name: "more-vertical",
                                className: "w-5 h-5 text-gray-600"
                            })
                        })
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)(_dropdownmenu.DropdownMenuContent, {
                        align: "end",
                        className: "w-56",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_dropdownmenu.DropdownMenuLabel, {
                                children: "Conversation"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_dropdownmenu.DropdownMenuItem, {
                                onClick: handleMarkAllAsRead,
                                children: "Mark all as read"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_dropdownmenu.DropdownMenuItem, {
                                onClick: handleCopyConversationId,
                                children: "Copy Conversation ID"
                            }),
                            onOpenMCPSettings && /*#__PURE__*/ (0, _jsxruntime.jsx)(_dropdownmenu.DropdownMenuItem, {
                                onClick: ()=>onOpenMCPSettings(),
                                children: "Open MCP Settings"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_dropdownmenu.DropdownMenuSeparator, {}),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_dropdownmenu.DropdownMenuItem, {
                                onClick: handleInvite,
                                children: "Invite participantsâ€¦"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_dropdownmenu.DropdownMenuSeparator, {}),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_dropdownmenu.DropdownMenuCheckboxItem, {
                                checked: muted,
                                onCheckedChange: (v)=>{
                                    setMuted(!!v);
                                    (0, _usetoast.toast)({
                                        title: !!v ? "Notifications muted" : "Notifications unmuted"
                                    });
                                },
                                children: "Mute notifications"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_dropdownmenu.DropdownMenuCheckboxItem, {
                                checked: isArchived,
                                onCheckedChange: (v)=>handleToggleArchive(!!v),
                                children: isArchived ? "Unarchive conversation" : "Archive conversation"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_alertdialog.AlertDialog, {
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_alertdialog.AlertDialogTrigger, {
                                        asChild: true,
                                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_dropdownmenu.DropdownMenuItem, {
                                            variant: "destructive",
                                            children: "End chat"
                                        })
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsxs)(_alertdialog.AlertDialogContent, {
                                        children: [
                                            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_alertdialog.AlertDialogHeader, {
                                                children: [
                                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_alertdialog.AlertDialogTitle, {
                                                        children: creatorUserId && creatorUserId === currentUserId ? "Delete conversation?" : "Leave conversation?"
                                                    }),
                                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_alertdialog.AlertDialogDescription, {
                                                        children: creatorUserId && creatorUserId === currentUserId ? "This action cannot be undone. This will permanently delete the conversation and its messages for everyone." : "You will leave this conversation. You can be invited back later."
                                                    })
                                                ]
                                            }),
                                            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_alertdialog.AlertDialogFooter, {
                                                children: [
                                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_alertdialog.AlertDialogCancel, {
                                                        children: "Cancel"
                                                    }),
                                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_alertdialog.AlertDialogAction, {
                                                        onClick: handleEndChat,
                                                        children: creatorUserId && creatorUserId === currentUserId ? "Delete" : "Leave"
                                                    })
                                                ]
                                            })
                                        ]
                                    })
                                ]
                            })
                        ]
                    })
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_UserSelectorDialog.UserSelectorDialog, {
                open: inviteOpen,
                onOpenChange: setInviteOpen,
                onConfirm: handleConfirmInvite,
                chatId: chatId,
                currentUserId: currentUserId
            })
        ]
    });
}

//# sourceMappingURL=data:application/json;base64,