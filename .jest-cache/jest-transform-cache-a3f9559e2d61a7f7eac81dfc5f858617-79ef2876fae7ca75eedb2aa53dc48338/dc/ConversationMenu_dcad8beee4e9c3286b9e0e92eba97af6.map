{"version":3,"sources":["/Users/elicharlese/CascadeProjects/AGENT/components/chat/ConversationMenu.tsx"],"sourcesContent":["'use client'\n\nimport * as React from 'react'\nimport { DropdownMenu, DropdownMenuTrigger, DropdownMenuContent, DropdownMenuItem, DropdownMenuSeparator, DropdownMenuLabel, DropdownMenuCheckboxItem } from '@/components/ui/dropdown-menu'\nimport { toast } from '@/components/ui/use-toast'\nimport { supabase } from '@/lib/supabase/client'\nimport { conversationService } from '@/services/conversation-service'\nimport { useRouter } from 'next/navigation'\nimport { Icon } from '@/components/icons/Icon'\nimport { useConversations } from '@/hooks/use-conversations'\nimport { \n  AlertDialog,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n} from '@/components/ui/alert-dialog'\nimport { UserSelectorDialog } from '@/components/chat/UserSelectorDialog'\n\nexport interface ConversationMenuProps {\n  chatId: string\n  currentUserId: string\n  creatorUserId?: string\n  onOpenMCPSettings?: () => void\n  onEnded?: (result: 'deleted' | 'left' | 'archived' | 'failed') => void\n  className?: string\n}\n\nexport function ConversationMenu({ chatId, currentUserId, creatorUserId, onOpenMCPSettings, onEnded, className }: ConversationMenuProps) {\n  const [muted, setMuted] = React.useState(false)\n  const router = useRouter()\n  const { archiveConversation, leaveConversation, inviteParticipants } = useConversations()\n  const [isArchived, setIsArchived] = React.useState<boolean>(false)\n  const [inviteOpen, setInviteOpen] = React.useState<boolean>(false)\n\n  // Load per-user flags for this conversation\n  React.useEffect(() => {\n    let active = true\n    const loadFlags = async () => {\n      try {\n        const { data, error } = await supabase\n          .from('conversation_participants')\n          .select('is_archived')\n          .eq('conversation_id', chatId)\n          .eq('user_id', currentUserId)\n          .maybeSingle()\n        if (!active) return\n        if (error) return\n        setIsArchived(!!data?.is_archived)\n      } catch {}\n    }\n    if (chatId && currentUserId) loadFlags()\n    return () => { active = false }\n  }, [chatId, currentUserId])\n\n  const handleMarkAllAsRead = async () => {\n    try {\n      await supabase\n        .from('conversation_participants')\n        .update({ last_read_at: new Date().toISOString() })\n        .eq('conversation_id', chatId)\n        .eq('user_id', currentUserId)\n      toast({ title: 'Marked as read' })\n    } catch (e) {\n      toast({ title: 'Failed to mark as read', description: e instanceof Error ? e.message : String(e), variant: 'destructive' })\n    }\n  }\n\n  const handleCopyConversationId = async () => {\n    try {\n      await navigator.clipboard.writeText(chatId)\n      toast({ title: 'Conversation ID copied' })\n    } catch (e) {\n      toast({ title: 'Copy failed', description: 'Could not copy Conversation ID', variant: 'destructive' })\n    }\n  }\n\n  const handleEndChat = async () => {\n    // If current user is the creator, delete conversation (RLS allows)\n    if (creatorUserId && creatorUserId === currentUserId) {\n      try {\n        await conversationService.deleteConversation(chatId)\n        toast({ title: 'Conversation deleted' })\n        onEnded?.('deleted')\n        try { router.push('/messages') } catch {}\n        return\n      } catch (e) {\n        toast({ title: 'Failed to delete', description: e instanceof Error ? e.message : String(e), variant: 'destructive' })\n        onEnded?.('failed')\n        return\n      }\n    }\n\n    // Otherwise, attempt to leave by removing membership row\n    try {\n      await leaveConversation(chatId)\n      toast({ title: 'Left conversation' })\n      onEnded?.('left')\n      try { router.push('/messages') } catch {}\n    } catch (e) {\n      toast({ title: 'Failed to end chat', description: e instanceof Error ? e.message : String(e), variant: 'destructive' })\n      onEnded?.('failed')\n    }\n  }\n\n  const handleToggleArchive = async (next: boolean) => {\n    try {\n      await archiveConversation(chatId, next)\n      setIsArchived(next)\n      toast({ title: next ? 'Conversation archived' : 'Conversation unarchived' })\n      if (next) {\n        // If archiving, navigate away\n        try { router.push('/messages') } catch {}\n        onEnded?.('archived')\n      }\n    } catch (e) {\n      toast({ title: 'Failed to toggle archive', description: e instanceof Error ? e.message : String(e), variant: 'destructive' })\n    }\n  }\n\n  const handleInvite = () => {\n    setInviteOpen(true)\n  }\n\n  const handleConfirmInvite = async (ids: string[]) => {\n    if (!ids || ids.length === 0) return\n    try {\n      await inviteParticipants(chatId, ids)\n      toast({ title: 'Participants invited' })\n    } catch (e) {\n      toast({ title: 'Failed to invite', description: e instanceof Error ? e.message : String(e), variant: 'destructive' })\n    }\n  }\n\n  return (\n    <>\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <button\n          className={className ?? 'p-2 rounded-md hover:bg-gray-100'}\n          aria-label=\"Conversation options\"\n          title=\"Conversation options\"\n        >\n          <Icon name=\"more-vertical\" className=\"w-5 h-5 text-gray-600\" />\n        </button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\" className=\"w-56\">\n        <DropdownMenuLabel>Conversation</DropdownMenuLabel>\n        <DropdownMenuItem onClick={handleMarkAllAsRead}>\n          Mark all as read\n        </DropdownMenuItem>\n        <DropdownMenuItem onClick={handleCopyConversationId}>\n          Copy Conversation ID\n        </DropdownMenuItem>\n        {onOpenMCPSettings && (\n          <DropdownMenuItem onClick={() => onOpenMCPSettings()}>\n            Open MCP Settings\n          </DropdownMenuItem>\n        )}\n        <DropdownMenuSeparator />\n        <DropdownMenuItem onClick={handleInvite}>Invite participantsâ€¦</DropdownMenuItem>\n        <DropdownMenuSeparator />\n        <DropdownMenuCheckboxItem\n          checked={muted}\n          onCheckedChange={(v) => {\n            setMuted(!!v)\n            toast({ title: !!v ? 'Notifications muted' : 'Notifications unmuted' })\n          }}\n        >\n          Mute notifications\n        </DropdownMenuCheckboxItem>\n        <DropdownMenuCheckboxItem checked={isArchived} onCheckedChange={(v) => handleToggleArchive(!!v)}>\n          {isArchived ? 'Unarchive conversation' : 'Archive conversation'}\n        </DropdownMenuCheckboxItem>\n        <AlertDialog>\n          <AlertDialogTrigger asChild>\n            <DropdownMenuItem variant=\"destructive\">End chat</DropdownMenuItem>\n          </AlertDialogTrigger>\n          <AlertDialogContent>\n            <AlertDialogHeader>\n              <AlertDialogTitle>\n                {creatorUserId && creatorUserId === currentUserId ? 'Delete conversation?' : 'Leave conversation?'}\n              </AlertDialogTitle>\n              <AlertDialogDescription>\n                {creatorUserId && creatorUserId === currentUserId\n                  ? 'This action cannot be undone. This will permanently delete the conversation and its messages for everyone.'\n                  : 'You will leave this conversation. You can be invited back later.'}\n              </AlertDialogDescription>\n            </AlertDialogHeader>\n            <AlertDialogFooter>\n              <AlertDialogCancel>Cancel</AlertDialogCancel>\n              <AlertDialogAction onClick={handleEndChat}>\n                {creatorUserId && creatorUserId === currentUserId ? 'Delete' : 'Leave'}\n              </AlertDialogAction>\n            </AlertDialogFooter>\n          </AlertDialogContent>\n        </AlertDialog>\n      </DropdownMenuContent>\n    </DropdownMenu>\n    <UserSelectorDialog\n      open={inviteOpen}\n      onOpenChange={setInviteOpen}\n      onConfirm={handleConfirmInvite}\n      chatId={chatId}\n      currentUserId={currentUserId}\n    />\n    </>\n  )\n}\n"],"names":["ConversationMenu","chatId","currentUserId","creatorUserId","onOpenMCPSettings","onEnded","className","muted","setMuted","React","useState","router","useRouter","archiveConversation","leaveConversation","inviteParticipants","useConversations","isArchived","setIsArchived","inviteOpen","setInviteOpen","useEffect","active","loadFlags","data","error","supabase","from","select","eq","maybeSingle","is_archived","handleMarkAllAsRead","update","last_read_at","Date","toISOString","toast","title","e","description","Error","message","String","variant","handleCopyConversationId","navigator","clipboard","writeText","handleEndChat","conversationService","deleteConversation","push","handleToggleArchive","next","handleInvite","handleConfirmInvite","ids","length","DropdownMenu","DropdownMenuTrigger","asChild","button","aria-label","Icon","name","DropdownMenuContent","align","DropdownMenuLabel","DropdownMenuItem","onClick","DropdownMenuSeparator","DropdownMenuCheckboxItem","checked","onCheckedChange","v","AlertDialog","AlertDialogTrigger","AlertDialogContent","AlertDialogHeader","AlertDialogTitle","AlertDialogDescription","AlertDialogFooter","AlertDialogCancel","AlertDialogAction","UserSelectorDialog","open","onOpenChange","onConfirm"],"mappings":"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"}