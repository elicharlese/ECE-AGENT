9d9eb08abbcd7c3270155856325fc5cd
"use strict";
// Mock next/dynamic to avoid loading heavy components during tests
jest.mock("next/dynamic", ()=>()=>(props)=>null);
// Mock Next.js navigation to satisfy components that call useRouter/usePathname
jest.mock("next/navigation", ()=>({
        useRouter: ()=>({
                push: jest.fn(),
                replace: jest.fn(),
                prefetch: jest.fn(),
                back: jest.fn()
            }),
        usePathname: ()=>"/messages",
        useSearchParams: ()=>({
                get: ()=>null
            })
    }));
jest.mock("@/hooks/use-conversations", ()=>({
        useConversations: ()=>({
                conversations: [
                    {
                        id: "abc",
                        title: "Test Conversation",
                        created_at: "",
                        updated_at: "",
                        user_id: "user-1"
                    }
                ],
                loading: false,
                error: null,
                inviteParticipants: mockInviteParticipants
            })
    }));
jest.mock("@/hooks/use-websocket", ()=>({
        useWebSocket: ()=>({
                isConnected: true,
                messages: [],
                typingUsers: {},
                joinConversation: jest.fn(),
                sendChatMessage: jest.fn(),
                sendTyping: jest.fn()
            })
    }));
jest.mock("@/hooks/use-mobile", ()=>({
        useIsMobile: ()=>false
    }));
jest.mock("@/hooks/use-haptics", ()=>({
        useHaptics: ()=>({
                triggerHaptic: ()=>undefined
            })
    }));
// Mock InviteUsersDialog to immediately invoke onInviteUsers when opened
jest.mock("@/components/chat/invite-users-dialog", ()=>({
        InviteUsersDialog: ({ isOpen, onClose, onInviteUsers })=>{
            if (isOpen) {
                // Trigger a mixed set: username, email, wallet
                const users = [
                    {
                        identifier: "@alice",
                        type: "username"
                    },
                    {
                        identifier: "bob@example.com",
                        type: "email"
                    },
                    {
                        identifier: "SoL1111111111111111111111111111111111111",
                        type: "wallet"
                    }
                ];
                // Fire and close once
                onInviteUsers(users);
                onClose?.();
            }
            return null;
        }
    }));
jest.mock("@/services/profile-service", ()=>({
        getProfileByUsername: jest.fn(),
        getProfileByIdentifier: jest.fn()
    }));
// Mock Supabase client used by ChatWindow for this test
jest.mock("@/lib/supabase/client", ()=>{
    const supabase = {
        from: (table)=>({
                select: (_sel, _opts)=>({
                        eq: (col, _val)=>{
                            // Participant count head:true path
                            if (table === "conversation_participants" && col === "conversation_id") {
                                return Promise.resolve({
                                    count: 3
                                });
                            }
                            // Wallet lookup path
                            if (table === "profiles" && col === "solana_address") {
                                return {
                                    limit: async (_n)=>({
                                            data: [
                                                {
                                                    user_id: "user-wallet"
                                                }
                                            ],
                                            error: null
                                        })
                                };
                            }
                            return {
                                limit: async (_n)=>({
                                        data: null,
                                        error: null
                                    })
                            };
                        }
                    })
            })
    };
    return {
        supabase
    };
});
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _profileservice = require("../../services/profile-service");
const _chatwindow = require("../../components/chat/chat-window");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock hooks used by ChatWindow
const mockInviteParticipants = jest.fn();
describe("ChatWindow invite flow", ()=>{
    beforeEach(()=>{
        mockInviteParticipants.mockReset();
        _profileservice.getProfileByUsername.mockReset();
        _profileservice.getProfileByIdentifier.mockReset();
        _profileservice.getProfileByUsername.mockImplementation(async (uname)=>{
            if (uname.replace(/^@/, "") === "alice" || uname === "alice") {
                return {
                    user_id: "user-alice"
                };
            }
            return null;
        });
        _profileservice.getProfileByIdentifier.mockImplementation(async (identifier)=>{
            if (identifier === "bob@example.com") {
                return {
                    user_id: "user-bob"
                };
            }
            return null;
        });
    });
    const baseProps = {
        chatId: "abc",
        onToggleSidebar: ()=>{},
        sidebarCollapsed: false
    };
    test("resolves identifiers and calls inviteParticipants with user IDs", async ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_chatwindow.ChatWindow, {
            ...baseProps
        }));
        // Wait until group detection enables the Invite button
        const inviteBtn = await _react1.screen.findByTitle(/invite users/i);
        _react1.fireEvent.click(inviteBtn);
        await (0, _react1.waitFor)(()=>{
            expect(mockInviteParticipants).toHaveBeenCalledTimes(1);
            expect(mockInviteParticipants).toHaveBeenCalledWith("abc", expect.arrayContaining([
                "user-alice",
                "user-bob",
                "user-wallet" // from wallet MSW handler
            ]));
        });
    });
});

//# sourceMappingURL=data:application/json;base64,