{"version":3,"sources":["/Users/elicharlese/CascadeProjects/AGENT/__tests__/api/mcp.proxy.test.ts"],"sourcesContent":["// Mock NextResponse.json to produce a standard Response with JSON body\njest.mock('next/server', () => ({\n  NextResponse: {\n    json: (data: any, init?: ResponseInit & { status?: number }) =>\n      new Response(JSON.stringify(data), {\n        status: (init as any)?.status ?? 200,\n        headers: { 'content-type': 'application/json' },\n      }),\n  },\n}))\n\ndescribe('MCP GitHub Proxy', () => {\n  it('POST /api/mcp/github returns 400 when PAT header missing', async () => {\n    const { POST } = await import('@/app/api/mcp/github/route')\n\n    const req = new Request('http://localhost/api/mcp/github', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ hello: 'world' }),\n    })\n\n    const res = await POST(req as any)\n    expect(res.status).toBe(400)\n    const json = await res.json()\n    expect(json.error).toMatch(/Missing GitHub PAT/i)\n  })\n})\n"],"names":["jest","mock","NextResponse","json","data","init","Response","JSON","stringify","status","headers","describe","it","POST","req","Request","method","body","hello","res","expect","toBe","error","toMatch"],"mappings":"AAAA,uEAAuE;;AACvEA,KAAKC,IAAI,CAAC,eAAe,IAAO,CAAA;QAC9BC,cAAc;YACZC,MAAM,CAACC,MAAWC,OAChB,IAAIC,SAASC,KAAKC,SAAS,CAACJ,OAAO;oBACjCK,QAAQ,AAACJ,MAAcI,UAAU;oBACjCC,SAAS;wBAAE,gBAAgB;oBAAmB;gBAChD;QACJ;IACF,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEAC,SAAS,oBAAoB;IAC3BC,GAAG,4DAA4D;QAC7D,MAAM,EAAEC,IAAI,EAAE,GAAG,MAAM,mEAAA,QAAO;QAE9B,MAAMC,MAAM,IAAIC,QAAQ,mCAAmC;YACzDC,QAAQ;YACRN,SAAS;gBAAE,gBAAgB;YAAmB;YAC9CO,MAAMV,KAAKC,SAAS,CAAC;gBAAEU,OAAO;YAAQ;QACxC;QAEA,MAAMC,MAAM,MAAMN,KAAKC;QACvBM,OAAOD,IAAIV,MAAM,EAAEY,IAAI,CAAC;QACxB,MAAMlB,OAAO,MAAMgB,IAAIhB,IAAI;QAC3BiB,OAAOjB,KAAKmB,KAAK,EAAEC,OAAO,CAAC;IAC7B;AACF"}