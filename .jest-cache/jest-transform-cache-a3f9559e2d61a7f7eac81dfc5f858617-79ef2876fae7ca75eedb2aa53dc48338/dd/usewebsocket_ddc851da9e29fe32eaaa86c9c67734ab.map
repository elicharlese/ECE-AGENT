{"version":3,"sources":["/Users/elicharlese/CascadeProjects/AGENT/hooks/use-websocket.ts"],"sourcesContent":["'use client'\n\nimport { useEffect, useState, useCallback, useRef } from 'react'\nimport { supabase } from '@/lib/supabase/client';\n\ninterface Message {\n  id: string\n  text: string\n  sender: 'user' | 'other' | 'ai'\n  senderName?: string\n  timestamp: Date\n  conversationId: string\n  type?: 'text' | 'image' | 'video' | 'audio' | 'document' | 'system' | 'gif' | 'app'\n  mediaUrl?: string\n  fileName?: string\n  fileSize?: string\n  isPinned?: boolean\n  isLiked?: boolean\n  likeCount?: number\n  status?: 'sent' | 'delivered' | 'read'\n  appData?: {\n    appId: string\n    appName: string\n    data: any\n  }\n}\n\ninterface WebSocketMessage {\n  type: string;\n  [key: string]: any;\n}\n\nexport function useWebSocket() {\n  if (process.env.NODE_ENV !== 'production') {\n    // lightweight trace in dev only\n    // console.debug('useWebSocket init')\n  }\n  const [isConnected, setIsConnected] = useState(false);\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [currentConversationId, setCurrentConversationId] = useState<string | null>(null);\n  const [typingUsers, setTypingUsers] = useState<Record<string, { name: string; timestamp: number }>>({});\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [myUserId, setMyUserId] = useState<string | null>(null);\n\n  const wsRef = useRef<WebSocket | null>(null);\n  const WS_URL = process.env.NEXT_PUBLIC_WEBSOCKET_URL; // Build-time public env\n  const DEFER_UNTIL_INTERACTION =\n    (process.env.NEXT_PUBLIC_WS_DEFER_UNTIL_INTERACTION || '').toLowerCase() === '1' ||\n    (process.env.NEXT_PUBLIC_WS_DEFER_UNTIL_INTERACTION || '').toLowerCase() === 'true'\n\n  // Refs to avoid stale closures inside socket handlers\n  const currentConversationIdRef = useRef<string | null>(null)\n  const myUserIdRef = useRef<string | null>(null)\n  useEffect(() => { currentConversationIdRef.current = currentConversationId }, [currentConversationId])\n  useEffect(() => { myUserIdRef.current = myUserId }, [myUserId])\n\n  const connect = async () => {\n    console.log('connect function called');\n    // Get the current session token from Supabase\n    const { data: { session } } = await supabase.auth.getSession();\n    const token = session?.access_token;\n    const uid = session?.user?.id || null\n    setMyUserId(uid)\n    \n    if (!token) {\n      console.error('No authentication token available');\n      return;\n    }\n\n    if (!WS_URL) {\n      console.warn('NEXT_PUBLIC_WEBSOCKET_URL is not set. Skipping real WS connect.');\n      return;\n    }\n\n    console.log('Creating WebSocket connection');\n    if (wsRef.current && (wsRef.current.readyState === WebSocket.OPEN || wsRef.current.readyState === WebSocket.CONNECTING)) {\n      return;\n    }\n    \n    wsRef.current = new WebSocket(WS_URL);\n    \n    wsRef.current.onopen = () => {\n      console.log('WebSocket connected');\n      setIsConnected(true);\n      \n      // Authenticate with the token\n      wsRef.current?.send(JSON.stringify({\n        type: 'authenticate',\n        token\n      }));\n    };\n    \n    wsRef.current.onmessage = (event) => {\n      try {\n        const data: WebSocketMessage = JSON.parse(event.data);\n        switch (data.type) {\n          case 'authenticated': {\n            setIsAuthenticated(true)\n            // auto-join if a conversation is already selected\n            const pending = currentConversationIdRef.current\n            if (pending) {\n              try {\n                wsRef.current?.send(JSON.stringify({ type: 'join_conversation', conversationId: pending }))\n              } catch {}\n            }\n            break\n          }\n          case 'conversation_joined': {\n            // no-op; UI already tracks currentConversationId\n            break\n          }\n          case 'conversation_history': {\n            const arr = Array.isArray((data as any).messages) ? (data as any).messages : []\n            if (arr.length) {\n              const mapped: Message[] = arr.map((m: any) => ({\n                id: m.id,\n                text: m.content,\n                sender: m.user_id === myUserIdRef.current ? 'user' : 'other',\n                senderName: m.role === 'assistant' ? 'AI Assistant' : undefined,\n                timestamp: new Date(m.timestamp || m.created_at || Date.now()),\n                conversationId: m.conversation_id,\n                type: (m.type || 'text') as Message['type'],\n                status: 'read',\n              }))\n              setMessages(prev => {\n                const byId = new Set(prev.map(p => p.id))\n                const additions = mapped.filter(m => !byId.has(m.id))\n                return [...prev, ...additions]\n              })\n            }\n            break\n          }\n          case 'message': {\n            const m = (data as any).message\n            if (m) {\n              const mapped: Message = {\n                id: m.id,\n                text: m.content,\n                sender: m.user_id === myUserIdRef.current ? 'user' : 'other',\n                senderName: m.role === 'assistant' ? 'AI Assistant' : undefined,\n                timestamp: new Date(m.timestamp || Date.now()),\n                conversationId: m.conversation_id,\n                type: (m.type || 'text') as Message['type'],\n                status: 'delivered',\n              }\n              setMessages(prev => [...prev, mapped])\n            }\n            break\n          }\n          case 'typing': {\n            const { userId, isTyping } = data as any\n            setTypingUsers(prev => {\n              const next = { ...prev }\n              if (userId === myUserIdRef.current) return next\n              if (isTyping) {\n                next[userId] = { name: 'Someone', timestamp: Date.now() }\n              } else {\n                delete next[userId]\n              }\n              return next\n            })\n            break\n          }\n          case 'error': {\n            console.error('WebSocket server error:', (data as any).message)\n            break\n          }\n          default: {\n            // Unknown/unused event type\n            break\n          }\n        }\n      } catch (e) {\n        console.warn('WebSocket onmessage parse error', e)\n      }\n    };\n    \n    wsRef.current.onclose = () => {\n      console.log('WebSocket disconnected');\n      setIsConnected(false);\n      setIsAuthenticated(false);\n    };\n    \n    wsRef.current.onerror = (error: any) => {\n      console.error('WebSocket error:', error);\n    };\n  };\n  \n  const disconnect = () => {\n    if (wsRef.current) {\n      wsRef.current.close();\n      wsRef.current = null;\n    }\n    setIsConnected(false);\n    setIsAuthenticated(false);\n  };\n  \n  const sendMessage = useCallback((text: string, conversationId: string) => {\n    const newMessage: Message = {\n      id: `${Date.now()}-${Math.random()}`,\n      text,\n      sender: 'user',\n      timestamp: new Date(),\n      conversationId,\n      type: 'text',\n      status: 'sent'\n    }\n    \n    // Add message optimistically\n    setMessages(prev => [...prev, newMessage])\n    \n    // Simulate status updates\n    setTimeout(() => {\n      setMessages(prev =>\n        prev.map(msg =>\n          msg.id === newMessage.id ? { ...msg, status: 'delivered' } : msg\n        )\n      )\n    }, 500)\n    \n    setTimeout(() => {\n      setMessages(prev =>\n        prev.map(msg =>\n          msg.id === newMessage.id ? { ...msg, status: 'read' } : msg\n        )\n      )\n    }, 1500)\n    \n    // Simulate AI response if message contains \"ai\" or \"help\"\n    if (text.toLowerCase().includes('ai') || text.toLowerCase().includes('help')) {\n      // Show typing indicator\n      const typingId = 'ai-assistant'\n      setTypingUsers(prev => ({\n        ...prev,\n        [typingId]: { name: 'AI Assistant', timestamp: Date.now() }\n      }))\n      \n      setTimeout(() => {\n        // Remove typing indicator\n        setTypingUsers(prev => {\n          const newTyping = { ...prev }\n          delete newTyping[typingId]\n          return newTyping\n        })\n        \n        // Add AI response\n        const aiResponse: Message = {\n          id: `${Date.now()}-ai-${Math.random()}`,\n          text: 'I can help you with that! What specific assistance do you need?',\n          sender: 'ai',\n          senderName: 'AI Assistant',\n          timestamp: new Date(),\n          conversationId,\n          type: 'text',\n          status: 'read'\n        }\n        setMessages(prev => [...prev, aiResponse])\n      }, 2000)\n    }\n\n    // Send to server if connected & authenticated\n    try {\n      if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN && isAuthenticated) {\n        wsRef.current.send(JSON.stringify({ type: 'send_message', content: text }))\n      }\n    } catch (e) {\n      console.warn('sendMessage WS send failed', e)\n    }\n  }, [])\n\n  const typingTimeoutRef = useRef<number | null>(null)\n  const sendTyping = useCallback((conversationId: string) => {\n    console.log(`Sending typing indicator for: ${conversationId}`)\n    try {\n      if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN && isAuthenticated) {\n        wsRef.current.send(JSON.stringify({ type: 'typing', isTyping: true }))\n        if (typingTimeoutRef.current) window.clearTimeout(typingTimeoutRef.current)\n        typingTimeoutRef.current = window.setTimeout(() => {\n          try { wsRef.current?.send(JSON.stringify({ type: 'typing', isTyping: false })) } catch {}\n        }, 1500)\n      }\n    } catch (e) {\n      console.warn('sendTyping WS send failed', e)\n    }\n  }, [isAuthenticated])\n\n  const sendEditMessage = useCallback((id: string, text: string, conversationId: string) => {\n    // Try to send an edit event to the server if WS is live\n    try {\n      if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {\n        const payload: WebSocketMessage = { type: 'edit_message', id, text, conversationId }\n        wsRef.current.send(JSON.stringify(payload))\n      }\n    } catch (e) {\n      console.warn('sendEditMessage WS send failed', e)\n    }\n    // Always simulate a local event so other UI parts can react in mock mode\n    setMessages(prev => [\n      ...prev,\n      { type: 'message_edited', id, text, conversationId, timestamp: new Date(), sender: 'user' } as any,\n    ])\n  }, [])\n\n  const joinConversation = useCallback((conversationId: string) => {\n    console.log(`Joining conversation: ${conversationId}`)\n    setCurrentConversationId(conversationId)\n    setMessages([]) // Clear messages when switching conversations\n    try {\n      if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN && isAuthenticated) {\n        wsRef.current.send(JSON.stringify({ type: 'join_conversation', conversationId }))\n      }\n    } catch (e) {\n      console.warn('joinConversation WS send failed', e)\n    }\n  }, [isAuthenticated])\n\n  const leaveConversation = useCallback((conversationId: string) => {\n    console.log(`Leaving conversation: ${conversationId}`)\n    if (currentConversationId === conversationId) {\n      setCurrentConversationId(null)\n      setMessages([])\n    }\n    try {\n      if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN && isAuthenticated) {\n        wsRef.current.send(JSON.stringify({ type: 'leave_conversation' }))\n      }\n    } catch (e) {\n      console.warn('leaveConversation WS send failed', e)\n    }\n  }, [currentConversationId, isAuthenticated])\n\n  // Mock connection only when no WS URL is configured\n  useEffect(() => {\n    if (WS_URL) return;\n    const mockConnect = () => {\n      console.log('Mock WebSocket connected')\n      setIsConnected(true)\n      \n      // Simulate receiving some initial messages after joining\n      if (currentConversationId) {\n        setTimeout(() => {\n          const mockHistoricalMessages: Message[] = [\n            {\n              id: 'mock1',\n              text: 'Welcome to the conversation!',\n              sender: 'other',\n              senderName: 'System',\n              timestamp: new Date(Date.now() - 3600000),\n              conversationId: currentConversationId,\n              status: 'read'\n            },\n            {\n              id: 'mock2',\n              text: 'This is a real-time messaging demo.',\n              sender: 'ai',\n              senderName: 'AI Assistant',\n              timestamp: new Date(Date.now() - 1800000),\n              conversationId: currentConversationId,\n              status: 'read'\n            }\n          ]\n          setMessages(mockHistoricalMessages)\n        }, 500)\n      }\n    }\n\n    mockConnect()\n\n    return () => {\n      console.log('Mock WebSocket cleanup')\n      setIsConnected(false)\n    }\n  }, [WS_URL, currentConversationId])\n\n  useEffect(() => {\n    // Defer connect until the page is visible and the browser is idle.\n    if (!WS_URL) return;\n    let canceled = false\n\n    const scheduleIdle = () => {\n      if ('requestIdleCallback' in window) {\n        ;(window as any).requestIdleCallback(() => {\n          if (!canceled) connect()\n        }, { timeout: 1500 })\n      } else {\n        setTimeout(() => { if (!canceled) connect() }, 200)\n      }\n    }\n\n    const scheduleWhenVisible = () => {\n      if (typeof document !== 'undefined' && document.visibilityState !== 'visible') {\n        const onVisible = () => {\n          if (document.visibilityState === 'visible') {\n            document.removeEventListener('visibilitychange', onVisible)\n            scheduleIdle()\n          }\n        }\n        document.addEventListener('visibilitychange', onVisible)\n      } else {\n        scheduleIdle()\n      }\n    }\n\n    if (typeof window !== 'undefined' && DEFER_UNTIL_INTERACTION) {\n      const once = () => {\n        cleanup()\n        scheduleWhenVisible()\n      }\n      const cleanup = () => {\n        window.removeEventListener('pointerdown', once)\n        window.removeEventListener('keydown', once)\n        window.removeEventListener('touchstart', once)\n        window.removeEventListener('focus', once, true)\n      }\n      window.addEventListener('pointerdown', once, { passive: true })\n      window.addEventListener('keydown', once)\n      window.addEventListener('touchstart', once, { passive: true })\n      window.addEventListener('focus', once, true)\n      // Safety: also schedule after 5s in case no interaction occurs\n      const safety = setTimeout(() => { cleanup(); scheduleWhenVisible() }, 5000)\n      return () => { canceled = true; cleanup(); clearTimeout(safety); disconnect() }\n    }\n\n    scheduleWhenVisible()\n\n    return () => {\n      canceled = true\n      disconnect()\n    }\n  }, [WS_URL, DEFER_UNTIL_INTERACTION])\n\n  return {\n    isConnected,\n    messages,\n    connect,\n    disconnect,\n    joinConversation,\n    leaveConversation,\n    sendMessage,\n    sendChatMessage: sendMessage, // Alias for compatibility\n    sendEditMessage,\n    sendTyping,\n    typingUsers\n  };\n}\n"],"names":["useWebSocket","process","env","NODE_ENV","isConnected","setIsConnected","useState","messages","setMessages","currentConversationId","setCurrentConversationId","typingUsers","setTypingUsers","isAuthenticated","setIsAuthenticated","myUserId","setMyUserId","wsRef","useRef","WS_URL","NEXT_PUBLIC_WEBSOCKET_URL","DEFER_UNTIL_INTERACTION","NEXT_PUBLIC_WS_DEFER_UNTIL_INTERACTION","toLowerCase","currentConversationIdRef","myUserIdRef","useEffect","current","connect","console","log","data","session","supabase","auth","getSession","token","access_token","uid","user","id","error","warn","readyState","WebSocket","OPEN","CONNECTING","onopen","send","JSON","stringify","type","onmessage","event","parse","pending","conversationId","arr","Array","isArray","length","mapped","map","m","text","content","sender","user_id","senderName","role","undefined","timestamp","Date","created_at","now","conversation_id","status","prev","byId","Set","p","additions","filter","has","message","userId","isTyping","next","name","e","onclose","onerror","disconnect","close","sendMessage","useCallback","newMessage","Math","random","setTimeout","msg","includes","typingId","newTyping","aiResponse","typingTimeoutRef","sendTyping","window","clearTimeout","sendEditMessage","payload","joinConversation","leaveConversation","mockConnect","mockHistoricalMessages","canceled","scheduleIdle","requestIdleCallback","timeout","scheduleWhenVisible","document","visibilityState","onVisible","removeEventListener","addEventListener","once","cleanup","passive","safety","sendChatMessage"],"mappings":"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"}