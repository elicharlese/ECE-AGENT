df18979fc4a40f790cc07c6884887f5f
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("@testing-library/react");
const _EmptyChatState = require("../../components/chat/EmptyChatState");
describe("EmptyChatState", ()=>{
    it("renders empty state with default content", ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_EmptyChatState.EmptyChatState, {}));
        expect(_react.screen.getByText("No conversation selected")).toBeInTheDocument();
        expect(_react.screen.getByText(/Select a conversation from the left/)).toBeInTheDocument();
        expect(_react.screen.getByRole("button", {
            name: /start new chat/i
        })).toBeInTheDocument();
    });
    it("calls onStartNewChat when button is clicked", ()=>{
        const mockStartNewChat = jest.fn();
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_EmptyChatState.EmptyChatState, {
            onStartNewChat: mockStartNewChat
        }));
        const button = _react.screen.getByRole("button", {
            name: /start new chat/i
        });
        _react.fireEvent.click(button);
        expect(mockStartNewChat).toHaveBeenCalledTimes(1);
    });
    it("has proper accessibility attributes", ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_EmptyChatState.EmptyChatState, {}));
        const button = _react.screen.getByRole("button", {
            name: /start new chat/i
        });
        expect(button).toHaveAttribute("aria-label", "Start new chat");
    });
    it("renders icon and maintains visual structure", ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_EmptyChatState.EmptyChatState, {}));
        // Check for icon container
        const iconContainer = _react.screen.getByText("No conversation selected").previousElementSibling;
        expect(iconContainer).toHaveClass("rounded-xl", "bg-gradient-to-br");
        // Check for button with icon
        const button = _react.screen.getByRole("button", {
            name: /start new chat/i
        });
        expect(button).toHaveClass("gap-2");
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9lbGljaGFybGVzZS9DYXNjYWRlUHJvamVjdHMvQUdFTlQvX190ZXN0c19fL2NvbXBvbmVudHMvRW1wdHlDaGF0U3RhdGUudGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVuZGVyLCBzY3JlZW4sIGZpcmVFdmVudCB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QnXG5pbXBvcnQgeyBFbXB0eUNoYXRTdGF0ZSB9IGZyb20gJ0AvY29tcG9uZW50cy9jaGF0L0VtcHR5Q2hhdFN0YXRlJ1xuXG5kZXNjcmliZSgnRW1wdHlDaGF0U3RhdGUnLCAoKSA9PiB7XG4gIGl0KCdyZW5kZXJzIGVtcHR5IHN0YXRlIHdpdGggZGVmYXVsdCBjb250ZW50JywgKCkgPT4ge1xuICAgIHJlbmRlcig8RW1wdHlDaGF0U3RhdGUgLz4pXG4gICAgXG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ05vIGNvbnZlcnNhdGlvbiBzZWxlY3RlZCcpKS50b0JlSW5UaGVEb2N1bWVudCgpXG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoL1NlbGVjdCBhIGNvbnZlcnNhdGlvbiBmcm9tIHRoZSBsZWZ0LykpLnRvQmVJblRoZURvY3VtZW50KClcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5Um9sZSgnYnV0dG9uJywgeyBuYW1lOiAvc3RhcnQgbmV3IGNoYXQvaSB9KSkudG9CZUluVGhlRG9jdW1lbnQoKVxuICB9KVxuXG4gIGl0KCdjYWxscyBvblN0YXJ0TmV3Q2hhdCB3aGVuIGJ1dHRvbiBpcyBjbGlja2VkJywgKCkgPT4ge1xuICAgIGNvbnN0IG1vY2tTdGFydE5ld0NoYXQgPSBqZXN0LmZuKClcbiAgICByZW5kZXIoPEVtcHR5Q2hhdFN0YXRlIG9uU3RhcnROZXdDaGF0PXttb2NrU3RhcnROZXdDaGF0fSAvPilcbiAgICBcbiAgICBjb25zdCBidXR0b24gPSBzY3JlZW4uZ2V0QnlSb2xlKCdidXR0b24nLCB7IG5hbWU6IC9zdGFydCBuZXcgY2hhdC9pIH0pXG4gICAgZmlyZUV2ZW50LmNsaWNrKGJ1dHRvbilcbiAgICBcbiAgICBleHBlY3QobW9ja1N0YXJ0TmV3Q2hhdCkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpXG4gIH0pXG5cbiAgaXQoJ2hhcyBwcm9wZXIgYWNjZXNzaWJpbGl0eSBhdHRyaWJ1dGVzJywgKCkgPT4ge1xuICAgIHJlbmRlcig8RW1wdHlDaGF0U3RhdGUgLz4pXG4gICAgXG4gICAgY29uc3QgYnV0dG9uID0gc2NyZWVuLmdldEJ5Um9sZSgnYnV0dG9uJywgeyBuYW1lOiAvc3RhcnQgbmV3IGNoYXQvaSB9KVxuICAgIGV4cGVjdChidXR0b24pLnRvSGF2ZUF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcsICdTdGFydCBuZXcgY2hhdCcpXG4gIH0pXG5cbiAgaXQoJ3JlbmRlcnMgaWNvbiBhbmQgbWFpbnRhaW5zIHZpc3VhbCBzdHJ1Y3R1cmUnLCAoKSA9PiB7XG4gICAgcmVuZGVyKDxFbXB0eUNoYXRTdGF0ZSAvPilcbiAgICBcbiAgICAvLyBDaGVjayBmb3IgaWNvbiBjb250YWluZXJcbiAgICBjb25zdCBpY29uQ29udGFpbmVyID0gc2NyZWVuLmdldEJ5VGV4dCgnTm8gY29udmVyc2F0aW9uIHNlbGVjdGVkJykucHJldmlvdXNFbGVtZW50U2libGluZ1xuICAgIGV4cGVjdChpY29uQ29udGFpbmVyKS50b0hhdmVDbGFzcygncm91bmRlZC14bCcsICdiZy1ncmFkaWVudC10by1icicpXG4gICAgXG4gICAgLy8gQ2hlY2sgZm9yIGJ1dHRvbiB3aXRoIGljb25cbiAgICBjb25zdCBidXR0b24gPSBzY3JlZW4uZ2V0QnlSb2xlKCdidXR0b24nLCB7IG5hbWU6IC9zdGFydCBuZXcgY2hhdC9pIH0pXG4gICAgZXhwZWN0KGJ1dHRvbikudG9IYXZlQ2xhc3MoJ2dhcC0yJylcbiAgfSlcbn0pXG4iXSwibmFtZXMiOlsiZGVzY3JpYmUiLCJpdCIsInJlbmRlciIsIkVtcHR5Q2hhdFN0YXRlIiwiZXhwZWN0Iiwic2NyZWVuIiwiZ2V0QnlUZXh0IiwidG9CZUluVGhlRG9jdW1lbnQiLCJnZXRCeVJvbGUiLCJuYW1lIiwibW9ja1N0YXJ0TmV3Q2hhdCIsImplc3QiLCJmbiIsIm9uU3RhcnROZXdDaGF0IiwiYnV0dG9uIiwiZmlyZUV2ZW50IiwiY2xpY2siLCJ0b0hhdmVCZWVuQ2FsbGVkVGltZXMiLCJ0b0hhdmVBdHRyaWJ1dGUiLCJpY29uQ29udGFpbmVyIiwicHJldmlvdXNFbGVtZW50U2libGluZyIsInRvSGF2ZUNsYXNzIl0sIm1hcHBpbmdzIjoiOzs7Ozt1QkFBMEM7Z0NBQ1g7QUFFL0JBLFNBQVMsa0JBQWtCO0lBQ3pCQyxHQUFHLDRDQUE0QztRQUM3Q0MsSUFBQUEsYUFBTSxnQkFBQyxxQkFBQ0MsOEJBQWM7UUFFdEJDLE9BQU9DLGFBQU0sQ0FBQ0MsU0FBUyxDQUFDLDZCQUE2QkMsaUJBQWlCO1FBQ3RFSCxPQUFPQyxhQUFNLENBQUNDLFNBQVMsQ0FBQyx3Q0FBd0NDLGlCQUFpQjtRQUNqRkgsT0FBT0MsYUFBTSxDQUFDRyxTQUFTLENBQUMsVUFBVTtZQUFFQyxNQUFNO1FBQWtCLElBQUlGLGlCQUFpQjtJQUNuRjtJQUVBTixHQUFHLCtDQUErQztRQUNoRCxNQUFNUyxtQkFBbUJDLEtBQUtDLEVBQUU7UUFDaENWLElBQUFBLGFBQU0sZ0JBQUMscUJBQUNDLDhCQUFjO1lBQUNVLGdCQUFnQkg7O1FBRXZDLE1BQU1JLFNBQVNULGFBQU0sQ0FBQ0csU0FBUyxDQUFDLFVBQVU7WUFBRUMsTUFBTTtRQUFrQjtRQUNwRU0sZ0JBQVMsQ0FBQ0MsS0FBSyxDQUFDRjtRQUVoQlYsT0FBT00sa0JBQWtCTyxxQkFBcUIsQ0FBQztJQUNqRDtJQUVBaEIsR0FBRyx1Q0FBdUM7UUFDeENDLElBQUFBLGFBQU0sZ0JBQUMscUJBQUNDLDhCQUFjO1FBRXRCLE1BQU1XLFNBQVNULGFBQU0sQ0FBQ0csU0FBUyxDQUFDLFVBQVU7WUFBRUMsTUFBTTtRQUFrQjtRQUNwRUwsT0FBT1UsUUFBUUksZUFBZSxDQUFDLGNBQWM7SUFDL0M7SUFFQWpCLEdBQUcsK0NBQStDO1FBQ2hEQyxJQUFBQSxhQUFNLGdCQUFDLHFCQUFDQyw4QkFBYztRQUV0QiwyQkFBMkI7UUFDM0IsTUFBTWdCLGdCQUFnQmQsYUFBTSxDQUFDQyxTQUFTLENBQUMsNEJBQTRCYyxzQkFBc0I7UUFDekZoQixPQUFPZSxlQUFlRSxXQUFXLENBQUMsY0FBYztRQUVoRCw2QkFBNkI7UUFDN0IsTUFBTVAsU0FBU1QsYUFBTSxDQUFDRyxTQUFTLENBQUMsVUFBVTtZQUFFQyxNQUFNO1FBQWtCO1FBQ3BFTCxPQUFPVSxRQUFRTyxXQUFXLENBQUM7SUFDN0I7QUFDRiJ9