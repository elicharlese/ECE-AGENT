{"version":3,"sources":["/Users/elicharlese/CascadeProjects/AGENT/components/chat/QuickChatMount.tsx"],"sourcesContent":["\"use client\"\n\nimport React, { useEffect, useState } from \"react\"\nimport { MiniChatWidget } from \"@/components/chat/MiniChatWidget\"\n\n// Global mount for the Appleâ€‘style quick chat bar\n// Keeps UI consistent across routes and platforms (web/electron)\n// Adds imperative commands to show/hide via window.quickChat or CustomEvents\nexport function QuickChatMount() {\n  const [visible, setVisible] = useState(true)\n\n  useEffect(() => {\n    const onShow = () => setVisible(true)\n    const onHide = () => setVisible(false)\n    const onToggle = () => setVisible((v) => !v)\n\n    // CustomEvent interface\n    const showListener = () => onShow()\n    const hideListener = () => onHide()\n    const toggleListener = () => onToggle()\n\n    window.addEventListener(\"quickchat:show\", showListener as EventListener)\n    window.addEventListener(\"quickchat:hide\", hideListener as EventListener)\n    window.addEventListener(\"quickchat:toggle\", toggleListener as EventListener)\n\n    // Imperative API (merge to avoid clobbering methods added by other components)\n    const existing = (window as any).quickChat || {}\n    ;(window as any).quickChat = {\n      ...existing,\n      show: onShow,\n      hide: onHide,\n      toggle: onToggle,\n    }\n\n    return () => {\n      window.removeEventListener(\"quickchat:show\", showListener as EventListener)\n      window.removeEventListener(\"quickchat:hide\", hideListener as EventListener)\n      window.removeEventListener(\"quickchat:toggle\", toggleListener as EventListener)\n      try {\n        const qc = (window as any).quickChat || {}\n        if (qc) {\n          delete qc.show\n          delete qc.hide\n          delete qc.toggle\n          // If object has no own keys left, remove it entirely\n          if (Object.keys(qc).length === 0) {\n            delete (window as any).quickChat\n          } else {\n            ;(window as any).quickChat = qc\n          }\n        }\n      } catch {}\n    }\n  }, [])\n\n  if (!visible) return null\n  return <MiniChatWidget title=\"Quick Chat\" initialMinimized={true} />\n}\n"],"names":["QuickChatMount","visible","setVisible","useState","useEffect","onShow","onHide","onToggle","v","showListener","hideListener","toggleListener","window","addEventListener","existing","quickChat","show","hide","toggle","removeEventListener","qc","Object","keys","length","MiniChatWidget","title","initialMinimized"],"mappings":"AAAA;;;;;+BAQgBA;;;eAAAA;;;;+DAN2B;gCACZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKxB,SAASA;IACd,MAAM,CAACC,SAASC,WAAW,GAAGC,IAAAA,eAAQ,EAAC;IAEvCC,IAAAA,gBAAS,EAAC;QACR,MAAMC,SAAS,IAAMH,WAAW;QAChC,MAAMI,SAAS,IAAMJ,WAAW;QAChC,MAAMK,WAAW,IAAML,WAAW,CAACM,IAAM,CAACA;QAE1C,wBAAwB;QACxB,MAAMC,eAAe,IAAMJ;QAC3B,MAAMK,eAAe,IAAMJ;QAC3B,MAAMK,iBAAiB,IAAMJ;QAE7BK,OAAOC,gBAAgB,CAAC,kBAAkBJ;QAC1CG,OAAOC,gBAAgB,CAAC,kBAAkBH;QAC1CE,OAAOC,gBAAgB,CAAC,oBAAoBF;QAE5C,+EAA+E;QAC/E,MAAMG,WAAW,AAACF,OAAeG,SAAS,IAAI,CAAC;QAC7CH,OAAeG,SAAS,GAAG;YAC3B,GAAGD,QAAQ;YACXE,MAAMX;YACNY,MAAMX;YACNY,QAAQX;QACV;QAEA,OAAO;YACLK,OAAOO,mBAAmB,CAAC,kBAAkBV;YAC7CG,OAAOO,mBAAmB,CAAC,kBAAkBT;YAC7CE,OAAOO,mBAAmB,CAAC,oBAAoBR;YAC/C,IAAI;gBACF,MAAMS,KAAK,AAACR,OAAeG,SAAS,IAAI,CAAC;gBACzC,IAAIK,IAAI;oBACN,OAAOA,GAAGJ,IAAI;oBACd,OAAOI,GAAGH,IAAI;oBACd,OAAOG,GAAGF,MAAM;oBAChB,qDAAqD;oBACrD,IAAIG,OAAOC,IAAI,CAACF,IAAIG,MAAM,KAAK,GAAG;wBAChC,OAAO,AAACX,OAAeG,SAAS;oBAClC,OAAO;wBACHH,OAAeG,SAAS,GAAGK;oBAC/B;gBACF;YACF,EAAE,OAAM,CAAC;QACX;IACF,GAAG,EAAE;IAEL,IAAI,CAACnB,SAAS,OAAO;IACrB,qBAAO,qBAACuB,8BAAc;QAACC,OAAM;QAAaC,kBAAkB;;AAC9D"}