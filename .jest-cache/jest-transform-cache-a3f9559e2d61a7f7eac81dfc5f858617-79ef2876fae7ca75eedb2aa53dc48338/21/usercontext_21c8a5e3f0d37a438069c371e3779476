e4201bbc6dccf427e1a255ef66f21aec
"use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    UserProvider: function() {
        return UserProvider;
    },
    useUser: function() {
        return useUser;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _client = require("../lib/supabase/client");
const UserContext = /*#__PURE__*/ (0, _react.createContext)({
    user: null,
    isLoading: true,
    login: async ()=>false,
    logout: async ()=>{}
});
function UserProvider({ children }) {
    const [user, setUser] = (0, _react.useState)(null);
    const [isLoading, setIsLoading] = (0, _react.useState)(true);
    (0, _react.useEffect)(()=>{
        const supabase = (0, _client.createClient)();
        const getUser = async ()=>{
            const { data: { session } } = await supabase.auth.getSession();
            setUser(session?.user ?? null);
            setIsLoading(false);
        };
        getUser();
        const { data: { subscription } } = supabase.auth.onAuthStateChange((_event, session)=>{
            setUser(session?.user ?? null);
        });
        return ()=>subscription.unsubscribe();
    }, []);
    const login = async (email, password)=>{
        const supabase = (0, _client.createClient)();
        const { data, error } = await supabase.auth.signInWithPassword({
            email,
            password
        });
        if (error) return false;
        setUser(data.user ?? null);
        return !!data.user;
    };
    const logout = async ()=>{
        const supabase = (0, _client.createClient)();
        await supabase.auth.signOut();
        setUser(null);
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(UserContext.Provider, {
        value: {
            user,
            isLoading,
            login,
            logout
        },
        children: children
    });
}
function useUser() {
    const context = (0, _react.useContext)(UserContext);
    if (!context) {
        throw new Error("useUser must be used within a UserProvider");
    }
    return context;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9lbGljaGFybGVzZS9DYXNjYWRlUHJvamVjdHMvQUdFTlQvY29udGV4dHMvdXNlci1jb250ZXh0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGNsaWVudCdcblxuaW1wb3J0IHsgY3JlYXRlQ29udGV4dCwgdXNlQ29udGV4dCwgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgVXNlciB9IGZyb20gJ0BzdXBhYmFzZS9zdXBhYmFzZS1qcydcbmltcG9ydCB7IGNyZWF0ZUNsaWVudCB9IGZyb20gJ0AvbGliL3N1cGFiYXNlL2NsaWVudCdcblxuaW50ZXJmYWNlIFVzZXJDb250ZXh0VHlwZSB7XG4gIHVzZXI6IFVzZXIgfCBudWxsXG4gIGlzTG9hZGluZzogYm9vbGVhblxuICBsb2dpbjogKGVtYWlsOiBzdHJpbmcsIHBhc3N3b3JkOiBzdHJpbmcpID0+IFByb21pc2U8Ym9vbGVhbj5cbiAgbG9nb3V0OiAoKSA9PiBQcm9taXNlPHZvaWQ+XG59XG5cbmNvbnN0IFVzZXJDb250ZXh0ID0gY3JlYXRlQ29udGV4dDxVc2VyQ29udGV4dFR5cGU+KHtcbiAgdXNlcjogbnVsbCxcbiAgaXNMb2FkaW5nOiB0cnVlLFxuICBsb2dpbjogYXN5bmMgKCkgPT4gZmFsc2UsXG4gIGxvZ291dDogYXN5bmMgKCkgPT4ge30sXG59KVxuXG5leHBvcnQgZnVuY3Rpb24gVXNlclByb3ZpZGVyKHsgY2hpbGRyZW4gfTogeyBjaGlsZHJlbjogUmVhY3QuUmVhY3ROb2RlIH0pIHtcbiAgY29uc3QgW3VzZXIsIHNldFVzZXJdID0gdXNlU3RhdGU8VXNlciB8IG51bGw+KG51bGwpXG4gIGNvbnN0IFtpc0xvYWRpbmcsIHNldElzTG9hZGluZ10gPSB1c2VTdGF0ZSh0cnVlKVxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3Qgc3VwYWJhc2UgPSBjcmVhdGVDbGllbnQoKVxuXG4gICAgY29uc3QgZ2V0VXNlciA9IGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHsgZGF0YTogeyBzZXNzaW9uIH0gfSA9IGF3YWl0IHN1cGFiYXNlLmF1dGguZ2V0U2Vzc2lvbigpXG4gICAgICBzZXRVc2VyKHNlc3Npb24/LnVzZXIgPz8gbnVsbClcbiAgICAgIHNldElzTG9hZGluZyhmYWxzZSlcbiAgICB9XG5cbiAgICBnZXRVc2VyKClcblxuICAgIGNvbnN0IHsgZGF0YTogeyBzdWJzY3JpcHRpb24gfSB9ID0gc3VwYWJhc2UuYXV0aC5vbkF1dGhTdGF0ZUNoYW5nZSgoX2V2ZW50LCBzZXNzaW9uKSA9PiB7XG4gICAgICBzZXRVc2VyKHNlc3Npb24/LnVzZXIgPz8gbnVsbClcbiAgICB9KVxuXG4gICAgcmV0dXJuICgpID0+IHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpXG4gIH0sIFtdKVxuXG4gIGNvbnN0IGxvZ2luID0gYXN5bmMgKGVtYWlsOiBzdHJpbmcsIHBhc3N3b3JkOiBzdHJpbmcpID0+IHtcbiAgICBjb25zdCBzdXBhYmFzZSA9IGNyZWF0ZUNsaWVudCgpXG4gICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2UuYXV0aC5zaWduSW5XaXRoUGFzc3dvcmQoeyBlbWFpbCwgcGFzc3dvcmQgfSlcbiAgICBpZiAoZXJyb3IpIHJldHVybiBmYWxzZVxuICAgIHNldFVzZXIoZGF0YS51c2VyID8/IG51bGwpXG4gICAgcmV0dXJuICEhZGF0YS51c2VyXG4gIH1cblxuICBjb25zdCBsb2dvdXQgPSBhc3luYyAoKSA9PiB7XG4gICAgY29uc3Qgc3VwYWJhc2UgPSBjcmVhdGVDbGllbnQoKVxuICAgIGF3YWl0IHN1cGFiYXNlLmF1dGguc2lnbk91dCgpXG4gICAgc2V0VXNlcihudWxsKVxuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8VXNlckNvbnRleHQuUHJvdmlkZXIgdmFsdWU9e3sgdXNlciwgaXNMb2FkaW5nLCBsb2dpbiwgbG9nb3V0IH19PlxuICAgICAge2NoaWxkcmVufVxuICAgIDwvVXNlckNvbnRleHQuUHJvdmlkZXI+XG4gIClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVVzZXIoKSB7XG4gIGNvbnN0IGNvbnRleHQgPSB1c2VDb250ZXh0KFVzZXJDb250ZXh0KVxuICBpZiAoIWNvbnRleHQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3VzZVVzZXIgbXVzdCBiZSB1c2VkIHdpdGhpbiBhIFVzZXJQcm92aWRlcicpXG4gIH1cbiAgcmV0dXJuIGNvbnRleHRcbn1cbiJdLCJuYW1lcyI6WyJVc2VyUHJvdmlkZXIiLCJ1c2VVc2VyIiwiVXNlckNvbnRleHQiLCJjcmVhdGVDb250ZXh0IiwidXNlciIsImlzTG9hZGluZyIsImxvZ2luIiwibG9nb3V0IiwiY2hpbGRyZW4iLCJzZXRVc2VyIiwidXNlU3RhdGUiLCJzZXRJc0xvYWRpbmciLCJ1c2VFZmZlY3QiLCJzdXBhYmFzZSIsImNyZWF0ZUNsaWVudCIsImdldFVzZXIiLCJkYXRhIiwic2Vzc2lvbiIsImF1dGgiLCJnZXRTZXNzaW9uIiwic3Vic2NyaXB0aW9uIiwib25BdXRoU3RhdGVDaGFuZ2UiLCJfZXZlbnQiLCJ1bnN1YnNjcmliZSIsImVtYWlsIiwicGFzc3dvcmQiLCJlcnJvciIsInNpZ25JbldpdGhQYXNzd29yZCIsInNpZ25PdXQiLCJQcm92aWRlciIsInZhbHVlIiwiY29udGV4dCIsInVzZUNvbnRleHQiLCJFcnJvciJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7OztJQW9CZ0JBLFlBQVk7ZUFBWkE7O0lBMkNBQyxPQUFPO2VBQVBBOzs7O3VCQTdEK0M7d0JBRWxDO0FBUzdCLE1BQU1DLDRCQUFjQyxJQUFBQSxvQkFBYSxFQUFrQjtJQUNqREMsTUFBTTtJQUNOQyxXQUFXO0lBQ1hDLE9BQU8sVUFBWTtJQUNuQkMsUUFBUSxXQUFhO0FBQ3ZCO0FBRU8sU0FBU1AsYUFBYSxFQUFFUSxRQUFRLEVBQWlDO0lBQ3RFLE1BQU0sQ0FBQ0osTUFBTUssUUFBUSxHQUFHQyxJQUFBQSxlQUFRLEVBQWM7SUFDOUMsTUFBTSxDQUFDTCxXQUFXTSxhQUFhLEdBQUdELElBQUFBLGVBQVEsRUFBQztJQUUzQ0UsSUFBQUEsZ0JBQVMsRUFBQztRQUNSLE1BQU1DLFdBQVdDLElBQUFBLG9CQUFZO1FBRTdCLE1BQU1DLFVBQVU7WUFDZCxNQUFNLEVBQUVDLE1BQU0sRUFBRUMsT0FBTyxFQUFFLEVBQUUsR0FBRyxNQUFNSixTQUFTSyxJQUFJLENBQUNDLFVBQVU7WUFDNURWLFFBQVFRLFNBQVNiLFFBQVE7WUFDekJPLGFBQWE7UUFDZjtRQUVBSTtRQUVBLE1BQU0sRUFBRUMsTUFBTSxFQUFFSSxZQUFZLEVBQUUsRUFBRSxHQUFHUCxTQUFTSyxJQUFJLENBQUNHLGlCQUFpQixDQUFDLENBQUNDLFFBQVFMO1lBQzFFUixRQUFRUSxTQUFTYixRQUFRO1FBQzNCO1FBRUEsT0FBTyxJQUFNZ0IsYUFBYUcsV0FBVztJQUN2QyxHQUFHLEVBQUU7SUFFTCxNQUFNakIsUUFBUSxPQUFPa0IsT0FBZUM7UUFDbEMsTUFBTVosV0FBV0MsSUFBQUEsb0JBQVk7UUFDN0IsTUFBTSxFQUFFRSxJQUFJLEVBQUVVLEtBQUssRUFBRSxHQUFHLE1BQU1iLFNBQVNLLElBQUksQ0FBQ1Msa0JBQWtCLENBQUM7WUFBRUg7WUFBT0M7UUFBUztRQUNqRixJQUFJQyxPQUFPLE9BQU87UUFDbEJqQixRQUFRTyxLQUFLWixJQUFJLElBQUk7UUFDckIsT0FBTyxDQUFDLENBQUNZLEtBQUtaLElBQUk7SUFDcEI7SUFFQSxNQUFNRyxTQUFTO1FBQ2IsTUFBTU0sV0FBV0MsSUFBQUEsb0JBQVk7UUFDN0IsTUFBTUQsU0FBU0ssSUFBSSxDQUFDVSxPQUFPO1FBQzNCbkIsUUFBUTtJQUNWO0lBRUEscUJBQ0UscUJBQUNQLFlBQVkyQixRQUFRO1FBQUNDLE9BQU87WUFBRTFCO1lBQU1DO1lBQVdDO1lBQU9DO1FBQU87a0JBQzNEQzs7QUFHUDtBQUVPLFNBQVNQO0lBQ2QsTUFBTThCLFVBQVVDLElBQUFBLGlCQUFVLEVBQUM5QjtJQUMzQixJQUFJLENBQUM2QixTQUFTO1FBQ1osTUFBTSxJQUFJRSxNQUFNO0lBQ2xCO0lBQ0EsT0FBT0Y7QUFDVCJ9