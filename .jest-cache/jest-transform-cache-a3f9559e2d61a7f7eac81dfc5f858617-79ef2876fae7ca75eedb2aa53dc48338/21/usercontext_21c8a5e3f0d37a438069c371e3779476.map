{"version":3,"sources":["/Users/elicharlese/CascadeProjects/AGENT/contexts/user-context.tsx"],"sourcesContent":["'use client'\n\nimport { createContext, useContext, useEffect, useState } from 'react'\nimport { User } from '@supabase/supabase-js'\nimport { createClient } from '@/lib/supabase/client'\n\ninterface UserContextType {\n  user: User | null\n  isLoading: boolean\n  login: (email: string, password: string) => Promise<boolean>\n  logout: () => Promise<void>\n}\n\nconst UserContext = createContext<UserContextType>({\n  user: null,\n  isLoading: true,\n  login: async () => false,\n  logout: async () => {},\n})\n\nexport function UserProvider({ children }: { children: React.ReactNode }) {\n  const [user, setUser] = useState<User | null>(null)\n  const [isLoading, setIsLoading] = useState(true)\n\n  useEffect(() => {\n    const supabase = createClient()\n\n    const getUser = async () => {\n      const { data: { session } } = await supabase.auth.getSession()\n      setUser(session?.user ?? null)\n      setIsLoading(false)\n    }\n\n    getUser()\n\n    const { data: { subscription } } = supabase.auth.onAuthStateChange((_event, session) => {\n      setUser(session?.user ?? null)\n    })\n\n    return () => subscription.unsubscribe()\n  }, [])\n\n  const login = async (email: string, password: string) => {\n    const supabase = createClient()\n    const { data, error } = await supabase.auth.signInWithPassword({ email, password })\n    if (error) return false\n    setUser(data.user ?? null)\n    return !!data.user\n  }\n\n  const logout = async () => {\n    const supabase = createClient()\n    await supabase.auth.signOut()\n    setUser(null)\n  }\n\n  return (\n    <UserContext.Provider value={{ user, isLoading, login, logout }}>\n      {children}\n    </UserContext.Provider>\n  )\n}\n\nexport function useUser() {\n  const context = useContext(UserContext)\n  if (!context) {\n    throw new Error('useUser must be used within a UserProvider')\n  }\n  return context\n}\n"],"names":["UserProvider","useUser","UserContext","createContext","user","isLoading","login","logout","children","setUser","useState","setIsLoading","useEffect","supabase","createClient","getUser","data","session","auth","getSession","subscription","onAuthStateChange","_event","unsubscribe","email","password","error","signInWithPassword","signOut","Provider","value","context","useContext","Error"],"mappings":"AAAA;;;;;;;;;;;;IAoBgBA,YAAY;eAAZA;;IA2CAC,OAAO;eAAPA;;;;uBA7D+C;wBAElC;AAS7B,MAAMC,4BAAcC,IAAAA,oBAAa,EAAkB;IACjDC,MAAM;IACNC,WAAW;IACXC,OAAO,UAAY;IACnBC,QAAQ,WAAa;AACvB;AAEO,SAASP,aAAa,EAAEQ,QAAQ,EAAiC;IACtE,MAAM,CAACJ,MAAMK,QAAQ,GAAGC,IAAAA,eAAQ,EAAc;IAC9C,MAAM,CAACL,WAAWM,aAAa,GAAGD,IAAAA,eAAQ,EAAC;IAE3CE,IAAAA,gBAAS,EAAC;QACR,MAAMC,WAAWC,IAAAA,oBAAY;QAE7B,MAAMC,UAAU;YACd,MAAM,EAAEC,MAAM,EAAEC,OAAO,EAAE,EAAE,GAAG,MAAMJ,SAASK,IAAI,CAACC,UAAU;YAC5DV,QAAQQ,SAASb,QAAQ;YACzBO,aAAa;QACf;QAEAI;QAEA,MAAM,EAAEC,MAAM,EAAEI,YAAY,EAAE,EAAE,GAAGP,SAASK,IAAI,CAACG,iBAAiB,CAAC,CAACC,QAAQL;YAC1ER,QAAQQ,SAASb,QAAQ;QAC3B;QAEA,OAAO,IAAMgB,aAAaG,WAAW;IACvC,GAAG,EAAE;IAEL,MAAMjB,QAAQ,OAAOkB,OAAeC;QAClC,MAAMZ,WAAWC,IAAAA,oBAAY;QAC7B,MAAM,EAAEE,IAAI,EAAEU,KAAK,EAAE,GAAG,MAAMb,SAASK,IAAI,CAACS,kBAAkB,CAAC;YAAEH;YAAOC;QAAS;QACjF,IAAIC,OAAO,OAAO;QAClBjB,QAAQO,KAAKZ,IAAI,IAAI;QACrB,OAAO,CAAC,CAACY,KAAKZ,IAAI;IACpB;IAEA,MAAMG,SAAS;QACb,MAAMM,WAAWC,IAAAA,oBAAY;QAC7B,MAAMD,SAASK,IAAI,CAACU,OAAO;QAC3BnB,QAAQ;IACV;IAEA,qBACE,qBAACP,YAAY2B,QAAQ;QAACC,OAAO;YAAE1B;YAAMC;YAAWC;YAAOC;QAAO;kBAC3DC;;AAGP;AAEO,SAASP;IACd,MAAM8B,UAAUC,IAAAA,iBAAU,EAAC9B;IAC3B,IAAI,CAAC6B,SAAS;QACZ,MAAM,IAAIE,MAAM;IAClB;IACA,OAAOF;AACT"}