718b40a00c95094c4d745abcf09e61a7
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    listMessages: function() {
        return listMessages;
    },
    messageService: function() {
        return messageService;
    },
    sendMessage: function() {
        return sendMessage;
    },
    subscribeToMessages: function() {
        return subscribeToMessages;
    }
});
const _client = require("../lib/supabase/client");
const messageService = {
    async getMessages (conversationId) {
        try {
            const { data, error } = await _client.supabase.from("messages").select("*").eq("conversation_id", conversationId).order("timestamp", {
                ascending: true
            });
            if (error) {
                console.error("getMessages error", error);
                return [];
            }
            return (data || []).map((msg)=>({
                    id: msg.id,
                    conversation_id: msg.conversation_id,
                    user_id: msg.user_id || "system",
                    content: msg.content,
                    created_at: msg.timestamp,
                    is_ai: msg.role === "assistant",
                    role: msg.role,
                    edited_at: msg.edited_at,
                    read_at: null,
                    metadata: msg.metadata,
                    type: "text"
                }));
        } catch (error) {
            console.error("Failed to get messages:", error);
            return [];
        }
    },
    async sendMessage (conversationId, content) {
        const { data: auth } = await _client.supabase.auth.getUser();
        if (!auth?.user) throw new Error("Not authenticated");
        const { data, error } = await _client.supabase.from("messages").insert({
            conversation_id: conversationId,
            user_id: auth.user.id,
            content,
            role: "user"
        }).select().single();
        if (error) {
            console.error("sendMessage error", error);
            throw new Error(error.message);
        }
        const msg = {
            id: data.id,
            conversation_id: data.conversation_id,
            user_id: data.user_id || "system",
            content: data.content,
            created_at: data.timestamp,
            is_ai: data.role === "assistant",
            role: data.role,
            edited_at: data.edited_at,
            read_at: null,
            metadata: data.metadata,
            type: data.type
        };
        return msg;
    },
    async updateMessage (messageId, content) {
        const { data: auth } = await _client.supabase.auth.getUser();
        if (!auth?.user) throw new Error("Not authenticated");
        const { data, error } = await _client.supabase.from("messages").update({
            content,
            edited_at: new Date().toISOString()
        }).eq("id", messageId).eq("user_id", auth.user.id).select().single();
        if (error) {
            console.error("updateMessage error", error);
            throw new Error(error.message);
        }
        const msg = {
            id: data.id,
            conversation_id: data.conversation_id,
            user_id: data.user_id || "system",
            content: data.content,
            created_at: data.timestamp,
            is_ai: data.role === "assistant",
            role: data.role,
            edited_at: data.edited_at,
            read_at: null,
            metadata: data.metadata,
            type: data.type
        };
        return msg;
    }
};
async function listMessages(conversationId) {
    const { data, error } = await _client.supabase.from("messages").select("*").eq("conversation_id", conversationId).order("timestamp", {
        ascending: true
    });
    if (error) {
        console.error("listMessages error", error);
        throw new Error(error.message);
    }
    return data || [];
}
async function sendMessage(conversationId, content) {
    const { data: auth } = await _client.supabase.auth.getUser();
    if (!auth?.user) throw new Error("Not authenticated");
    const { data, error } = await _client.supabase.from("messages").insert({
        conversation_id: conversationId,
        user_id: auth.user.id,
        content,
        role: "user"
    }).select().single();
    if (error) {
        console.error("sendMessage error", error);
        throw new Error(error.message);
    }
    return data;
}
function subscribeToMessages(conversationId, onInsert) {
    const channel = _client.supabase.channel(`messages-${conversationId}`).on("postgres_changes", {
        event: "INSERT",
        schema: "public",
        table: "messages",
        filter: `conversation_id=eq.${conversationId}`
    }, (payload)=>{
        const newMsg = payload.new;
        onInsert(newMsg);
    }).subscribe();
    return ()=>{
        _client.supabase.removeChannel(channel);
    };
}

//# sourceMappingURL=data:application/json;base64,