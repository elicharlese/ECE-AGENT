{"version":3,"sources":["/Users/elicharlese/CascadeProjects/AGENT/services/message-service.ts"],"sourcesContent":["import { supabase } from '@/lib/supabase/client'\nimport type { Message } from '@/types/message'\n\nexport interface DBMessage {\n  id: string\n  conversation_id: string\n  user_id: string | null\n  content: string\n  role: 'user' | 'assistant' | 'system'\n  timestamp: string\n  edited_at: string | null\n  is_deleted: boolean | null\n  metadata: Record<string, any> | null\n}\n\nexport const messageService = {\n  async getMessages(conversationId: string): Promise<Message[]> {\n    try {\n      const { data, error } = await supabase\n        .from('messages')\n        .select('*')\n        .eq('conversation_id', conversationId)\n        .order('timestamp', { ascending: true })\n\n      if (error) {\n        console.error('getMessages error', error)\n        return []\n      }\n\n      return (data || []).map((msg: DBMessage): Message => ({\n        id: msg.id,\n        conversation_id: msg.conversation_id,\n        user_id: msg.user_id || 'system',\n        content: msg.content,\n        created_at: msg.timestamp,\n        is_ai: msg.role === 'assistant',\n        role: msg.role,\n        edited_at: msg.edited_at,\n        read_at: null,\n        metadata: msg.metadata,\n        type: 'text',\n      }))\n    } catch (error) {\n      console.error('Failed to get messages:', error)\n      return []\n    }\n  },\n\n  async sendMessage(conversationId: string, content: string): Promise<Message> {\n    const { data: auth } = await supabase.auth.getUser()\n    if (!auth?.user) throw new Error('Not authenticated')\n\n    const { data, error } = await supabase\n      .from('messages')\n      .insert({ \n        conversation_id: conversationId, \n        user_id: auth.user.id, \n        content, \n        role: 'user' \n      })\n      .select()\n      .single()\n\n    if (error) {\n      console.error('sendMessage error', error)\n      throw new Error(error.message)\n    }\n\n    const msg: Message = {\n      id: data.id,\n      conversation_id: data.conversation_id,\n      user_id: data.user_id || 'system',\n      content: data.content,\n      created_at: data.timestamp,\n      is_ai: data.role === 'assistant',\n      role: data.role,\n      edited_at: data.edited_at,\n      read_at: null,\n      metadata: data.metadata,\n      type: data.type,\n    }\n    return msg\n  },\n\n  async updateMessage(messageId: string, content: string): Promise<Message> {\n    const { data: auth } = await supabase.auth.getUser()\n    if (!auth?.user) throw new Error('Not authenticated')\n\n    const { data, error } = await supabase\n      .from('messages')\n      .update({ content, edited_at: new Date().toISOString() })\n      .eq('id', messageId)\n      .eq('user_id', auth.user.id)\n      .select()\n      .single()\n\n    if (error) {\n      console.error('updateMessage error', error)\n      throw new Error(error.message)\n    }\n\n    const msg: Message = {\n      id: data.id,\n      conversation_id: data.conversation_id,\n      user_id: data.user_id || 'system',\n      content: data.content,\n      created_at: data.timestamp,\n      is_ai: data.role === 'assistant',\n      role: data.role,\n      edited_at: data.edited_at,\n      read_at: null,\n      metadata: data.metadata,\n      type: data.type,\n    }\n    return msg\n  }\n}\n\n// Legacy exports for backward compatibility\nexport async function listMessages(conversationId: string): Promise<DBMessage[]> {\n  const { data, error } = await supabase\n    .from('messages')\n    .select('*')\n    .eq('conversation_id', conversationId)\n    .order('timestamp', { ascending: true })\n\n  if (error) {\n    console.error('listMessages error', error)\n    throw new Error(error.message)\n  }\n  return (data || []) as DBMessage[]\n}\n\nexport async function sendMessage(conversationId: string, content: string): Promise<DBMessage> {\n  const { data: auth } = await supabase.auth.getUser()\n  if (!auth?.user) throw new Error('Not authenticated')\n\n  const { data, error } = await supabase\n    .from('messages')\n    .insert({ conversation_id: conversationId, user_id: auth.user.id, content, role: 'user' })\n    .select()\n    .single()\n\n  if (error) {\n    console.error('sendMessage error', error)\n    throw new Error(error.message)\n  }\n  return data as DBMessage\n}\n\nexport type MessageInsertHandler = (msg: DBMessage) => void\n\nexport function subscribeToMessages(conversationId: string, onInsert: MessageInsertHandler) {\n  const channel = supabase\n    .channel(`messages-${conversationId}`)\n    .on(\n      'postgres_changes',\n      { event: 'INSERT', schema: 'public', table: 'messages', filter: `conversation_id=eq.${conversationId}` },\n      (payload) => {\n        const newMsg = payload.new as DBMessage\n        onInsert(newMsg)\n      }\n    )\n    .subscribe()\n\n  return () => {\n    supabase.removeChannel(channel)\n  }\n}\n"],"names":["listMessages","messageService","sendMessage","subscribeToMessages","getMessages","conversationId","data","error","supabase","from","select","eq","order","ascending","console","map","msg","id","conversation_id","user_id","content","created_at","timestamp","is_ai","role","edited_at","read_at","metadata","type","auth","getUser","user","Error","insert","single","message","updateMessage","messageId","update","Date","toISOString","onInsert","channel","on","event","schema","table","filter","payload","newMsg","new","subscribe","removeChannel"],"mappings":"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"}