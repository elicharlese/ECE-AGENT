{"version":3,"sources":["/Users/elicharlese/CascadeProjects/AGENT/src/types/agent-observability.ts"],"sourcesContent":["import { z } from 'zod';\n\n// Core transformation tracking\nexport const TransformationSchema = z.object({\n  id: z.string(), // e.g., \"patch-17@c1a2b3\"\n  patchId: z.number(),\n  batchId: z.number().optional(),\n  branch: z.string(),\n  authorId: z.string(),\n  timestamp: z.string().datetime(),\n  categories: z.array(z.enum(['code', 'config', 'database', 'infrastructure', 'docs'])),\n  filesTouched: z.array(z.string()),\n  gitStats: z.object({\n    sha: z.string(),\n    additions: z.number(),\n    deletions: z.number(),\n    changedFiles: z.number(),\n  }),\n  coreProtectionStatus: z.enum(['safe', 'violation_detected', 'violation_blocked']),\n});\n\nexport type Transformation = z.infer<typeof TransformationSchema>;\n\n// Observation events during transformation\nexport const ObservationEventSchema = z.object({\n  name: z.string(),\n  timestamp: z.string().datetime(),\n  severity: z.enum(['info', 'warn', 'error', 'critical']),\n  payload: z.record(z.any()), // Structured log data\n  category: z.enum(['tool_call', 'guardrail', 'core_protection', 'user_action', 'system']),\n});\n\nexport type ObservationEvent = z.infer<typeof ObservationEventSchema>;\n\n// Guardrail execution results\nexport const GuardrailResultSchema = z.object({\n  name: z.enum(['typecheck', 'lint', 'test', 'build', 'e2e', 'coverage', 'bundle_size', 'db_health', 'core_protection']),\n  status: z.enum(['pass', 'fail', 'warn', 'skip', 'error']),\n  timestamp: z.string().datetime(),\n  duration: z.number(), // milliseconds\n  metrics: z.record(z.union([z.string(), z.number(), z.boolean()])),\n  artifacts: z.array(z.string()), // paths to generated files/reports\n  exitCode: z.number().optional(),\n  stdout: z.string().optional(),\n  stderr: z.string().optional(),\n});\n\nexport type GuardrailResult = z.infer<typeof GuardrailResultSchema>;\n\n// Artifacts generated during transformation\nexport const ArtifactSchema = z.object({\n  id: z.string(),\n  transformationId: z.string(),\n  kind: z.enum(['diff', 'log', 'coverage', 'junit', 'html', 'json', 'screenshot', 'bundle_report']),\n  path: z.string(), // file path or URL\n  hash: z.string().optional(), // SHA256 for integrity\n  size: z.number().optional(), // bytes\n  metadata: z.record(z.any()).optional(),\n});\n\nexport type Artifact = z.infer<typeof ArtifactSchema>;\n\n// Tool calls made during transformation\nexport const ToolCallSchema = z.object({\n  id: z.string(),\n  name: z.string(),\n  timestamp: z.string().datetime(),\n  parameters: z.record(z.any()),\n  result: z.any().optional(),\n  error: z.string().optional(),\n  duration: z.number(), // milliseconds\n  coreProtectionCheck: z.boolean(), // was this call validated against core protection\n});\n\nexport type ToolCall = z.infer<typeof ToolCallSchema>;\n\n// Complete consequence record\nexport const ConsequenceRecordSchema = z.object({\n  transformation: TransformationSchema,\n  events: z.array(ObservationEventSchema),\n  guardrails: z.array(GuardrailResultSchema),\n  artifacts: z.array(ArtifactSchema),\n  toolCalls: z.array(ToolCallSchema),\n  summary: z.string(),\n  decision: z.enum(['proceed', 'fix_required', 'rollback', 'manual_review']),\n  coreIntegrityVerified: z.boolean(),\n  learningInsights: z.array(z.string()).optional(), // adaptive insights for learning layer\n  redactions: z.array(z.string()).optional(), // paths/patterns that were redacted\n  version: z.string().default('1.0'),\n});\n\nexport type ConsequenceRecord = z.infer<typeof ConsequenceRecordSchema>;\n\n// Core protection validation result\nexport const CoreProtectionResultSchema = z.object({\n  isValid: z.boolean(),\n  violations: z.array(z.object({\n    path: z.string(),\n    reason: z.string(),\n    severity: z.enum(['warning', 'error', 'critical']),\n  })),\n  protectedPaths: z.array(z.string()),\n  allowedPaths: z.array(z.string()),\n  timestamp: z.string().datetime(),\n});\n\nexport type CoreProtectionResult = z.infer<typeof CoreProtectionResultSchema>;\n\n// Learning layer adaptive strategy\nexport const AdaptiveStrategySchema = z.object({\n  id: z.string(),\n  name: z.string(),\n  category: z.enum(['code_generation', 'error_recovery', 'optimization', 'user_preference', 'context_adaptation']),\n  pattern: z.string(), // description of the pattern learned\n  confidence: z.number().min(0).max(1),\n  usageCount: z.number(),\n  successRate: z.number().min(0).max(1),\n  lastUsed: z.string().datetime(),\n  metadata: z.record(z.any()).optional(),\n});\n\nexport type AdaptiveStrategy = z.infer<typeof AdaptiveStrategySchema>;\n\n// Transformation recorder configuration\nexport const RecorderConfigSchema = z.object({\n  enableFileSystemSink: z.boolean().default(true),\n  enableSupabaseSink: z.boolean().default(false),\n  enableCoreProtection: z.boolean().default(true),\n  redactPatterns: z.array(z.string()).default(['.env*', '*secret*', '*key*', '*token*']),\n  protectedPaths: z.array(z.string()).default([\n    'src/types/{agent,conversation,credits,user-tiers}.ts',\n    'prisma/schema.prisma',\n    'middleware.ts',\n    'app/api/auth/**',\n    'components/ui/**',\n    'next.config.js',\n    'tailwind.config.js',\n    'tsconfig*.json',\n    '.github/workflows/**',\n    'lib/supabase/**',\n  ]),\n  learningPaths: z.array(z.string()).default([\n    'docs/patches/**',\n    'docs/batches/**',\n    'data/learning/**',\n    'config/adaptive/**',\n    'lib/learning/**',\n  ]),\n});\n\nexport type RecorderConfig = z.infer<typeof RecorderConfigSchema>;\n\n// Database schemas for Supabase persistence\nexport const TransformationRowSchema = z.object({\n  id: z.string(),\n  patch_id: z.number(),\n  batch_id: z.number().nullable(),\n  branch: z.string(),\n  author_id: z.string(),\n  created_at: z.string(),\n  categories: z.array(z.string()),\n  files_touched: z.array(z.string()),\n  git_stats: z.record(z.any()),\n  core_protection_status: z.string(),\n  summary: z.string(),\n  decision: z.string(),\n  core_integrity_verified: z.boolean(),\n});\n\nexport type TransformationRow = z.infer<typeof TransformationRowSchema>;\n\nexport const GuardrailRowSchema = z.object({\n  id: z.string(),\n  transformation_id: z.string(),\n  name: z.string(),\n  status: z.string(),\n  created_at: z.string(),\n  duration: z.number(),\n  metrics: z.record(z.any()),\n  exit_code: z.number().nullable(),\n});\n\nexport type GuardrailRow = z.infer<typeof GuardrailRowSchema>;\n\nexport const ArtifactRowSchema = z.object({\n  id: z.string(),\n  transformation_id: z.string(),\n  kind: z.string(),\n  path: z.string(),\n  hash: z.string().nullable(),\n  size: z.number().nullable(),\n  metadata: z.record(z.any()).nullable(),\n  created_at: z.string(),\n});\n\nexport type ArtifactRow = z.infer<typeof ArtifactRowSchema>;\n"],"names":["AdaptiveStrategySchema","ArtifactRowSchema","ArtifactSchema","ConsequenceRecordSchema","CoreProtectionResultSchema","GuardrailResultSchema","GuardrailRowSchema","ObservationEventSchema","RecorderConfigSchema","ToolCallSchema","TransformationRowSchema","TransformationSchema","z","object","id","string","patchId","number","batchId","optional","branch","authorId","timestamp","datetime","categories","array","enum","filesTouched","gitStats","sha","additions","deletions","changedFiles","coreProtectionStatus","name","severity","payload","record","any","category","status","duration","metrics","union","boolean","artifacts","exitCode","stdout","stderr","transformationId","kind","path","hash","size","metadata","parameters","result","error","coreProtectionCheck","transformation","events","guardrails","toolCalls","summary","decision","coreIntegrityVerified","learningInsights","redactions","version","default","isValid","violations","reason","protectedPaths","allowedPaths","pattern","confidence","min","max","usageCount","successRate","lastUsed","enableFileSystemSink","enableSupabaseSink","enableCoreProtection","redactPatterns","learningPaths","patch_id","batch_id","nullable","author_id","created_at","files_touched","git_stats","core_protection_status","core_integrity_verified","transformation_id","exit_code"],"mappings":"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"}