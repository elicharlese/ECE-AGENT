047a90c494dfd9342be765449a650b45
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    AdaptiveStrategySchema: function() {
        return AdaptiveStrategySchema;
    },
    ArtifactRowSchema: function() {
        return ArtifactRowSchema;
    },
    ArtifactSchema: function() {
        return ArtifactSchema;
    },
    ConsequenceRecordSchema: function() {
        return ConsequenceRecordSchema;
    },
    CoreProtectionResultSchema: function() {
        return CoreProtectionResultSchema;
    },
    GuardrailResultSchema: function() {
        return GuardrailResultSchema;
    },
    GuardrailRowSchema: function() {
        return GuardrailRowSchema;
    },
    ObservationEventSchema: function() {
        return ObservationEventSchema;
    },
    RecorderConfigSchema: function() {
        return RecorderConfigSchema;
    },
    ToolCallSchema: function() {
        return ToolCallSchema;
    },
    TransformationRowSchema: function() {
        return TransformationRowSchema;
    },
    TransformationSchema: function() {
        return TransformationSchema;
    }
});
const _zod = require("zod");
const TransformationSchema = _zod.z.object({
    id: _zod.z.string(),
    patchId: _zod.z.number(),
    batchId: _zod.z.number().optional(),
    branch: _zod.z.string(),
    authorId: _zod.z.string(),
    timestamp: _zod.z.string().datetime(),
    categories: _zod.z.array(_zod.z.enum([
        "code",
        "config",
        "database",
        "infrastructure",
        "docs"
    ])),
    filesTouched: _zod.z.array(_zod.z.string()),
    gitStats: _zod.z.object({
        sha: _zod.z.string(),
        additions: _zod.z.number(),
        deletions: _zod.z.number(),
        changedFiles: _zod.z.number()
    }),
    coreProtectionStatus: _zod.z.enum([
        "safe",
        "violation_detected",
        "violation_blocked"
    ])
});
const ObservationEventSchema = _zod.z.object({
    name: _zod.z.string(),
    timestamp: _zod.z.string().datetime(),
    severity: _zod.z.enum([
        "info",
        "warn",
        "error",
        "critical"
    ]),
    payload: _zod.z.record(_zod.z.any()),
    category: _zod.z.enum([
        "tool_call",
        "guardrail",
        "core_protection",
        "user_action",
        "system"
    ])
});
const GuardrailResultSchema = _zod.z.object({
    name: _zod.z.enum([
        "typecheck",
        "lint",
        "test",
        "build",
        "e2e",
        "coverage",
        "bundle_size",
        "db_health",
        "core_protection"
    ]),
    status: _zod.z.enum([
        "pass",
        "fail",
        "warn",
        "skip",
        "error"
    ]),
    timestamp: _zod.z.string().datetime(),
    duration: _zod.z.number(),
    metrics: _zod.z.record(_zod.z.union([
        _zod.z.string(),
        _zod.z.number(),
        _zod.z.boolean()
    ])),
    artifacts: _zod.z.array(_zod.z.string()),
    exitCode: _zod.z.number().optional(),
    stdout: _zod.z.string().optional(),
    stderr: _zod.z.string().optional()
});
const ArtifactSchema = _zod.z.object({
    id: _zod.z.string(),
    transformationId: _zod.z.string(),
    kind: _zod.z.enum([
        "diff",
        "log",
        "coverage",
        "junit",
        "html",
        "json",
        "screenshot",
        "bundle_report"
    ]),
    path: _zod.z.string(),
    hash: _zod.z.string().optional(),
    size: _zod.z.number().optional(),
    metadata: _zod.z.record(_zod.z.any()).optional()
});
const ToolCallSchema = _zod.z.object({
    id: _zod.z.string(),
    name: _zod.z.string(),
    timestamp: _zod.z.string().datetime(),
    parameters: _zod.z.record(_zod.z.any()),
    result: _zod.z.any().optional(),
    error: _zod.z.string().optional(),
    duration: _zod.z.number(),
    coreProtectionCheck: _zod.z.boolean()
});
const ConsequenceRecordSchema = _zod.z.object({
    transformation: TransformationSchema,
    events: _zod.z.array(ObservationEventSchema),
    guardrails: _zod.z.array(GuardrailResultSchema),
    artifacts: _zod.z.array(ArtifactSchema),
    toolCalls: _zod.z.array(ToolCallSchema),
    summary: _zod.z.string(),
    decision: _zod.z.enum([
        "proceed",
        "fix_required",
        "rollback",
        "manual_review"
    ]),
    coreIntegrityVerified: _zod.z.boolean(),
    learningInsights: _zod.z.array(_zod.z.string()).optional(),
    redactions: _zod.z.array(_zod.z.string()).optional(),
    version: _zod.z.string().default("1.0")
});
const CoreProtectionResultSchema = _zod.z.object({
    isValid: _zod.z.boolean(),
    violations: _zod.z.array(_zod.z.object({
        path: _zod.z.string(),
        reason: _zod.z.string(),
        severity: _zod.z.enum([
            "warning",
            "error",
            "critical"
        ])
    })),
    protectedPaths: _zod.z.array(_zod.z.string()),
    allowedPaths: _zod.z.array(_zod.z.string()),
    timestamp: _zod.z.string().datetime()
});
const AdaptiveStrategySchema = _zod.z.object({
    id: _zod.z.string(),
    name: _zod.z.string(),
    category: _zod.z.enum([
        "code_generation",
        "error_recovery",
        "optimization",
        "user_preference",
        "context_adaptation"
    ]),
    pattern: _zod.z.string(),
    confidence: _zod.z.number().min(0).max(1),
    usageCount: _zod.z.number(),
    successRate: _zod.z.number().min(0).max(1),
    lastUsed: _zod.z.string().datetime(),
    metadata: _zod.z.record(_zod.z.any()).optional()
});
const RecorderConfigSchema = _zod.z.object({
    enableFileSystemSink: _zod.z.boolean().default(true),
    enableSupabaseSink: _zod.z.boolean().default(false),
    enableCoreProtection: _zod.z.boolean().default(true),
    redactPatterns: _zod.z.array(_zod.z.string()).default([
        ".env*",
        "*secret*",
        "*key*",
        "*token*"
    ]),
    protectedPaths: _zod.z.array(_zod.z.string()).default([
        "src/types/{agent,conversation,credits,user-tiers}.ts",
        "prisma/schema.prisma",
        "middleware.ts",
        "app/api/auth/**",
        "components/ui/**",
        "next.config.js",
        "tailwind.config.js",
        "tsconfig*.json",
        ".github/workflows/**",
        "lib/supabase/**"
    ]),
    learningPaths: _zod.z.array(_zod.z.string()).default([
        "docs/patches/**",
        "docs/batches/**",
        "data/learning/**",
        "config/adaptive/**",
        "lib/learning/**"
    ])
});
const TransformationRowSchema = _zod.z.object({
    id: _zod.z.string(),
    patch_id: _zod.z.number(),
    batch_id: _zod.z.number().nullable(),
    branch: _zod.z.string(),
    author_id: _zod.z.string(),
    created_at: _zod.z.string(),
    categories: _zod.z.array(_zod.z.string()),
    files_touched: _zod.z.array(_zod.z.string()),
    git_stats: _zod.z.record(_zod.z.any()),
    core_protection_status: _zod.z.string(),
    summary: _zod.z.string(),
    decision: _zod.z.string(),
    core_integrity_verified: _zod.z.boolean()
});
const GuardrailRowSchema = _zod.z.object({
    id: _zod.z.string(),
    transformation_id: _zod.z.string(),
    name: _zod.z.string(),
    status: _zod.z.string(),
    created_at: _zod.z.string(),
    duration: _zod.z.number(),
    metrics: _zod.z.record(_zod.z.any()),
    exit_code: _zod.z.number().nullable()
});
const ArtifactRowSchema = _zod.z.object({
    id: _zod.z.string(),
    transformation_id: _zod.z.string(),
    kind: _zod.z.string(),
    path: _zod.z.string(),
    hash: _zod.z.string().nullable(),
    size: _zod.z.number().nullable(),
    metadata: _zod.z.record(_zod.z.any()).nullable(),
    created_at: _zod.z.string()
});

//# sourceMappingURL=data:application/json;base64,