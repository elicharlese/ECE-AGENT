9fb50ea5ba3708cf944dd5e1f106f0dc
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _gifpicker = require("../../components/chat/gif-picker");
const _testutils = require("../utils/test-utils");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Popover relies on layout; jsdom is fine with clicking the trigger to render content
describe("GifPicker", ()=>{
    beforeEach(()=>{
        jest.useFakeTimers();
    });
    afterEach(()=>{
        jest.useRealTimers();
    });
    test("loads trending on open, then switches category to Reactions", async ()=>{
        const onGifSelect = jest.fn();
        await (0, _testutils.renderWithAct)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_gifpicker.GifPicker, {
            onGifSelect: onGifSelect
        }));
        // Open the GIF picker popover
        _react1.fireEvent.click(_react1.screen.getByRole("button", {
            name: /open gif picker/i
        }));
        // Initial mount triggers loading
        expect(await _react1.screen.findByText(/loading gifs/i)).toBeInTheDocument();
        await (0, _react1.act)(async ()=>{
            jest.advanceTimersByTime(500);
        });
        // After initial load, some trending GIFs present (e.g., Happy Dance)
        expect(await _react1.screen.findByTitle("Happy Dance")).toBeInTheDocument();
        // Switch to Reactions category
        _react1.fireEvent.click(_react1.screen.getByRole("button", {
            name: /reactions/i
        }));
        // Should show loading again for category fetch
        expect(await _react1.screen.findByText(/loading gifs/i)).toBeInTheDocument();
        await (0, _react1.act)(async ()=>{
            jest.advanceTimersByTime(500);
        });
        // Reactions should include Thumbs Up, High Five, Mind Blown, Celebration
        expect(await _react1.screen.findByTitle("Thumbs Up")).toBeInTheDocument();
        expect(_react1.screen.getByTitle("High Five")).toBeInTheDocument();
        expect(_react1.screen.getByTitle("Mind Blown")).toBeInTheDocument();
        expect(_react1.screen.getByTitle("Celebration")).toBeInTheDocument();
        // A non-reaction like "Happy Dance" should generally be filtered out
        expect(_react1.screen.queryByTitle("Happy Dance")).not.toBeInTheDocument();
    });
    test("debounces search input (300ms) then loads results (500ms)", async ()=>{
        const onGifSelect = jest.fn();
        await (0, _testutils.renderWithAct)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_gifpicker.GifPicker, {
            onGifSelect: onGifSelect
        }));
        // Open
        _react1.fireEvent.click(_react1.screen.getByRole("button", {
            name: /open gif picker/i
        }));
        // Initial load
        expect(await _react1.screen.findByText(/loading gifs/i)).toBeInTheDocument();
        await (0, _testutils.advanceTimersBy)(500);
        // Type a query that should match "Laughing"
        const input = await _react1.screen.findByPlaceholderText(/search gifs/i);
        _react1.fireEvent.change(input, {
            target: {
                value: "laugh"
            }
        });
        // Before 300ms debounce, grid from initial load still present
        await (0, _testutils.advanceTimersBy)(299);
        expect(_react1.screen.getByTitle("Happy Dance")).toBeInTheDocument();
        // Cross debounce and also complete the simulated network delay
        await (0, _testutils.advanceTimersBy)(1) // complete 300ms debounce
        ;
        await (0, _testutils.advanceTimersBy)(500) // complete 500ms API delay
        ;
        // Expect matching GIF(s) for 'laugh'
        expect(await _react1.screen.findByTitle("Laughing")).toBeInTheDocument();
        // Common non-matching GIF should be gone
        expect(_react1.screen.queryByTitle("Thumbs Up")).not.toBeInTheDocument();
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9lbGljaGFybGVzZS9DYXNjYWRlUHJvamVjdHMvQUdFTlQvX190ZXN0c19fL2NvbXBvbmVudHMvR2lmUGlja2VyLnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7IHNjcmVlbiwgZmlyZUV2ZW50LCB3YWl0Rm9yLCBhY3QgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0J1xuaW1wb3J0IHsgR2lmUGlja2VyIH0gZnJvbSAnQC9jb21wb25lbnRzL2NoYXQvZ2lmLXBpY2tlcidcbmltcG9ydCB7IHJlbmRlcldpdGhBY3QsIGFkdmFuY2VUaW1lcnNCeSB9IGZyb20gJy4uL3V0aWxzL3Rlc3QtdXRpbHMnXG5cbi8vIFBvcG92ZXIgcmVsaWVzIG9uIGxheW91dDsganNkb20gaXMgZmluZSB3aXRoIGNsaWNraW5nIHRoZSB0cmlnZ2VyIHRvIHJlbmRlciBjb250ZW50XG5cbmRlc2NyaWJlKCdHaWZQaWNrZXInLCAoKSA9PiB7XG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIGplc3QudXNlRmFrZVRpbWVycygpXG4gIH0pXG5cbiAgYWZ0ZXJFYWNoKCgpID0+IHtcbiAgICBqZXN0LnVzZVJlYWxUaW1lcnMoKVxuICB9KVxuXG4gIHRlc3QoJ2xvYWRzIHRyZW5kaW5nIG9uIG9wZW4sIHRoZW4gc3dpdGNoZXMgY2F0ZWdvcnkgdG8gUmVhY3Rpb25zJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IG9uR2lmU2VsZWN0ID0gamVzdC5mbigpXG4gICAgYXdhaXQgcmVuZGVyV2l0aEFjdCg8R2lmUGlja2VyIG9uR2lmU2VsZWN0PXtvbkdpZlNlbGVjdH0gLz4pXG5cbiAgICAvLyBPcGVuIHRoZSBHSUYgcGlja2VyIHBvcG92ZXJcbiAgICBmaXJlRXZlbnQuY2xpY2soc2NyZWVuLmdldEJ5Um9sZSgnYnV0dG9uJywgeyBuYW1lOiAvb3BlbiBnaWYgcGlja2VyL2kgfSkpXG5cbiAgICAvLyBJbml0aWFsIG1vdW50IHRyaWdnZXJzIGxvYWRpbmdcbiAgICBleHBlY3QoYXdhaXQgc2NyZWVuLmZpbmRCeVRleHQoL2xvYWRpbmcgZ2lmcy9pKSkudG9CZUluVGhlRG9jdW1lbnQoKVxuICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICBqZXN0LmFkdmFuY2VUaW1lcnNCeVRpbWUoNTAwKVxuICAgIH0pXG5cbiAgICAvLyBBZnRlciBpbml0aWFsIGxvYWQsIHNvbWUgdHJlbmRpbmcgR0lGcyBwcmVzZW50IChlLmcuLCBIYXBweSBEYW5jZSlcbiAgICBleHBlY3QoYXdhaXQgc2NyZWVuLmZpbmRCeVRpdGxlKCdIYXBweSBEYW5jZScpKS50b0JlSW5UaGVEb2N1bWVudCgpXG5cbiAgICAvLyBTd2l0Y2ggdG8gUmVhY3Rpb25zIGNhdGVnb3J5XG4gICAgZmlyZUV2ZW50LmNsaWNrKHNjcmVlbi5nZXRCeVJvbGUoJ2J1dHRvbicsIHsgbmFtZTogL3JlYWN0aW9ucy9pIH0pKVxuXG4gICAgLy8gU2hvdWxkIHNob3cgbG9hZGluZyBhZ2FpbiBmb3IgY2F0ZWdvcnkgZmV0Y2hcbiAgICBleHBlY3QoYXdhaXQgc2NyZWVuLmZpbmRCeVRleHQoL2xvYWRpbmcgZ2lmcy9pKSkudG9CZUluVGhlRG9jdW1lbnQoKVxuICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICBqZXN0LmFkdmFuY2VUaW1lcnNCeVRpbWUoNTAwKVxuICAgIH0pXG5cbiAgICAvLyBSZWFjdGlvbnMgc2hvdWxkIGluY2x1ZGUgVGh1bWJzIFVwLCBIaWdoIEZpdmUsIE1pbmQgQmxvd24sIENlbGVicmF0aW9uXG4gICAgZXhwZWN0KGF3YWl0IHNjcmVlbi5maW5kQnlUaXRsZSgnVGh1bWJzIFVwJykpLnRvQmVJblRoZURvY3VtZW50KClcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGl0bGUoJ0hpZ2ggRml2ZScpKS50b0JlSW5UaGVEb2N1bWVudCgpXG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRpdGxlKCdNaW5kIEJsb3duJykpLnRvQmVJblRoZURvY3VtZW50KClcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGl0bGUoJ0NlbGVicmF0aW9uJykpLnRvQmVJblRoZURvY3VtZW50KClcblxuICAgIC8vIEEgbm9uLXJlYWN0aW9uIGxpa2UgXCJIYXBweSBEYW5jZVwiIHNob3VsZCBnZW5lcmFsbHkgYmUgZmlsdGVyZWQgb3V0XG4gICAgZXhwZWN0KHNjcmVlbi5xdWVyeUJ5VGl0bGUoJ0hhcHB5IERhbmNlJykpLm5vdC50b0JlSW5UaGVEb2N1bWVudCgpXG4gIH0pXG5cbiAgdGVzdCgnZGVib3VuY2VzIHNlYXJjaCBpbnB1dCAoMzAwbXMpIHRoZW4gbG9hZHMgcmVzdWx0cyAoNTAwbXMpJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IG9uR2lmU2VsZWN0ID0gamVzdC5mbigpXG4gICAgYXdhaXQgcmVuZGVyV2l0aEFjdCg8R2lmUGlja2VyIG9uR2lmU2VsZWN0PXtvbkdpZlNlbGVjdH0gLz4pXG5cbiAgICAvLyBPcGVuXG4gICAgZmlyZUV2ZW50LmNsaWNrKHNjcmVlbi5nZXRCeVJvbGUoJ2J1dHRvbicsIHsgbmFtZTogL29wZW4gZ2lmIHBpY2tlci9pIH0pKVxuXG4gICAgLy8gSW5pdGlhbCBsb2FkXG4gICAgZXhwZWN0KGF3YWl0IHNjcmVlbi5maW5kQnlUZXh0KC9sb2FkaW5nIGdpZnMvaSkpLnRvQmVJblRoZURvY3VtZW50KClcbiAgICBhd2FpdCBhZHZhbmNlVGltZXJzQnkoNTAwKVxuXG4gICAgLy8gVHlwZSBhIHF1ZXJ5IHRoYXQgc2hvdWxkIG1hdGNoIFwiTGF1Z2hpbmdcIlxuICAgIGNvbnN0IGlucHV0ID0gYXdhaXQgc2NyZWVuLmZpbmRCeVBsYWNlaG9sZGVyVGV4dCgvc2VhcmNoIGdpZnMvaSlcbiAgICBmaXJlRXZlbnQuY2hhbmdlKGlucHV0LCB7IHRhcmdldDogeyB2YWx1ZTogJ2xhdWdoJyB9IH0pXG5cbiAgICAvLyBCZWZvcmUgMzAwbXMgZGVib3VuY2UsIGdyaWQgZnJvbSBpbml0aWFsIGxvYWQgc3RpbGwgcHJlc2VudFxuICAgIGF3YWl0IGFkdmFuY2VUaW1lcnNCeSgyOTkpXG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRpdGxlKCdIYXBweSBEYW5jZScpKS50b0JlSW5UaGVEb2N1bWVudCgpXG5cbiAgICAvLyBDcm9zcyBkZWJvdW5jZSBhbmQgYWxzbyBjb21wbGV0ZSB0aGUgc2ltdWxhdGVkIG5ldHdvcmsgZGVsYXlcbiAgICBhd2FpdCBhZHZhbmNlVGltZXJzQnkoMSkgLy8gY29tcGxldGUgMzAwbXMgZGVib3VuY2VcbiAgICBhd2FpdCBhZHZhbmNlVGltZXJzQnkoNTAwKSAvLyBjb21wbGV0ZSA1MDBtcyBBUEkgZGVsYXlcblxuICAgIC8vIEV4cGVjdCBtYXRjaGluZyBHSUYocykgZm9yICdsYXVnaCdcbiAgICBleHBlY3QoYXdhaXQgc2NyZWVuLmZpbmRCeVRpdGxlKCdMYXVnaGluZycpKS50b0JlSW5UaGVEb2N1bWVudCgpXG5cbiAgICAvLyBDb21tb24gbm9uLW1hdGNoaW5nIEdJRiBzaG91bGQgYmUgZ29uZVxuICAgIGV4cGVjdChzY3JlZW4ucXVlcnlCeVRpdGxlKCdUaHVtYnMgVXAnKSkubm90LnRvQmVJblRoZURvY3VtZW50KClcbiAgfSlcbn0pXG4iXSwibmFtZXMiOlsiZGVzY3JpYmUiLCJiZWZvcmVFYWNoIiwiamVzdCIsInVzZUZha2VUaW1lcnMiLCJhZnRlckVhY2giLCJ1c2VSZWFsVGltZXJzIiwidGVzdCIsIm9uR2lmU2VsZWN0IiwiZm4iLCJyZW5kZXJXaXRoQWN0IiwiR2lmUGlja2VyIiwiZmlyZUV2ZW50IiwiY2xpY2siLCJzY3JlZW4iLCJnZXRCeVJvbGUiLCJuYW1lIiwiZXhwZWN0IiwiZmluZEJ5VGV4dCIsInRvQmVJblRoZURvY3VtZW50IiwiYWN0IiwiYWR2YW5jZVRpbWVyc0J5VGltZSIsImZpbmRCeVRpdGxlIiwiZ2V0QnlUaXRsZSIsInF1ZXJ5QnlUaXRsZSIsIm5vdCIsImFkdmFuY2VUaW1lcnNCeSIsImlucHV0IiwiZmluZEJ5UGxhY2Vob2xkZXJUZXh0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