{"version":3,"sources":["/Users/elicharlese/CascadeProjects/AGENT/components/calls/video-call-ui.tsx"],"sourcesContent":["\"use client\"\n\nimport { useState, useEffect, useRef, useCallback } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\nimport {\n  Video,\n  VideoOff,\n  Mic,\n  MicOff,\n  PhoneOff,\n  Maximize2,\n  Minimize2,\n  MessageCircle,\n  Users,\n  Settings,\n} from \"lucide-react\"\nimport { useHaptics } from \"@/hooks/use-haptics\"\nimport { useUser } from \"@/contexts/user-context\"\nimport { LiveKitRoom, VideoConference } from \"@livekit/components-react\"\n\ninterface VideoCallUIProps {\n  isOpen: boolean\n  onClose: () => void\n  contact: {\n    id: string\n    name: string\n    avatar?: string\n  }\n  callType: \"incoming\" | \"outgoing\"\n}\n\nexport function VideoCallUI({ isOpen, onClose, contact, callType }: VideoCallUIProps) {\n  const [callStatus, setCallStatus] = useState<\"connecting\" | \"ringing\" | \"connected\" | \"ended\">(\n    callType === \"incoming\" ? \"ringing\" : \"connecting\",\n  )\n  const [duration, setDuration] = useState(0)\n  const [isMuted, setIsMuted] = useState(false)\n  const [isVideoOff, setIsVideoOff] = useState(false)\n  const [isFullscreen, setIsFullscreen] = useState(false)\n  const [showControls, setShowControls] = useState(true)\n  const { triggerHaptic } = useHaptics()\n  const videoRef = useRef<HTMLVideoElement>(null)\n  const localVideoRef = useRef<HTMLVideoElement>(null)\n  const { user } = useUser()\n  const [lkToken, setLkToken] = useState<string | null>(null)\n  const [lkWsUrl, setLkWsUrl] = useState<string | null>(null)\n  const [lkLoading, setLkLoading] = useState(false)\n  const [lkError, setLkError] = useState<string | null>(null)\n  // Stable guest identity across this component's lifetime\n  const [guestId] = useState(() => `guest-${Math.random().toString(36).slice(2)}`)\n  const [roomConnected, setRoomConnected] = useState(false)\n\n  useEffect(() => {\n    if (callStatus === \"connected\") {\n      const timer = setInterval(() => {\n        setDuration((prev) => prev + 1)\n      }, 1000)\n      return () => clearInterval(timer)\n    }\n  }, [callStatus])\n\n  const joinCall = useCallback(async () => {\n    try {\n      setLkLoading(true)\n      setLkError(null)\n      const res = await fetch(\"/api/livekit/token\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          roomName: String(contact.id || \"default-room\"),\n          identity: user?.id || guestId,\n          metadata: { name: user?.email || \"Guest\" },\n          grants: { canPublish: true, canSubscribe: true, canPublishData: true },\n        }),\n      })\n      const data = await res.json()\n      if (!res.ok || !data?.token || !data?.wsUrl) {\n        throw new Error(data?.error || \"Failed to mint LiveKit token\")\n      }\n      setLkToken(data.token)\n      setLkWsUrl(data.wsUrl)\n      setCallStatus(\"connected\")\n      triggerHaptic(\"success\")\n    } catch (e: any) {\n      console.error(\"LiveKit join error\", e)\n      setLkError(e?.message || \"Failed to join LiveKit\")\n    } finally {\n      setLkLoading(false)\n    }\n  }, [contact.id, triggerHaptic, user?.email, user?.id])\n\n  useEffect(() => {\n    if (!isOpen) return\n    // Auto-join for outgoing calls when dialog opens\n    if (callType === \"outgoing\" && callStatus === \"connecting\") {\n      joinCall()\n    }\n  }, [isOpen, callType, callStatus, joinCall])\n\n  useEffect(() => {\n    // Auto-hide controls after 3 seconds\n    if (showControls && callStatus === \"connected\") {\n      const timer = setTimeout(() => {\n        setShowControls(false)\n      }, 3000)\n      return () => clearTimeout(timer)\n    }\n  }, [showControls, callStatus])\n\n  const formatDuration = (seconds: number) => {\n    const mins = Math.floor(seconds / 60)\n    const secs = seconds % 60\n    return `${mins.toString().padStart(2, \"0\")}:${secs.toString().padStart(2, \"0\")}`\n  }\n\n  const handleAnswer = () => {\n    setCallStatus(\"connecting\")\n    triggerHaptic(\"success\")\n    joinCall()\n  }\n\n  const handleDecline = () => {\n    setCallStatus(\"ended\")\n    triggerHaptic(\"error\")\n    setTimeout(onClose, 1000)\n  }\n\n  const handleEndCall = () => {\n    setCallStatus(\"ended\")\n    triggerHaptic(\"error\")\n    setTimeout(onClose, 1000)\n  }\n\n  const toggleMute = () => {\n    setIsMuted(!isMuted)\n    triggerHaptic(\"light\")\n  }\n\n  const toggleVideo = () => {\n    setIsVideoOff(!isVideoOff)\n    triggerHaptic(\"light\")\n  }\n\n  const toggleFullscreen = () => {\n    setIsFullscreen(!isFullscreen)\n    triggerHaptic(\"light\")\n  }\n\n  const getStatusText = () => {\n    switch (callStatus) {\n      case \"connecting\":\n        return \"Connecting...\"\n      case \"ringing\":\n        return \"Incoming video call\"\n      case \"connected\":\n        return formatDuration(duration)\n      case \"ended\":\n        return \"Call ended\"\n      default:\n        return \"\"\n    }\n  }\n\n  return (\n    <Dialog open={isOpen} onOpenChange={(open) => { if (!open) onClose() }}>\n      <DialogContent\n        className={`${\n          isFullscreen ? \"max-w-full h-full\" : \"max-w-4xl h-[600px]\"\n        } p-0 bg-black text-white border-none overflow-hidden`}\n      >\n        <div\n          className=\"relative w-full h-full flex flex-col\"\n          onClick={() => callStatus === \"connected\" && setShowControls(true)}\n        >\n          {/* Video Area */}\n          <div className=\"flex-1 relative bg-gray-900\">\n            {callStatus === \"connected\" ? (\n              <>\n                {lkError && (\n                  <div className=\"absolute top-4 left-1/2 -translate-x-1/2 bg-red-600 text-white px-3 py-2 rounded\">\n                    {lkError}\n                  </div>\n                )}\n                {lkLoading && (\n                  <div className=\"w-full h-full flex items-center justify-center\">\n                    <p className=\"text-gray-300\">Connecting to room...</p>\n                  </div>\n                )}\n                {!lkLoading && lkToken && lkWsUrl && (\n                  <LiveKitRoom\n                    key={lkToken}\n                    token={lkToken}\n                    serverUrl={lkWsUrl}\n                    data-lk-theme=\"default\"\n                    video={false}\n                    audio={false}\n                    onConnected={() => setRoomConnected(true)}\n                    onDisconnected={() => {\n                      setRoomConnected(false)\n                      onClose()\n                    }}\n                  >\n                    {roomConnected ? (\n                      <VideoConference />\n                    ) : (\n                      <div className=\"p-8 text-center text-sm text-gray-300\">Connectingâ€¦</div>\n                    )}\n                  </LiveKitRoom>\n                )}\n              </>\n            ) : (\n              /* Pre-call State */\n              <div className=\"w-full h-full flex flex-col items-center justify-center space-y-6\">\n                <Avatar className=\"h-32 w-32\">\n                  <AvatarImage src={contact.avatar || \"/placeholder.svg\"} />\n                  <AvatarFallback className=\"bg-gradient-to-br from-blue-500 to-purple-600 text-white text-2xl\">\n                    {contact.name\n                      .split(\" \")\n                      .map((n) => n[0])\n                      .join(\"\")}\n                  </AvatarFallback>\n                </Avatar>\n                <div className=\"text-center\">\n                  <h2 className=\"text-2xl font-semibold\">AGENT - {contact.name}</h2>\n                  <p className=\"text-gray-400 mt-2\">{getStatusText()}</p>\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Controls */}\n          <div\n            className={`absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/80 to-transparent p-6 transition-opacity duration-300 ${\n              showControls || callStatus !== \"connected\" ? \"opacity-100\" : \"opacity-0\"\n            }`}\n          >\n            <div className=\"flex items-center justify-center space-x-6\">\n              {callStatus === \"ringing\" && callType === \"incoming\" ? (\n                <>\n                  <Button\n                    variant=\"outline\"\n                    size=\"lg\"\n                    className=\"h-16 w-16 rounded-full bg-red-500 hover:bg-red-600 border-red-500 text-white\"\n                    onClick={handleDecline}\n                  >\n                    <PhoneOff className=\"h-6 w-6\" />\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    size=\"lg\"\n                    className=\"h-16 w-16 rounded-full bg-green-500 hover:bg-green-600 border-green-500 text-white\"\n                    onClick={handleAnswer}\n                  >\n                    <Video className=\"h-6 w-6\" />\n                  </Button>\n                </>\n              ) : callStatus === \"connecting\" ? (\n                <Button\n                  variant=\"outline\"\n                  size=\"lg\"\n                  className=\"h-16 w-16 rounded-full bg-red-500 hover:bg-red-600 border-red-500 text-white\"\n                  onClick={handleEndCall}\n                >\n                  <PhoneOff className=\"h-6 w-6\" />\n                </Button>\n              ) : null}\n            </div>\n\n            {/* Additional Controls */}\n            {callStatus === \"connected\" && null}\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  )\n}\n"],"names":["VideoCallUI","isOpen","onClose","contact","callType","callStatus","setCallStatus","useState","duration","setDuration","isMuted","setIsMuted","isVideoOff","setIsVideoOff","isFullscreen","setIsFullscreen","showControls","setShowControls","triggerHaptic","useHaptics","videoRef","useRef","localVideoRef","user","useUser","lkToken","setLkToken","lkWsUrl","setLkWsUrl","lkLoading","setLkLoading","lkError","setLkError","guestId","Math","random","toString","slice","roomConnected","setRoomConnected","useEffect","timer","setInterval","prev","clearInterval","joinCall","useCallback","res","fetch","method","headers","body","JSON","stringify","roomName","String","id","identity","metadata","name","email","grants","canPublish","canSubscribe","canPublishData","data","json","ok","token","wsUrl","Error","error","e","console","message","setTimeout","clearTimeout","formatDuration","seconds","mins","floor","secs","padStart","handleAnswer","handleDecline","handleEndCall","toggleMute","toggleVideo","toggleFullscreen","getStatusText","Dialog","open","onOpenChange","DialogContent","className","div","onClick","p","LiveKitRoom","serverUrl","data-lk-theme","video","audio","onConnected","onDisconnected","VideoConference","Avatar","AvatarImage","src","avatar","AvatarFallback","split","map","n","join","h2","Button","variant","size","PhoneOff","Video"],"mappings":"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"}