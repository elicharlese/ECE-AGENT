e939ba31968baccf6cb2eff65872de24
"use strict";
// Stub websocket hook to avoid network/auth during tests
jest.mock("@/hooks/use-websocket", ()=>({
        useWebSocket: ()=>({
                sendChatMessage: jest.fn(),
                joinConversation: jest.fn(),
                messages: []
            })
    }));
// Haptics no-op
jest.mock("@/hooks/use-haptics", ()=>({
        useHaptics: ()=>({
                triggerHaptic: ()=>{}
            })
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _userevent = /*#__PURE__*/ _interop_require_default(require("@testing-library/user-event"));
const _QuickChatMount = require("../../components/chat/QuickChatMount");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
describe("MiniChatWidget behavior via QuickChatMount", ()=>{
    test("Enter on minimized bar opens feed-only popout and hides bar", async ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_QuickChatMount.QuickChatMount, {}));
        const input = await _react1.screen.findByPlaceholderText(/ask anything/i);
        await _userevent.default.type(input, "help{enter}");
        // Popout header appears
        expect(await _react1.screen.findByText("Quick Chat")).toBeInTheDocument();
        // Minimized bar input disappears
        expect(_react1.screen.queryByPlaceholderText(/ask anything/i)).not.toBeInTheDocument();
        // The popout container width aligns to computeBarWidth
        const header = _react1.screen.getByText("Quick Chat");
        const container = header.closest("div[style]");
        expect(container).toBeTruthy();
        const expectedW = Math.min(720, (window.innerWidth || 1024) - 32);
        expect(container.style.width).toBe(`${expectedW}px`);
    });
    test("Header Close button minimizes back to bar", async ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_QuickChatMount.QuickChatMount, {}));
        // Open popout
        (0, _react1.fireEvent)(window, new Event("quickchat:popout"));
        const header = await _react1.screen.findByText("Quick Chat");
        // Click Close button (title="Close")
        const closeBtn = header.parentElement?.parentElement?.querySelector('button[title="Close"]');
        expect(closeBtn).toBeTruthy();
        await _userevent.default.click(closeBtn);
        // Popout hidden, bar visible
        await (0, _react1.waitFor)(()=>expect(_react1.screen.queryByText("Quick Chat")).not.toBeInTheDocument());
        expect(await _react1.screen.findByRole("search", {
            name: /quick chat/i
        })).toBeInTheDocument();
    });
    test("Hotkeys: ⌘Q/Ctrl+Q toggle popout; ⌘L focuses quick input when minimized", async ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_QuickChatMount.QuickChatMount, {}));
        // Initially minimized, bar visible
        const bar = await _react1.screen.findByRole("search", {
            name: /quick chat/i
        });
        expect(bar).toBeInTheDocument();
        // ⌘Q opens popout
        _react1.fireEvent.keyDown(window, {
            key: "q",
            code: "KeyQ",
            metaKey: true
        });
        await (0, _react1.waitFor)(()=>expect(_react1.screen.getByText("Quick Chat")).toBeInTheDocument());
        // Ctrl+Q minimizes back to bar
        _react1.fireEvent.keyDown(window, {
            key: "q",
            code: "KeyQ",
            ctrlKey: true
        });
        await (0, _react1.waitFor)(()=>expect(_react1.screen.queryByText("Quick Chat")).not.toBeInTheDocument());
        expect(await _react1.screen.findByRole("search", {
            name: /quick chat/i
        })).toBeInTheDocument();
        // ⌘L focuses the quick input
        const input = _react1.screen.getByLabelText("Ask anything");
        expect(input).toBeInTheDocument();
        _react1.fireEvent.keyDown(window, {
            key: "l",
            code: "KeyL",
            metaKey: true
        });
        await (0, _react1.waitFor)(()=>expect(input).toHaveFocus());
    });
    test("Drag/resize persists to localStorage and clamps within viewport", async ()=>{
        // Ensure predictable viewport
        const origInner = Object.getOwnPropertyDescriptor(window, "innerWidth");
        const origInnerH = Object.getOwnPropertyDescriptor(window, "innerHeight");
        Object.defineProperty(window, "innerWidth", {
            configurable: true,
            value: 1200
        });
        Object.defineProperty(window, "innerHeight", {
            configurable: true,
            value: 800
        });
        const { unmount } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_QuickChatMount.QuickChatMount, {}));
        // Open popout to enable drag/resize
        (0, _react1.fireEvent)(window, new Event("quickchat:popout"));
        const headerText = await _react1.screen.findByText("Quick Chat");
        const container = headerText.closest("div[style]");
        expect(container).toBeTruthy();
        // Drag: start at (300, 300) then move far negative to test clamping
        const headerEl = headerText.parentElement?.parentElement;
        _react1.fireEvent.mouseDown(headerEl, {
            clientX: 300,
            clientY: 300
        });
        _react1.fireEvent.mouseMove(window, {
            clientX: -1000,
            clientY: -1000
        });
        _react1.fireEvent.mouseUp(window);
        // Resize: grab handle and increase size
        const resizeHandle = container.querySelector('[class*="cursor-se-resize"]');
        expect(resizeHandle).toBeTruthy();
        const prevWidth = parseInt(container.style.width);
        const prevHeight = parseInt(container.style.height);
        _react1.fireEvent.mouseDown(resizeHandle, {
            clientX: 0,
            clientY: 0
        });
        _react1.fireEvent.mouseMove(window, {
            clientX: 200,
            clientY: 150
        });
        _react1.fireEvent.mouseUp(window);
        // Read persisted state
        const raw = window.localStorage.getItem("miniChatWidgetState");
        expect(raw).toBeTruthy();
        const persisted = JSON.parse(raw);
        expect(persisted.x).toBeGreaterThanOrEqual(0);
        expect(persisted.y).toBeGreaterThanOrEqual(0);
        expect(persisted.w).toBeGreaterThanOrEqual(prevWidth);
        expect(persisted.h).toBeGreaterThanOrEqual(prevHeight);
        // Also clamp within viewport bounds (x + w <= innerWidth, y + h <= innerHeight)
        expect(persisted.x + persisted.w).toBeLessThanOrEqual(1200);
        expect(persisted.y + persisted.h).toBeLessThanOrEqual(800);
        // Unmount and remount to verify persistence is used (minimized on mount by prop, but size persists)
        unmount();
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_QuickChatMount.QuickChatMount, {}));
        // Open again and verify size at least matches persisted
        (0, _react1.fireEvent)(window, new Event("quickchat:popout"));
        const header2 = await _react1.screen.findByText("Quick Chat");
        const container2 = header2.closest("div[style]");
        const w2 = parseInt(container2.style.width);
        const h2 = parseInt(container2.style.height);
        const viewportMaxW = Math.min(720, (window.innerWidth || 1024) - 32);
        // On apply, width should be clamped to viewportMaxW and not exceed persisted
        expect(w2).toBeLessThanOrEqual(persisted.w);
        expect(w2).toBeLessThanOrEqual(viewportMaxW);
        // Height should be within viewport bounds
        expect(h2).toBeLessThanOrEqual(window.innerHeight);
        // Restore viewport descriptors
        if (origInner) Object.defineProperty(window, "innerWidth", origInner);
        if (origInnerH) Object.defineProperty(window, "innerHeight", origInnerH);
    });
    test("CustomEvents control popout/minimize/toggle-popout", async ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_QuickChatMount.QuickChatMount, {}));
        // Initially minimized bar
        expect(await _react1.screen.findByRole("search", {
            name: /quick chat/i
        })).toBeInTheDocument();
        // Popout event
        (0, _react1.fireEvent)(window, new Event("quickchat:popout"));
        await (0, _react1.waitFor)(()=>expect(_react1.screen.getByText("Quick Chat")).toBeInTheDocument());
        // Minimize event
        (0, _react1.fireEvent)(window, new Event("quickchat:minimize"));
        await (0, _react1.waitFor)(()=>expect(_react1.screen.queryByText("Quick Chat")).not.toBeInTheDocument());
        expect(_react1.screen.getByRole("search", {
            name: /quick chat/i
        })).toBeInTheDocument();
        // Toggle-popout event: should open
        (0, _react1.fireEvent)(window, new Event("quickchat:toggle-popout"));
        await (0, _react1.waitFor)(()=>expect(_react1.screen.getByText("Quick Chat")).toBeInTheDocument());
        // Ensure API is present and functional
        const qc = window.quickChat;
        expect(typeof qc.popout).toBe("function");
        expect(typeof qc.minimize).toBe("function");
        expect(typeof qc.togglePopout).toBe("function");
    });
    test("Popout width updates on window resize to match bar width", async ()=>{
        const originalDesc = Object.getOwnPropertyDescriptor(window, "innerWidth");
        Object.defineProperty(window, "innerWidth", {
            configurable: true,
            value: 1000
        });
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_QuickChatMount.QuickChatMount, {}));
        // Open popout
        (0, _react1.fireEvent)(window, new Event("quickchat:popout"));
        const header = await _react1.screen.findByText("Quick Chat");
        let container = header.closest("div[style]");
        expect(container.style.width).toBe(`${Math.min(720, 1000 - 32)}px`);
        // Shrink viewport and dispatch resize
        Object.defineProperty(window, "innerWidth", {
            configurable: true,
            value: 400
        });
        (0, _react1.fireEvent)(window, new Event("resize"));
        await (0, _react1.waitFor)(()=>{
            container = header.closest("div[style]");
            expect(container.style.width).toBe(`${Math.min(720, 400 - 32)}px`);
        });
        if (originalDesc) {
            Object.defineProperty(window, "innerWidth", originalDesc);
        }
    });
});

//# sourceMappingURL=data:application/json;base64,