{"version":3,"sources":["/Users/elicharlese/CascadeProjects/AGENT/components/calls/phone-call-ui.tsx"],"sourcesContent":["\"use client\"\n\nimport { useState, useEffect, useCallback } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\nimport { Phone, PhoneOff, Mic, MicOff, Volume2, VolumeX, MessageCircle, UserPlus } from \"lucide-react\"\nimport { useHaptics } from \"@/hooks/use-haptics\"\nimport { useUser } from \"@/contexts/user-context\"\nimport dynamic from \"next/dynamic\"\n\n// Lazy-load LiveKit only when a call connects\nconst LiveKitRoom = dynamic(() => import(\"@livekit/components-react\").then(m => m.LiveKitRoom), { ssr: false })\nconst AudioConference = dynamic(() => import(\"@livekit/components-react\").then(m => m.AudioConference), {\n  ssr: false,\n  loading: () => <div className=\"p-4 text-center text-sm text-gray-300\">Connecting…</div>\n})\n\ninterface PhoneCallUIProps {\n  isOpen: boolean\n  onClose: () => void\n  contact: {\n    id: string\n    name: string\n    phone?: string\n    avatar?: string\n  }\n  callType: \"incoming\" | \"outgoing\"\n}\n\nexport function PhoneCallUI({ isOpen, onClose, contact, callType }: PhoneCallUIProps) {\n  const [callStatus, setCallStatus] = useState<\"connecting\" | \"ringing\" | \"connected\" | \"ended\">(\n    callType === \"incoming\" ? \"ringing\" : \"connecting\",\n  )\n  const [duration, setDuration] = useState(0)\n  const [isMuted, setIsMuted] = useState(false)\n  const [isSpeaker, setIsSpeaker] = useState(false)\n  const { triggerHaptic } = useHaptics()\n  const { user } = useUser()\n  const [lkToken, setLkToken] = useState<string | null>(null)\n  const [lkWsUrl, setLkWsUrl] = useState<string | null>(null)\n  const [lkLoading, setLkLoading] = useState(false)\n  const [lkError, setLkError] = useState<string | null>(null)\n  // Stable guest identity across this component's lifetime\n  const [guestId] = useState(() => `guest-${Math.random().toString(36).slice(2)}`)\n  const [roomConnected, setRoomConnected] = useState(false)\n\n  useEffect(() => {\n    if (callStatus === \"connected\") {\n      const timer = setInterval(() => {\n        setDuration((prev) => prev + 1)\n      }, 1000)\n      return () => clearInterval(timer)\n    }\n  }, [callStatus])\n\n  const joinCall = useCallback(async () => {\n    try {\n      setLkLoading(true)\n      setLkError(null)\n      const res = await fetch(\"/api/livekit/token\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          roomName: String(contact.id || \"default-room\"),\n          identity: user?.id || guestId,\n          metadata: { name: user?.email || \"Guest\" },\n          grants: { canPublish: true, canSubscribe: true, canPublishData: true },\n        }),\n      })\n      const data = await res.json()\n      if (!res.ok || !data?.token || !data?.wsUrl) {\n        throw new Error(data?.error || \"Failed to mint LiveKit token\")\n      }\n      setLkToken(data.token)\n      setLkWsUrl(data.wsUrl)\n      setCallStatus(\"connected\")\n      triggerHaptic(\"success\")\n    } catch (e: any) {\n      console.error(\"LiveKit join error\", e)\n      setLkError(e?.message || \"Failed to join LiveKit\")\n    } finally {\n      setLkLoading(false)\n    }\n  }, [contact.id, triggerHaptic, user?.email, user?.id])\n\n  useEffect(() => {\n    if (!isOpen) return\n    if (callType === \"outgoing\" && callStatus === \"connecting\") {\n      joinCall()\n    }\n  }, [isOpen, callType, callStatus, joinCall])\n\n  const formatDuration = (seconds: number) => {\n    const mins = Math.floor(seconds / 60)\n    const secs = seconds % 60\n    return `${mins.toString().padStart(2, \"0\")}:${secs.toString().padStart(2, \"0\")}`\n  }\n\n  const handleAnswer = () => {\n    setCallStatus(\"connecting\")\n    triggerHaptic(\"success\")\n    joinCall()\n  }\n\n  const handleDecline = () => {\n    setCallStatus(\"ended\")\n    triggerHaptic(\"error\")\n    setTimeout(onClose, 1000)\n  }\n\n  const handleEndCall = () => {\n    setCallStatus(\"ended\")\n    triggerHaptic(\"error\")\n    setTimeout(onClose, 1000)\n  }\n\n  const toggleMute = () => {\n    setIsMuted(!isMuted)\n    triggerHaptic(\"light\")\n  }\n\n  const toggleSpeaker = () => {\n    setIsSpeaker(!isSpeaker)\n    triggerHaptic(\"light\")\n  }\n\n  const getStatusText = () => {\n    switch (callStatus) {\n      case \"connecting\":\n        return \"Connecting...\"\n      case \"ringing\":\n        return \"Incoming call\"\n      case \"connected\":\n        return formatDuration(duration)\n      case \"ended\":\n        return \"Call ended\"\n      default:\n        return \"\"\n    }\n  }\n\n  return (\n    <Dialog open={isOpen} onOpenChange={(open) => { if (!open) onClose() }}>\n      <DialogContent className=\"max-w-sm mx-auto bg-gradient-to-b from-gray-900 to-black text-white border-none\">\n        <div className=\"flex flex-col items-center space-y-8 py-8\">\n          {/* Contact Info */}\n          <div className=\"text-center space-y-4\">\n            <Avatar className=\"h-32 w-32 mx-auto\">\n              <AvatarImage src={contact.avatar || \"/placeholder.svg\"} />\n              <AvatarFallback className=\"bg-gradient-to-br from-blue-500 to-purple-600 text-white text-2xl\">\n                {contact.name\n                  .split(\" \")\n                  .map((n) => n[0])\n                  .join(\"\")}\n              </AvatarFallback>\n            </Avatar>\n            <div>\n              <h2 className=\"text-2xl font-semibold\">AGENT - {contact.name}</h2>\n              {contact.phone && <p className=\"text-gray-300\">{contact.phone}</p>}\n              <p className=\"text-gray-400 mt-2\">{getStatusText()}</p>\n              {lkError && (\n                <p className=\"text-red-400 text-sm mt-2\">{lkError}</p>\n              )}\n            </div>\n          </div>\n\n          {/* Call Controls */}\n          <div className=\"flex items-center justify-center space-x-6\">\n            {callStatus === \"ringing\" && callType === \"incoming\" ? (\n              <>\n                {/* Incoming Call Controls */}\n                <Button\n                  variant=\"outline\"\n                  size=\"lg\"\n                  className=\"h-16 w-16 rounded-full bg-red-500 hover:bg-red-600 border-red-500 text-white\"\n                  onClick={handleDecline}\n                >\n                  <PhoneOff className=\"h-6 w-6\" />\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  size=\"lg\"\n                  className=\"h-16 w-16 rounded-full bg-green-500 hover:bg-green-600 border-green-500 text-white\"\n                  onClick={handleAnswer}\n                >\n                  <Phone className=\"h-6 w-6\" />\n                </Button>\n              </>\n            ) : callStatus === \"connecting\" ? (\n              <Button\n                variant=\"outline\"\n                size=\"lg\"\n                className=\"h-16 w-16 rounded-full bg-red-500 hover:bg-red-600 border-red-500 text-white\"\n                onClick={handleEndCall}\n              >\n                <PhoneOff className=\"h-6 w-6\" />\n              </Button>\n            ) : null}\n          </div>\n\n          {/* Additional Actions (for connected calls) */}\n          {callStatus === \"connected\" && lkToken && lkWsUrl && (\n            <div className=\"w-full\">\n              <LiveKitRoom\n                key={lkToken}\n                token={lkToken}\n                serverUrl={lkWsUrl}\n                data-lk-theme=\"default\"\n                video={false}\n                audio={false}\n                onConnected={() => setRoomConnected(true)}\n                onDisconnected={() => {\n                  setRoomConnected(false)\n                  onClose()\n                }}\n              >\n                {roomConnected ? (\n                  <AudioConference />\n                ) : (\n                  <div className=\"p-4 text-center text-sm text-gray-300\">Connecting…</div>\n                )}\n              </LiveKitRoom>\n            </div>\n          )}\n        </div>\n      </DialogContent>\n    </Dialog>\n  )\n}\n"],"names":["PhoneCallUI","LiveKitRoom","dynamic","then","m","ssr","AudioConference","loading","div","className","isOpen","onClose","contact","callType","callStatus","setCallStatus","useState","duration","setDuration","isMuted","setIsMuted","isSpeaker","setIsSpeaker","triggerHaptic","useHaptics","user","useUser","lkToken","setLkToken","lkWsUrl","setLkWsUrl","lkLoading","setLkLoading","lkError","setLkError","guestId","Math","random","toString","slice","roomConnected","setRoomConnected","useEffect","timer","setInterval","prev","clearInterval","joinCall","useCallback","res","fetch","method","headers","body","JSON","stringify","roomName","String","id","identity","metadata","name","email","grants","canPublish","canSubscribe","canPublishData","data","json","ok","token","wsUrl","Error","error","e","console","message","formatDuration","seconds","mins","floor","secs","padStart","handleAnswer","handleDecline","setTimeout","handleEndCall","toggleMute","toggleSpeaker","getStatusText","Dialog","open","onOpenChange","DialogContent","Avatar","AvatarImage","src","avatar","AvatarFallback","split","map","n","join","h2","phone","p","Button","variant","size","onClick","PhoneOff","Phone","serverUrl","data-lk-theme","video","audio","onConnected","onDisconnected"],"mappings":"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"}