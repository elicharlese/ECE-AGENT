7f82a6e5e0343bd39d0ca3d6543a128f
"use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "PhoneCallUI", {
    enumerable: true,
    get: function() {
        return PhoneCallUI;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _button = require("../ui/button");
const _avatar = require("../ui/avatar");
const _dialog = require("../ui/dialog");
const _lucidereact = require("lucide-react");
const _usehaptics = require("../../hooks/use-haptics");
const _usercontext = require("../../contexts/user-context");
const _dynamic = /*#__PURE__*/ _interop_require_default(require("next/dynamic"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
// Lazy-load LiveKit only when a call connects
const LiveKitRoom = (0, _dynamic.default)(()=>Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("@livekit/components-react"))).then((m)=>m.LiveKitRoom), {
    loadableGenerated: {
        webpack: ()=>[
                require.resolveWeak("@livekit/components-react")
            ]
    },
    ssr: false
});
const AudioConference = (0, _dynamic.default)(()=>Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("@livekit/components-react"))).then((m)=>m.AudioConference), {
    loadableGenerated: {
        webpack: ()=>[
                require.resolveWeak("@livekit/components-react")
            ]
    },
    ssr: false,
    loading: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
            className: "p-4 text-center text-sm text-gray-300",
            children: "Connectingâ€¦"
        })
});
function PhoneCallUI({ isOpen, onClose, contact, callType }) {
    const [callStatus, setCallStatus] = (0, _react.useState)(callType === "incoming" ? "ringing" : "connecting");
    const [duration, setDuration] = (0, _react.useState)(0);
    const [isMuted, setIsMuted] = (0, _react.useState)(false);
    const [isSpeaker, setIsSpeaker] = (0, _react.useState)(false);
    const { triggerHaptic } = (0, _usehaptics.useHaptics)();
    const { user } = (0, _usercontext.useUser)();
    const [lkToken, setLkToken] = (0, _react.useState)(null);
    const [lkWsUrl, setLkWsUrl] = (0, _react.useState)(null);
    const [lkLoading, setLkLoading] = (0, _react.useState)(false);
    const [lkError, setLkError] = (0, _react.useState)(null);
    // Stable guest identity across this component's lifetime
    const [guestId] = (0, _react.useState)(()=>`guest-${Math.random().toString(36).slice(2)}`);
    const [roomConnected, setRoomConnected] = (0, _react.useState)(false);
    (0, _react.useEffect)(()=>{
        if (callStatus === "connected") {
            const timer = setInterval(()=>{
                setDuration((prev)=>prev + 1);
            }, 1000);
            return ()=>clearInterval(timer);
        }
    }, [
        callStatus
    ]);
    const joinCall = (0, _react.useCallback)(async ()=>{
        try {
            setLkLoading(true);
            setLkError(null);
            const res = await fetch("/api/livekit/token", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({
                    roomName: String(contact.id || "default-room"),
                    identity: user?.id || guestId,
                    metadata: {
                        name: user?.email || "Guest"
                    },
                    grants: {
                        canPublish: true,
                        canSubscribe: true,
                        canPublishData: true
                    }
                })
            });
            const data = await res.json();
            if (!res.ok || !data?.token || !data?.wsUrl) {
                throw new Error(data?.error || "Failed to mint LiveKit token");
            }
            setLkToken(data.token);
            setLkWsUrl(data.wsUrl);
            setCallStatus("connected");
            triggerHaptic("success");
        } catch (e) {
            console.error("LiveKit join error", e);
            setLkError(e?.message || "Failed to join LiveKit");
        } finally{
            setLkLoading(false);
        }
    }, [
        contact.id,
        triggerHaptic,
        user?.email,
        user?.id
    ]);
    (0, _react.useEffect)(()=>{
        if (!isOpen) return;
        if (callType === "outgoing" && callStatus === "connecting") {
            joinCall();
        }
    }, [
        isOpen,
        callType,
        callStatus,
        joinCall
    ]);
    const formatDuration = (seconds)=>{
        const mins = Math.floor(seconds / 60);
        const secs = seconds % 60;
        return `${mins.toString().padStart(2, "0")}:${secs.toString().padStart(2, "0")}`;
    };
    const handleAnswer = ()=>{
        setCallStatus("connecting");
        triggerHaptic("success");
        joinCall();
    };
    const handleDecline = ()=>{
        setCallStatus("ended");
        triggerHaptic("error");
        setTimeout(onClose, 1000);
    };
    const handleEndCall = ()=>{
        setCallStatus("ended");
        triggerHaptic("error");
        setTimeout(onClose, 1000);
    };
    const toggleMute = ()=>{
        setIsMuted(!isMuted);
        triggerHaptic("light");
    };
    const toggleSpeaker = ()=>{
        setIsSpeaker(!isSpeaker);
        triggerHaptic("light");
    };
    const getStatusText = ()=>{
        switch(callStatus){
            case "connecting":
                return "Connecting...";
            case "ringing":
                return "Incoming call";
            case "connected":
                return formatDuration(duration);
            case "ended":
                return "Call ended";
            default:
                return "";
        }
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_dialog.Dialog, {
        open: isOpen,
        onOpenChange: (open)=>{
            if (!open) onClose();
        },
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_dialog.DialogContent, {
            className: "max-w-sm mx-auto bg-gradient-to-b from-gray-900 to-black text-white border-none",
            children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                className: "flex flex-col items-center space-y-8 py-8",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: "text-center space-y-4",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_avatar.Avatar, {
                                className: "h-32 w-32 mx-auto",
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_avatar.AvatarImage, {
                                        src: contact.avatar || "/placeholder.svg"
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_avatar.AvatarFallback, {
                                        className: "bg-gradient-to-br from-blue-500 to-purple-600 text-white text-2xl",
                                        children: contact.name.split(" ").map((n)=>n[0]).join("")
                                    })
                                ]
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("h2", {
                                        className: "text-2xl font-semibold",
                                        children: [
                                            "AGENT - ",
                                            contact.name
                                        ]
                                    }),
                                    contact.phone && /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                                        className: "text-gray-300",
                                        children: contact.phone
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                                        className: "text-gray-400 mt-2",
                                        children: getStatusText()
                                    }),
                                    lkError && /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                                        className: "text-red-400 text-sm mt-2",
                                        children: lkError
                                    })
                                ]
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        className: "flex items-center justify-center space-x-6",
                        children: callStatus === "ringing" && callType === "incoming" ? /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                                    variant: "outline",
                                    size: "lg",
                                    className: "h-16 w-16 rounded-full bg-red-500 hover:bg-red-600 border-red-500 text-white",
                                    onClick: handleDecline,
                                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.PhoneOff, {
                                        className: "h-6 w-6"
                                    })
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                                    variant: "outline",
                                    size: "lg",
                                    className: "h-16 w-16 rounded-full bg-green-500 hover:bg-green-600 border-green-500 text-white",
                                    onClick: handleAnswer,
                                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Phone, {
                                        className: "h-6 w-6"
                                    })
                                })
                            ]
                        }) : callStatus === "connecting" ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                            variant: "outline",
                            size: "lg",
                            className: "h-16 w-16 rounded-full bg-red-500 hover:bg-red-600 border-red-500 text-white",
                            onClick: handleEndCall,
                            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.PhoneOff, {
                                className: "h-6 w-6"
                            })
                        }) : null
                    }),
                    callStatus === "connected" && lkToken && lkWsUrl && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        className: "w-full",
                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(LiveKitRoom, {
                            token: lkToken,
                            serverUrl: lkWsUrl,
                            "data-lk-theme": "default",
                            video: false,
                            audio: false,
                            onConnected: ()=>setRoomConnected(true),
                            onDisconnected: ()=>{
                                setRoomConnected(false);
                                onClose();
                            },
                            children: roomConnected ? /*#__PURE__*/ (0, _jsxruntime.jsx)(AudioConference, {}) : /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                className: "p-4 text-center text-sm text-gray-300",
                                children: "Connectingâ€¦"
                            })
                        }, lkToken)
                    })
                ]
            })
        })
    });
}

//# sourceMappingURL=data:application/json;base64,