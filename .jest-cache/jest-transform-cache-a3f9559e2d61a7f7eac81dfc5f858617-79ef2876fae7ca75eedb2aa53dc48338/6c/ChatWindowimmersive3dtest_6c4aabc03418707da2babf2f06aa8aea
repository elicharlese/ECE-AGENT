6a609d17d3e6d5ac8a9a64835f725332
"use strict";
// Stub out next/dynamic heavy components
jest.mock("next/dynamic", ()=>()=>(props)=>null);
// Mock Next.js navigation
jest.mock("next/navigation", ()=>({
        useRouter: ()=>({
                push: jest.fn(),
                replace: jest.fn(),
                prefetch: jest.fn(),
                back: jest.fn()
            }),
        usePathname: ()=>"/messages",
        useSearchParams: ()=>({
                get: ()=>null
            })
    }));
jest.mock("@/hooks/use-mobile", ()=>({
        useIsMobile: ()=>mockUseIsMobile()
    }));
// WebSocket hook mock
jest.mock("@/hooks/use-websocket", ()=>({
        useWebSocket: ()=>({
                isConnected: true,
                messages: [],
                typingUsers: {},
                joinConversation: jest.fn(),
                sendChatMessage: jest.fn(),
                sendTyping: jest.fn(),
                sendEditMessage: jest.fn()
            })
    }));
// Conversations hook mock
jest.mock("@/hooks/use-conversations", ()=>({
        useConversations: ()=>({
                conversations: [
                    {
                        id: "abc",
                        title: "Test Conversation",
                        created_at: "",
                        updated_at: "",
                        user_id: "user-1"
                    }
                ],
                loading: false,
                error: null,
                inviteParticipants: jest.fn()
            })
    }));
// Supabase client mock (auth + participant count)
jest.mock("@/lib/supabase/client", ()=>{
    const supabase = {
        auth: {
            getUser: async ()=>({
                    data: {
                        user: {
                            id: "me"
                        }
                    }
                })
        },
        from: (_table)=>({
                select: (_sel, _opts)=>({
                        eq: (_col, _val)=>Promise.resolve({
                                count: 1
                            })
                    })
            })
    };
    return {
        supabase
    };
});
jest.mock("@/services/message-service", ()=>({
        messageService: {
            getMessages: (...args)=>getMessagesMock(...args),
            updateMessage: jest.fn(async ()=>({}))
        }
    }));
jest.mock("@/lib/feature-flags", ()=>({
        FEATURES: {
            IMMERSIVE_CHAT: "immersive_chat"
        },
        isFeatureEnabled: (feature)=>isFeatureEnabledMock(feature)
    }));
jest.mock("@/lib/analytics", ()=>({
        trackEvent: (...args)=>trackEventMock(...args)
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _testutils = require("../utils/test-utils");
const _chatwindow = require("../../components/chat/chat-window");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Controllable mobile hook
const mockUseIsMobile = jest.fn(()=>false);
// Message service mock (empty initial list to keep UI simple)
const getMessagesMock = jest.fn();
// Feature flag + analytics mocks
const isFeatureEnabledMock = jest.fn();
const trackEventMock = jest.fn(async ()=>{});
const baseProps = {
    chatId: "abc",
    onToggleSidebar: ()=>{},
    sidebarCollapsed: false
};
beforeEach(()=>{
    jest.clearAllMocks();
    localStorage.clear();
    mockUseIsMobile.mockReturnValue(false);
    isFeatureEnabledMock.mockImplementation((f)=>f === "immersive_chat" ? true : false);
    getMessagesMock.mockResolvedValue([]);
});
describe("ChatWindow immersive 3D headset view", ()=>{
    test("toggle button is hidden when feature flag disabled", async ()=>{
        isFeatureEnabledMock.mockImplementation(()=>false) // disable for all calls in this test
        ;
        await (0, _testutils.renderWithAct)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_chatwindow.ChatWindow, {
            ...baseProps
        }));
        expect(_react1.screen.queryByRole("button", {
            name: /enter 3d headset view/i
        })).not.toBeInTheDocument();
    });
    test("desktop-only: button visible on desktop and toggles 3D view + analytics + persistence", async ()=>{
        // desktop
        mockUseIsMobile.mockReturnValue(false);
        await (0, _testutils.renderWithAct)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_chatwindow.ChatWindow, {
            ...baseProps
        }));
        // Initially, input is visible and 3D region is not
        expect(await _react1.screen.findByLabelText(/message input/i)).toBeInTheDocument();
        expect(_react1.screen.queryByRole("region", {
            name: /3d headset chat space/i
        })).not.toBeInTheDocument();
        const toggleBtn = _react1.screen.getByRole("button", {
            name: /enter 3d headset view/i
        });
        _react1.fireEvent.click(toggleBtn);
        // After toggle ON: input hidden, 3D region visible, aria label updates, analytics fired, localStorage set
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByRole("region", {
                name: /3d headset chat space/i
            })).toBeInTheDocument();
        });
        expect(_react1.screen.queryByLabelText(/message input/i)).not.toBeInTheDocument();
        expect(_react1.screen.getByRole("button", {
            name: /exit 3d headset view/i
        })).toBeInTheDocument();
        await (0, _react1.waitFor)(()=>{
            expect(trackEventMock).toHaveBeenCalledWith({
                name: "immersive_chat_toggle",
                properties: {
                    chatId: "abc",
                    enabled: true
                }
            });
        });
        expect(localStorage.getItem("chat_immersive_3d_abc")).toBe("1");
        // Toggle OFF
        _react1.fireEvent.click(_react1.screen.getByRole("button", {
            name: /exit 3d headset view/i
        }));
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.queryByRole("region", {
                name: /3d headset chat space/i
            })).not.toBeInTheDocument();
        });
        expect(_react1.screen.getByLabelText(/message input/i)).toBeInTheDocument();
        expect(localStorage.getItem("chat_immersive_3d_abc")).toBe("0");
    });
    test("restores persisted state per chat on mount (desktop)", async ()=>{
        mockUseIsMobile.mockReturnValue(false);
        localStorage.setItem("chat_immersive_3d_abc", "1");
        await (0, _testutils.renderWithAct)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_chatwindow.ChatWindow, {
            ...baseProps
        }));
        // Restored to ON: 3D region present, input hidden, header shows Exit label
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByRole("region", {
                name: /3d headset chat space/i
            })).toBeInTheDocument();
        });
        expect(_react1.screen.queryByLabelText(/message input/i)).not.toBeInTheDocument();
        expect(_react1.screen.getByRole("button", {
            name: /exit 3d headset view/i
        })).toBeInTheDocument();
    });
    test("mobile disables 3D view and hides the toggle button even if persisted", async ()=>{
        // Simulate previously enabled state
        localStorage.setItem("chat_immersive_3d_abc", "1");
        // Mobile
        mockUseIsMobile.mockReturnValue(true);
        await (0, _testutils.renderWithAct)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_chatwindow.ChatWindow, {
            ...baseProps
        }));
        // No toggle button rendered
        expect(_react1.screen.queryByRole("button", {
            name: /3d headset/i
        })).not.toBeInTheDocument();
        // 3D view not shown; input is present
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.queryByRole("region", {
                name: /3d headset chat space/i
            })).not.toBeInTheDocument();
        });
        expect(_react1.screen.queryByLabelText(/message input/i)).not.toBeInTheDocument() // mobile input has no aria-label
        ;
    });
});

//# sourceMappingURL=data:application/json;base64,