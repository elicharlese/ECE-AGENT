{"version":3,"sources":["/Users/elicharlese/CascadeProjects/AGENT/__tests__/components/ChatWindow.immersive-3d.test.tsx"],"sourcesContent":["import React from 'react'\nimport { screen, fireEvent, waitFor } from '@testing-library/react'\nimport { renderWithAct } from '../utils/test-utils'\n\n// Stub out next/dynamic heavy components\njest.mock('next/dynamic', () => () => (props: any) => null)\n\n// Mock Next.js navigation\njest.mock('next/navigation', () => ({\n  useRouter: () => ({ push: jest.fn(), replace: jest.fn(), prefetch: jest.fn(), back: jest.fn() }),\n  usePathname: () => '/messages',\n  useSearchParams: () => ({ get: () => null }),\n}))\n\n// Controllable mobile hook\nconst mockUseIsMobile = jest.fn(() => false)\njest.mock('@/hooks/use-mobile', () => ({ useIsMobile: () => mockUseIsMobile() }))\n\n// WebSocket hook mock\njest.mock('@/hooks/use-websocket', () => ({\n  useWebSocket: () => ({\n    isConnected: true,\n    messages: [],\n    typingUsers: {},\n    joinConversation: jest.fn(),\n    sendChatMessage: jest.fn(),\n    sendTyping: jest.fn(),\n    sendEditMessage: jest.fn(),\n  }),\n}))\n\n// Conversations hook mock\njest.mock('@/hooks/use-conversations', () => ({\n  useConversations: () => ({\n    conversations: [\n      { id: 'abc', title: 'Test Conversation', created_at: '', updated_at: '', user_id: 'user-1' },\n    ],\n    loading: false,\n    error: null,\n    inviteParticipants: jest.fn(),\n  }),\n}))\n\n// Supabase client mock (auth + participant count)\njest.mock('@/lib/supabase/client', () => {\n  const supabase = {\n    auth: {\n      getUser: async () => ({ data: { user: { id: 'me' } } }),\n    },\n    from: (_table: string) => ({\n      select: (_sel: string, _opts?: any) => ({\n        eq: (_col: string, _val: string) => Promise.resolve({ count: 1 }),\n      }),\n    }),\n  }\n  return { supabase }\n})\n\n// Message service mock (empty initial list to keep UI simple)\nconst getMessagesMock = jest.fn()\njest.mock('@/services/message-service', () => ({\n  messageService: {\n    getMessages: (...args: any[]) => getMessagesMock(...args),\n    updateMessage: jest.fn(async () => ({})),\n  },\n}))\n\n// Feature flag + analytics mocks\nconst isFeatureEnabledMock = jest.fn()\nconst trackEventMock = jest.fn(async () => {})\njest.mock('@/lib/feature-flags', () => ({\n  FEATURES: { IMMERSIVE_CHAT: 'immersive_chat' },\n  isFeatureEnabled: (feature: string) => isFeatureEnabledMock(feature),\n}))\njest.mock('@/lib/analytics', () => ({\n  trackEvent: (...args: any[]) => (trackEventMock as any)(...args),\n}))\n\nimport { ChatWindow } from '@/components/chat/chat-window'\n\nconst baseProps = {\n  chatId: 'abc',\n  onToggleSidebar: () => {},\n  sidebarCollapsed: false,\n}\n\nbeforeEach(() => {\n  jest.clearAllMocks()\n  localStorage.clear()\n  mockUseIsMobile.mockReturnValue(false)\n  isFeatureEnabledMock.mockImplementation((f: string) => f === 'immersive_chat' ? true : false)\n  getMessagesMock.mockResolvedValue([])\n})\n\ndescribe('ChatWindow immersive 3D headset view', () => {\n  test('toggle button is hidden when feature flag disabled', async () => {\n    isFeatureEnabledMock.mockImplementation(() => false) // disable for all calls in this test\n    await renderWithAct(<ChatWindow {...baseProps} />)\n\n    expect(screen.queryByRole('button', { name: /enter 3d headset view/i })).not.toBeInTheDocument()\n  })\n\n  test('desktop-only: button visible on desktop and toggles 3D view + analytics + persistence', async () => {\n    // desktop\n    mockUseIsMobile.mockReturnValue(false)\n    await renderWithAct(<ChatWindow {...baseProps} />)\n\n    // Initially, input is visible and 3D region is not\n    expect(await screen.findByLabelText(/message input/i)).toBeInTheDocument()\n    expect(screen.queryByRole('region', { name: /3d headset chat space/i })).not.toBeInTheDocument()\n\n    const toggleBtn = screen.getByRole('button', { name: /enter 3d headset view/i })\n    fireEvent.click(toggleBtn)\n\n    // After toggle ON: input hidden, 3D region visible, aria label updates, analytics fired, localStorage set\n    await waitFor(() => {\n      expect(screen.getByRole('region', { name: /3d headset chat space/i })).toBeInTheDocument()\n    })\n    expect(screen.queryByLabelText(/message input/i)).not.toBeInTheDocument()\n    expect(screen.getByRole('button', { name: /exit 3d headset view/i })).toBeInTheDocument()\n\n    await waitFor(() => {\n      expect(trackEventMock).toHaveBeenCalledWith({\n        name: 'immersive_chat_toggle',\n        properties: { chatId: 'abc', enabled: true },\n      })\n    })\n    expect(localStorage.getItem('chat_immersive_3d_abc')).toBe('1')\n\n    // Toggle OFF\n    fireEvent.click(screen.getByRole('button', { name: /exit 3d headset view/i }))\n    await waitFor(() => {\n      expect(screen.queryByRole('region', { name: /3d headset chat space/i })).not.toBeInTheDocument()\n    })\n    expect(screen.getByLabelText(/message input/i)).toBeInTheDocument()\n    expect(localStorage.getItem('chat_immersive_3d_abc')).toBe('0')\n  })\n\n  test('restores persisted state per chat on mount (desktop)', async () => {\n    mockUseIsMobile.mockReturnValue(false)\n    localStorage.setItem('chat_immersive_3d_abc', '1')\n\n    await renderWithAct(<ChatWindow {...baseProps} />)\n\n    // Restored to ON: 3D region present, input hidden, header shows Exit label\n    await waitFor(() => {\n      expect(screen.getByRole('region', { name: /3d headset chat space/i })).toBeInTheDocument()\n    })\n    expect(screen.queryByLabelText(/message input/i)).not.toBeInTheDocument()\n    expect(screen.getByRole('button', { name: /exit 3d headset view/i })).toBeInTheDocument()\n  })\n\n  test('mobile disables 3D view and hides the toggle button even if persisted', async () => {\n    // Simulate previously enabled state\n    localStorage.setItem('chat_immersive_3d_abc', '1')\n\n    // Mobile\n    mockUseIsMobile.mockReturnValue(true)\n\n    await renderWithAct(<ChatWindow {...baseProps} />)\n\n    // No toggle button rendered\n    expect(screen.queryByRole('button', { name: /3d headset/i })).not.toBeInTheDocument()\n\n    // 3D view not shown; input is present\n    await waitFor(() => {\n      expect(screen.queryByRole('region', { name: /3d headset chat space/i })).not.toBeInTheDocument()\n    })\n    expect(screen.queryByLabelText(/message input/i)).not.toBeInTheDocument() // mobile input has no aria-label\n  })\n})\n"],"names":["jest","mock","props","useRouter","push","fn","replace","prefetch","back","usePathname","useSearchParams","get","useIsMobile","mockUseIsMobile","useWebSocket","isConnected","messages","typingUsers","joinConversation","sendChatMessage","sendTyping","sendEditMessage","useConversations","conversations","id","title","created_at","updated_at","user_id","loading","error","inviteParticipants","supabase","auth","getUser","data","user","from","_table","select","_sel","_opts","eq","_col","_val","Promise","resolve","count","messageService","getMessages","args","getMessagesMock","updateMessage","FEATURES","IMMERSIVE_CHAT","isFeatureEnabled","feature","isFeatureEnabledMock","trackEvent","trackEventMock","baseProps","chatId","onToggleSidebar","sidebarCollapsed","beforeEach","clearAllMocks","localStorage","clear","mockReturnValue","mockImplementation","f","mockResolvedValue","describe","test","renderWithAct","ChatWindow","expect","screen","queryByRole","name","not","toBeInTheDocument","findByLabelText","toggleBtn","getByRole","fireEvent","click","waitFor","queryByLabelText","toHaveBeenCalledWith","properties","enabled","getItem","toBe","getByLabelText","setItem"],"mappings":"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"}