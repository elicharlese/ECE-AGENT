{"version":3,"sources":["/Users/elicharlese/CascadeProjects/AGENT/__tests__/components/QuickChatMount.test.tsx"],"sourcesContent":["import React from 'react'\nimport { render, screen, waitFor, fireEvent, act } from '@testing-library/react'\nimport userEvent from '@testing-library/user-event'\nimport { QuickChatMount } from '@/components/chat/QuickChatMount'\n\n// Stub websocket hook to avoid network/auth during tests\njest.mock('@/hooks/use-websocket', () => ({\n  useWebSocket: () => ({\n    sendChatMessage: jest.fn(),\n    joinConversation: jest.fn(),\n    messages: [],\n  }),\n}))\n\n// Haptics no-op\njest.mock('@/hooks/use-haptics', () => ({\n  useHaptics: () => ({ triggerHaptic: () => {} }),\n}))\n\ndescribe('QuickChatMount window.quickChat API and events', () => {\n  test('exposes show/hide/toggle and reacts to quickchat:* events', async () => {\n    render(<QuickChatMount />)\n\n    // Initially visible minimized bar should render a search region\n    expect(await screen.findByRole('search', { name: /quick chat/i })).toBeInTheDocument()\n\n    // API available\n    const qc = (window as any).quickChat\n    expect(qc).toBeTruthy()\n    expect(typeof qc.show).toBe('function')\n    expect(typeof qc.hide).toBe('function')\n    expect(typeof qc.toggle).toBe('function')\n\n    // Hide via event\n    fireEvent(window, new Event('quickchat:hide'))\n    await waitFor(() => {\n      expect(screen.queryByRole('search', { name: /quick chat/i })).not.toBeInTheDocument()\n    })\n\n    // Show via API\n    await act(async () => {\n      qc.show()\n    })\n    await waitFor(() => {\n      expect(screen.getByRole('search', { name: /quick chat/i })).toBeInTheDocument()\n    })\n\n    // Toggle via event (should hide)\n    fireEvent(window, new Event('quickchat:toggle'))\n    await waitFor(() => {\n      expect(screen.queryByRole('search', { name: /quick chat/i })).not.toBeInTheDocument()\n    })\n\n    // Toggle via API (should show)\n    await act(async () => {\n      qc.toggle()\n    })\n    await waitFor(() => {\n      expect(screen.getByRole('search', { name: /quick chat/i })).toBeInTheDocument()\n    })\n  })\n})\n"],"names":["jest","mock","useWebSocket","sendChatMessage","fn","joinConversation","messages","useHaptics","triggerHaptic","describe","test","render","QuickChatMount","expect","screen","findByRole","name","toBeInTheDocument","qc","window","quickChat","toBeTruthy","show","toBe","hide","toggle","fireEvent","Event","waitFor","queryByRole","not","act","getByRole"],"mappings":";AAKA,yDAAyD;AACzDA,KAAKC,IAAI,CAAC,yBAAyB,IAAO,CAAA;QACxCC,cAAc,IAAO,CAAA;gBACnBC,iBAAiBH,KAAKI,EAAE;gBACxBC,kBAAkBL,KAAKI,EAAE;gBACzBE,UAAU,EAAE;YACd,CAAA;IACF,CAAA;AAEA,gBAAgB;AAChBN,KAAKC,IAAI,CAAC,uBAAuB,IAAO,CAAA;QACtCM,YAAY,IAAO,CAAA;gBAAEC,eAAe,KAAO;YAAE,CAAA;IAC/C,CAAA;;;;;8DAjBkB;wBACsC;gCAEzB;;;;;;AAgB/BC,SAAS,kDAAkD;IACzDC,KAAK,6DAA6D;QAChEC,IAAAA,cAAM,gBAAC,qBAACC,8BAAc;QAEtB,gEAAgE;QAChEC,OAAO,MAAMC,cAAM,CAACC,UAAU,CAAC,UAAU;YAAEC,MAAM;QAAc,IAAIC,iBAAiB;QAEpF,gBAAgB;QAChB,MAAMC,KAAK,AAACC,OAAeC,SAAS;QACpCP,OAAOK,IAAIG,UAAU;QACrBR,OAAO,OAAOK,GAAGI,IAAI,EAAEC,IAAI,CAAC;QAC5BV,OAAO,OAAOK,GAAGM,IAAI,EAAED,IAAI,CAAC;QAC5BV,OAAO,OAAOK,GAAGO,MAAM,EAAEF,IAAI,CAAC;QAE9B,iBAAiB;QACjBG,IAAAA,iBAAS,EAACP,QAAQ,IAAIQ,MAAM;QAC5B,MAAMC,IAAAA,eAAO,EAAC;YACZf,OAAOC,cAAM,CAACe,WAAW,CAAC,UAAU;gBAAEb,MAAM;YAAc,IAAIc,GAAG,CAACb,iBAAiB;QACrF;QAEA,eAAe;QACf,MAAMc,IAAAA,WAAG,EAAC;YACRb,GAAGI,IAAI;QACT;QACA,MAAMM,IAAAA,eAAO,EAAC;YACZf,OAAOC,cAAM,CAACkB,SAAS,CAAC,UAAU;gBAAEhB,MAAM;YAAc,IAAIC,iBAAiB;QAC/E;QAEA,iCAAiC;QACjCS,IAAAA,iBAAS,EAACP,QAAQ,IAAIQ,MAAM;QAC5B,MAAMC,IAAAA,eAAO,EAAC;YACZf,OAAOC,cAAM,CAACe,WAAW,CAAC,UAAU;gBAAEb,MAAM;YAAc,IAAIc,GAAG,CAACb,iBAAiB;QACrF;QAEA,+BAA+B;QAC/B,MAAMc,IAAAA,WAAG,EAAC;YACRb,GAAGO,MAAM;QACX;QACA,MAAMG,IAAAA,eAAO,EAAC;YACZf,OAAOC,cAAM,CAACkB,SAAS,CAAC,UAAU;gBAAEhB,MAAM;YAAc,IAAIC,iBAAiB;QAC/E;IACF;AACF"}