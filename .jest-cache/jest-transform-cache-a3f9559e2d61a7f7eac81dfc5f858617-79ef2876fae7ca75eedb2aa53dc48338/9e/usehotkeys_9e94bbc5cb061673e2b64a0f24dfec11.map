{"version":3,"sources":["/Users/elicharlese/CascadeProjects/AGENT/hooks/use-hotkeys.ts"],"sourcesContent":["\"use client\"\n\nimport { useEffect, useRef } from \"react\"\n\nexport type HotkeyBinding = {\n  combo: string // e.g., \"meta+k\", \"ctrl+k\", \"shift+?\"\n  onTrigger: (ev: KeyboardEvent) => void\n  preventDefault?: boolean\n  enableInInputs?: boolean\n}\n\nfunction isEditableTarget(target: EventTarget | null) {\n  const el = target as HTMLElement | null\n  if (!el) return false\n  const tag = el.tagName?.toLowerCase()\n  const isContentEditable = el.isContentEditable\n  return (\n    isContentEditable ||\n    tag === \"input\" ||\n    tag === \"textarea\" ||\n    tag === \"select\" ||\n    el.getAttribute?.(\"role\") === \"textbox\"\n  )\n}\n\nfunction normalizeKey(k: string) {\n  const map: Record<string, string> = {\n    control: \"ctrl\",\n    command: \"meta\",\n    cmd: \"meta\",\n    option: \"alt\",\n    escape: \"esc\",\n  }\n  const lower = k.toLowerCase()\n  return map[lower] ?? lower\n}\n\nfunction eventCombo(ev: KeyboardEvent) {\n  const parts: string[] = []\n  if (ev.metaKey) parts.push(\"meta\")\n  if (ev.ctrlKey) parts.push(\"ctrl\")\n  if (ev.altKey) parts.push(\"alt\")\n  if (ev.shiftKey) parts.push(\"shift\")\n  const key = normalizeKey(ev.key)\n  if (![\"meta\", \"ctrl\", \"alt\", \"shift\"].includes(key)) parts.push(key)\n  return parts.join(\"+\")\n}\n\nexport function useHotkeys(bindings: HotkeyBinding[]) {\n  const bindingsRef = useRef(bindings)\n  useEffect(() => {\n    bindingsRef.current = bindings\n  }, [bindings])\n\n  useEffect(() => {\n    const onKeyDown = (ev: KeyboardEvent) => {\n      const combo = eventCombo(ev)\n      for (const b of bindingsRef.current) {\n        if (!b.enableInInputs && isEditableTarget(ev.target)) continue\n        if (combo === b.combo.toLowerCase()) {\n          if (b.preventDefault) ev.preventDefault()\n          b.onTrigger(ev)\n          break\n        }\n      }\n    }\n    window.addEventListener(\"keydown\", onKeyDown)\n    return () => window.removeEventListener(\"keydown\", onKeyDown)\n  }, [])\n}\n"],"names":["useHotkeys","isEditableTarget","target","el","tag","tagName","toLowerCase","isContentEditable","getAttribute","normalizeKey","k","map","control","command","cmd","option","escape","lower","eventCombo","ev","parts","metaKey","push","ctrlKey","altKey","shiftKey","key","includes","join","bindings","bindingsRef","useRef","useEffect","current","onKeyDown","combo","b","enableInInputs","preventDefault","onTrigger","window","addEventListener","removeEventListener"],"mappings":"AAAA;;;;;+BAgDgBA;;;eAAAA;;;uBA9CkB;AASlC,SAASC,iBAAiBC,MAA0B;IAClD,MAAMC,KAAKD;IACX,IAAI,CAACC,IAAI,OAAO;IAChB,MAAMC,MAAMD,GAAGE,OAAO,EAAEC;IACxB,MAAMC,oBAAoBJ,GAAGI,iBAAiB;IAC9C,OACEA,qBACAH,QAAQ,WACRA,QAAQ,cACRA,QAAQ,YACRD,GAAGK,YAAY,GAAG,YAAY;AAElC;AAEA,SAASC,aAAaC,CAAS;IAC7B,MAAMC,MAA8B;QAClCC,SAAS;QACTC,SAAS;QACTC,KAAK;QACLC,QAAQ;QACRC,QAAQ;IACV;IACA,MAAMC,QAAQP,EAAEJ,WAAW;IAC3B,OAAOK,GAAG,CAACM,MAAM,IAAIA;AACvB;AAEA,SAASC,WAAWC,EAAiB;IACnC,MAAMC,QAAkB,EAAE;IAC1B,IAAID,GAAGE,OAAO,EAAED,MAAME,IAAI,CAAC;IAC3B,IAAIH,GAAGI,OAAO,EAAEH,MAAME,IAAI,CAAC;IAC3B,IAAIH,GAAGK,MAAM,EAAEJ,MAAME,IAAI,CAAC;IAC1B,IAAIH,GAAGM,QAAQ,EAAEL,MAAME,IAAI,CAAC;IAC5B,MAAMI,MAAMjB,aAAaU,GAAGO,GAAG;IAC/B,IAAI,CAAC;QAAC;QAAQ;QAAQ;QAAO;KAAQ,CAACC,QAAQ,CAACD,MAAMN,MAAME,IAAI,CAACI;IAChE,OAAON,MAAMQ,IAAI,CAAC;AACpB;AAEO,SAAS5B,WAAW6B,QAAyB;IAClD,MAAMC,cAAcC,IAAAA,aAAM,EAACF;IAC3BG,IAAAA,gBAAS,EAAC;QACRF,YAAYG,OAAO,GAAGJ;IACxB,GAAG;QAACA;KAAS;IAEbG,IAAAA,gBAAS,EAAC;QACR,MAAME,YAAY,CAACf;YACjB,MAAMgB,QAAQjB,WAAWC;YACzB,KAAK,MAAMiB,KAAKN,YAAYG,OAAO,CAAE;gBACnC,IAAI,CAACG,EAAEC,cAAc,IAAIpC,iBAAiBkB,GAAGjB,MAAM,GAAG;gBACtD,IAAIiC,UAAUC,EAAED,KAAK,CAAC7B,WAAW,IAAI;oBACnC,IAAI8B,EAAEE,cAAc,EAAEnB,GAAGmB,cAAc;oBACvCF,EAAEG,SAAS,CAACpB;oBACZ;gBACF;YACF;QACF;QACAqB,OAAOC,gBAAgB,CAAC,WAAWP;QACnC,OAAO,IAAMM,OAAOE,mBAAmB,CAAC,WAAWR;IACrD,GAAG,EAAE;AACP"}