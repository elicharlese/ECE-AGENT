{"version":3,"sources":["/Users/elicharlese/CascadeProjects/AGENT/components/agents/AgentMCPIntegration.tsx"],"sourcesContent":["'use client'\n\nimport React, { useEffect, useState } from 'react'\nimport { agentService, Agent } from '@/services/agent-service'\nimport { Button } from '@/components/ui/button'\nimport { Badge } from '@/components/ui/badge'\n\nexport interface AgentMCPIntegrationProps {\n  agentId: string\n  onToolExecute: (toolId: string, params: any) => Promise<any>\n}\n\ninterface ToolResultMap {\n  [toolId: string]: any\n}\n\nexport function AgentMCPIntegration({ agentId, onToolExecute }: AgentMCPIntegrationProps) {\n  const [agent, setAgent] = useState<Agent | null>(null)\n  const [executing, setExecuting] = useState<string | null>(null)\n  const [results, setResults] = useState<ToolResultMap>({})\n\n  useEffect(() => {\n    let mounted = true\n    ;(async () => {\n      const a = await agentService.getAgent(agentId)\n      if (mounted) setAgent(a)\n    })()\n    return () => {\n      mounted = false\n    }\n  }, [agentId])\n\n  const defaultParamsFor = (toolId: string) => {\n    switch (toolId) {\n      case 'brave-search':\n        return { query: 'hello world' }\n      case 'git':\n        return { action: 'status' }\n      case 'linear':\n        return { action: 'list' }\n      case 'stripe':\n        return { action: 'balance' }\n      case 'sequential-thinking':\n        return { prompt: 'Analyze project structure' }\n      case 'memory':\n        return { op: 'status' }\n      default:\n        return {}\n    }\n  }\n\n  const executeTool = async (toolId: string) => {\n    try {\n      setExecuting(toolId)\n      const params = defaultParamsFor(toolId)\n      const res = await onToolExecute(toolId, params)\n      setResults((prev) => ({ ...prev, [toolId]: res }))\n    } catch (e) {\n      setResults((prev) => ({ ...prev, [toolId]: { error: e instanceof Error ? e.message : String(e) } }))\n    } finally {\n      setExecuting(null)\n    }\n  }\n\n  if (!agent) {\n    return <div className=\"p-4 text-sm text-gray-600 dark:text-gray-300\">Loading MCP tools…</div>\n  }\n\n  const tools = agent.mcpTools ?? []\n\n  return (\n    <div className=\"p-4\">\n      <div className=\"flex items-center justify-between mb-3\">\n        <h3 className=\"text-sm font-semibold\">MCP Tools for {agent.name}</h3>\n        <Badge variant=\"secondary\">{tools.length} tools</Badge>\n      </div>\n\n      {tools.length === 0 ? (\n        <div className=\"text-sm text-gray-600 dark:text-gray-300\">No MCP tools configured for this agent.</div>\n      ) : (\n        <div className=\"space-y-3\">\n          {tools.map((tool) => (\n            <div key={tool} className=\"p-3 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"font-medium text-sm\">{tool}</span>\n                  <Badge variant=\"outline\" className=\"text-xs\">MCP</Badge>\n                </div>\n                <Button size=\"sm\" onClick={() => executeTool(tool)} disabled={executing === tool}>\n                  {executing === tool ? 'Running…' : 'Run'}\n                </Button>\n              </div>\n              {results[tool] && (\n                <pre className=\"mt-2 text-xs bg-gray-50 dark:bg-gray-900 p-2 rounded overflow-x-auto\">\n                  {JSON.stringify(results[tool], null, 2)}\n                </pre>\n              )}\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  )\n}\n"],"names":["AgentMCPIntegration","agentId","onToolExecute","agent","setAgent","useState","executing","setExecuting","results","setResults","useEffect","mounted","a","agentService","getAgent","defaultParamsFor","toolId","query","action","prompt","op","executeTool","params","res","prev","e","error","Error","message","String","div","className","tools","mcpTools","h3","name","Badge","variant","length","map","tool","span","Button","size","onClick","disabled","pre","JSON","stringify"],"mappings":"AAAA;;;;;+BAgBgBA;;;eAAAA;;;;+DAd2B;8BACP;wBACb;uBACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAWf,SAASA,oBAAoB,EAAEC,OAAO,EAAEC,aAAa,EAA4B;IACtF,MAAM,CAACC,OAAOC,SAAS,GAAGC,IAAAA,eAAQ,EAAe;IACjD,MAAM,CAACC,WAAWC,aAAa,GAAGF,IAAAA,eAAQ,EAAgB;IAC1D,MAAM,CAACG,SAASC,WAAW,GAAGJ,IAAAA,eAAQ,EAAgB,CAAC;IAEvDK,IAAAA,gBAAS,EAAC;QACR,IAAIC,UAAU;QACZ,CAAA;YACA,MAAMC,IAAI,MAAMC,0BAAY,CAACC,QAAQ,CAACb;YACtC,IAAIU,SAASP,SAASQ;QACxB,CAAA;QACA,OAAO;YACLD,UAAU;QACZ;IACF,GAAG;QAACV;KAAQ;IAEZ,MAAMc,mBAAmB,CAACC;QACxB,OAAQA;YACN,KAAK;gBACH,OAAO;oBAAEC,OAAO;gBAAc;YAChC,KAAK;gBACH,OAAO;oBAAEC,QAAQ;gBAAS;YAC5B,KAAK;gBACH,OAAO;oBAAEA,QAAQ;gBAAO;YAC1B,KAAK;gBACH,OAAO;oBAAEA,QAAQ;gBAAU;YAC7B,KAAK;gBACH,OAAO;oBAAEC,QAAQ;gBAA4B;YAC/C,KAAK;gBACH,OAAO;oBAAEC,IAAI;gBAAS;YACxB;gBACE,OAAO,CAAC;QACZ;IACF;IAEA,MAAMC,cAAc,OAAOL;QACzB,IAAI;YACFT,aAAaS;YACb,MAAMM,SAASP,iBAAiBC;YAChC,MAAMO,MAAM,MAAMrB,cAAcc,QAAQM;YACxCb,WAAW,CAACe,OAAU,CAAA;oBAAE,GAAGA,IAAI;oBAAE,CAACR,OAAO,EAAEO;gBAAI,CAAA;QACjD,EAAE,OAAOE,GAAG;YACVhB,WAAW,CAACe,OAAU,CAAA;oBAAE,GAAGA,IAAI;oBAAE,CAACR,OAAO,EAAE;wBAAEU,OAAOD,aAAaE,QAAQF,EAAEG,OAAO,GAAGC,OAAOJ;oBAAG;gBAAE,CAAA;QACnG,SAAU;YACRlB,aAAa;QACf;IACF;IAEA,IAAI,CAACJ,OAAO;QACV,qBAAO,qBAAC2B;YAAIC,WAAU;sBAA+C;;IACvE;IAEA,MAAMC,QAAQ7B,MAAM8B,QAAQ,IAAI,EAAE;IAElC,qBACE,sBAACH;QAAIC,WAAU;;0BACb,sBAACD;gBAAIC,WAAU;;kCACb,sBAACG;wBAAGH,WAAU;;4BAAwB;4BAAe5B,MAAMgC,IAAI;;;kCAC/D,sBAACC,YAAK;wBAACC,SAAQ;;4BAAaL,MAAMM,MAAM;4BAAC;;;;;YAG1CN,MAAMM,MAAM,KAAK,kBAChB,qBAACR;gBAAIC,WAAU;0BAA2C;+BAE1D,qBAACD;gBAAIC,WAAU;0BACZC,MAAMO,GAAG,CAAC,CAACC,qBACV,sBAACV;wBAAeC,WAAU;;0CACxB,sBAACD;gCAAIC,WAAU;;kDACb,sBAACD;wCAAIC,WAAU;;0DACb,qBAACU;gDAAKV,WAAU;0DAAuBS;;0DACvC,qBAACJ,YAAK;gDAACC,SAAQ;gDAAUN,WAAU;0DAAU;;;;kDAE/C,qBAACW,cAAM;wCAACC,MAAK;wCAAKC,SAAS,IAAMvB,YAAYmB;wCAAOK,UAAUvC,cAAckC;kDACzElC,cAAckC,OAAO,aAAa;;;;4BAGtChC,OAAO,CAACgC,KAAK,kBACZ,qBAACM;gCAAIf,WAAU;0CACZgB,KAAKC,SAAS,CAACxC,OAAO,CAACgC,KAAK,EAAE,MAAM;;;uBAZjCA;;;;AAqBtB"}