{"version":3,"sources":["/Users/elicharlese/CascadeProjects/AGENT/services/mcp-service.ts"],"sourcesContent":["// Note: supabase client not needed here; removing unused import to satisfy lint\n\n// MCP Tool Types\nexport interface MCPTool {\n  id: string\n  name: string\n  description: string\n  category: 'database' | 'web' | 'git' | 'file' | 'terminal' | 'math' | 'github'\n  enabled: boolean\n  config?: Record<string, any>\n}\n\n// MCP Connection Gateway\nexport interface MCPGateway {\n  id: string\n  type: 'github' | 'gitlab' | 'database' | 'api'\n  name: string\n  status: 'connected' | 'disconnected' | 'error'\n  config: Record<string, any>\n}\n\nclass MCPService {\n  private tools: MCPTool[] = [\n    {\n      id: 'db-query',\n      name: 'Database Query',\n      description: 'Execute SQL queries on connected databases',\n      category: 'database',\n      enabled: true,\n    },\n    {\n      id: 'web-search',\n      name: 'Web Search',\n      description: 'Search the web for information',\n      category: 'web',\n      enabled: true,\n    },\n    {\n      id: 'git-ops',\n      name: 'Git Operations',\n      description: 'Perform Git operations like clone, commit, push',\n      category: 'git',\n      enabled: true,\n    },\n    {\n      id: 'file-search',\n      name: 'File Search',\n      description: 'Search and manipulate files in the workspace',\n      category: 'file',\n      enabled: true,\n    },\n    {\n      id: 'terminal',\n      name: 'Terminal',\n      description: 'Execute terminal commands',\n      category: 'terminal',\n      enabled: true,\n    },\n    {\n      id: 'calculator',\n      name: 'Calculator',\n      description: 'Perform mathematical calculations',\n      category: 'math',\n      enabled: true,\n    },\n    {\n      id: 'github-api',\n      name: 'GitHub API',\n      description: 'Interact with GitHub repositories, issues, and PRs',\n      category: 'github',\n      enabled: false,\n    },\n    {\n      id: 'github-mcp',\n      name: 'GitHub MCP (Remote)',\n      description: 'Use the remote GitHub-hosted MCP server over HTTP/SSE',\n      category: 'github',\n      enabled: false,\n    },\n  ]\n\n  private gateways: MCPGateway[] = []\n  private githubToken: string | null = null\n  private mcpSessionId: string | null = null\n  private mcpStreamAbort?: AbortController\n  private mcpListeners: Array<(eventText: string) => void> = []\n  private lastMcpEventAt: number | null = null\n\n  constructor() {\n    // Load saved configuration\n    if (typeof window !== 'undefined') {\n      const savedTools = localStorage.getItem('mcp_tools')\n      if (savedTools) {\n        try {\n          this.tools = JSON.parse(savedTools)\n        } catch (e) {\n          console.error('Failed to load MCP tools config:', e)\n        }\n      }\n\n      const savedGateways = localStorage.getItem('mcp_gateways')\n      if (savedGateways) {\n        try {\n          this.gateways = JSON.parse(savedGateways)\n        } catch (e) {\n          console.error('Failed to load MCP gateways:', e)\n        }\n      }\n\n      this.githubToken = localStorage.getItem('github_token')\n      this.mcpSessionId = localStorage.getItem('github_mcp_session')\n      if (this.githubToken && this.mcpSessionId) {\n        void this.startMcpStream()\n      }\n    }\n  }\n\n  // --- Remote GitHub MCP over backend proxy ---\n  private async initRemoteGitHubMCP(): Promise<void> {\n    if (!this.githubToken) throw new Error('GitHub not connected')\n    // Initialize session by POSTing to proxy; session id returned as header\n    const res = await fetch('/api/mcp/github', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'X-GitHub-PAT': this.githubToken,\n      },\n      body: JSON.stringify({}),\n    })\n    if (!res.ok) throw new Error(`MCP init failed: ${res.status}`)\n    const sid = res.headers.get('mcp-session-id') || res.headers.get('Mcp-Session-Id')\n    if (!sid) throw new Error('Missing MCP session id')\n    this.mcpSessionId = sid\n    if (typeof window !== 'undefined') {\n      localStorage.setItem('github_mcp_session', sid)\n    }\n    // Start streaming in background\n    void this.startMcpStream()\n  }\n\n  private async startMcpStream() {\n    if (!this.githubToken || !this.mcpSessionId) return\n    // Abort previous stream if any\n    if (this.mcpStreamAbort) this.mcpStreamAbort.abort()\n    const ctrl = new AbortController()\n    this.mcpStreamAbort = ctrl\n\n    try {\n      const res = await fetch('/api/mcp/github', {\n        method: 'GET',\n        headers: {\n          'X-GitHub-PAT': this.githubToken,\n          'Mcp-Session-Id': this.mcpSessionId,\n        },\n        signal: ctrl.signal,\n      })\n      if (!res.ok || !res.body) {\n        throw new Error(`MCP stream failed: ${res.status}`)\n      }\n      const reader = res.body.getReader()\n      const decoder = new TextDecoder()\n      let buffer = ''\n      while (true) {\n        const { value, done } = await reader.read()\n        if (done) break\n        buffer += decoder.decode(value, { stream: true })\n        // rudimentary SSE split by double newline\n        let idx\n        while ((idx = buffer.indexOf('\\n\\n')) >= 0) {\n          const chunk = buffer.slice(0, idx)\n          buffer = buffer.slice(idx + 2)\n          this.emitMcpEvent(chunk)\n        }\n      }\n    } catch (e) {\n      if ((e as any)?.name === 'AbortError') return\n      console.warn('MCP stream error:', e)\n    } finally {\n      // When stream finishes or is aborted, clear the controller so UI reflects non-streaming state\n      if (this.mcpStreamAbort === ctrl) {\n        this.mcpStreamAbort = undefined\n      }\n    }\n  }\n\n  private async stopRemoteGitHubMCP(): Promise<void> {\n    try {\n      if (this.mcpStreamAbort) this.mcpStreamAbort.abort()\n      if (this.githubToken && this.mcpSessionId) {\n        await fetch('/api/mcp/github', {\n          method: 'DELETE',\n          headers: {\n            'X-GitHub-PAT': this.githubToken,\n            'Mcp-Session-Id': this.mcpSessionId,\n          },\n        })\n      }\n    } catch (_) {\n      // ignore\n    } finally {\n      this.mcpSessionId = null\n      if (typeof window !== 'undefined') {\n        localStorage.removeItem('github_mcp_session')\n      }\n    }\n  }\n\n  // Public: start or resume SSE streaming. If there's no session, initialize it.\n  public async startMcpStreaming(): Promise<void> {\n    if (!this.githubToken) throw new Error('GitHub not connected')\n    if (!this.mcpSessionId) {\n      await this.initRemoteGitHubMCP()\n      return\n    }\n    // Resume streaming with existing session\n    void this.startMcpStream()\n  }\n\n  // Public: stop/pause SSE streaming without terminating upstream session\n  public stopMcpStreaming(): void {\n    if (this.mcpStreamAbort) {\n      try {\n        this.mcpStreamAbort.abort()\n      } catch (_) {\n        // noop\n      } finally {\n        this.mcpStreamAbort = undefined\n      }\n    }\n  }\n\n  private async executeGitHubMCP(params: { request?: any }): Promise<any> {\n    if (!this.githubToken) {\n      throw new Error('GitHub not connected')\n    }\n    // If there is no session yet, try to init\n    if (!this.mcpSessionId) {\n      try {\n        await this.initRemoteGitHubMCP()\n      } catch (e) {\n        return { success: false, error: (e as Error).message }\n      }\n    }\n    // Basic ping without specific request payload; users of MCP can wire richer requests later\n    const res = await fetch('/api/mcp/github', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'X-GitHub-PAT': this.githubToken,\n        'Mcp-Session-Id': this.mcpSessionId as string,\n      },\n      body: JSON.stringify(params.request ?? {}),\n    })\n    const text = await res.text()\n    return {\n      success: res.ok,\n      sessionId: this.mcpSessionId,\n      raw: text,\n    }\n  }\n\n  private async executeWebSearch(params: { query: string }): Promise<any> {\n    // For now, return an error indicating the service needs to be configured\n    return {\n      success: false,\n      query: params.query,\n      error: 'Web search service not configured. Please integrate with a search API provider.',\n      results: []\n    }\n  }\n\n  // --- Event bus for MCP SSE ---\n  private emitMcpEvent(eventText: string): void {\n    this.lastMcpEventAt = Date.now()\n    for (const listener of this.mcpListeners) {\n      try {\n        listener(eventText)\n      } catch (_) {\n        // ignore listener errors\n      }\n    }\n  }\n\n  public onMcpEvent(handler: (eventText: string) => void): void {\n    this.mcpListeners.push(handler)\n  }\n\n  public offMcpEvent(handler: (eventText: string) => void): void {\n    this.mcpListeners = this.mcpListeners.filter((h) => h !== handler)\n  }\n\n  // --- Public getters ---\n  public getTools(): MCPTool[] {\n    return [...this.tools]\n  }\n\n  public getGateways(): MCPGateway[] {\n    return [...this.gateways]\n  }\n\n  public getMcpStatus(): {\n    connected: boolean\n    sessionId: string | null\n    streaming: boolean\n    lastEventAt: number | null\n  } {\n    return {\n      connected: !!(this.githubToken && this.mcpSessionId),\n      sessionId: this.mcpSessionId,\n      streaming: !!this.mcpStreamAbort,\n      lastEventAt: this.lastMcpEventAt,\n    }\n  }\n\n  // --- Tool toggling & persistence ---\n  public toggleTool(id: string, enabled: boolean): void {\n    this.tools = this.tools.map((t) => (t.id === id ? { ...t, enabled } : t))\n    if (typeof window !== 'undefined') {\n      try {\n        localStorage.setItem('mcp_tools', JSON.stringify(this.tools))\n      } catch (_) {\n        // ignore\n      }\n    }\n  }\n\n  // --- GitHub gateway management ---\n  public async connectGitHub(token: string): Promise<void> {\n    this.githubToken = token\n    if (typeof window !== 'undefined') {\n      localStorage.setItem('github_token', token)\n    }\n    // upsert gateway\n    const existing = this.gateways.find((g) => g.type === 'github')\n    const gateway: MCPGateway = existing\n      ? { ...existing, status: 'connected' }\n      : { id: 'github', type: 'github', name: 'GitHub', status: 'connected', config: {} }\n    this.gateways = [gateway, ...this.gateways.filter((g) => g.type !== 'github')]\n    if (typeof window !== 'undefined') {\n      try {\n        localStorage.setItem('mcp_gateways', JSON.stringify(this.gateways))\n      } catch (_) {}\n    }\n    // Initialize/stream in background\n    await this.startMcpStreaming()\n  }\n\n  public async disconnectGitHub(): Promise<void> {\n    await this.stopRemoteGitHubMCP()\n    this.githubToken = null\n    if (typeof window !== 'undefined') {\n      localStorage.removeItem('github_token')\n    }\n    // update gateway\n    const existing = this.gateways.find((g) => g.type === 'github')\n    if (existing) {\n      existing.status = 'disconnected'\n      this.gateways = [existing, ...this.gateways.filter((g) => g.type !== 'github')]\n      if (typeof window !== 'undefined') {\n        try {\n          localStorage.setItem('mcp_gateways', JSON.stringify(this.gateways))\n        } catch (_) {}\n      }\n    }\n  }\n\n  // --- Public tool execution API ---\n  public async executeTool(toolId: string, params: any = {}): Promise<any> {\n    const tool = this.tools.find((t) => t.id === toolId && t.enabled)\n    if (!tool) {\n      throw new Error('Tool not found or disabled')\n    }\n    switch (toolId) {\n      case 'web-search':\n        return this.executeWebSearch(params)\n      case 'github-mcp':\n        return this.executeGitHubMCP(params)\n      case 'calculator':\n        try {\n          // Extremely simple demo calculator; not for production use\n          // eslint-disable-next-line no-new-func\n          const fn = new Function(`return (${params.expression ?? '0'})`)\n          const value = fn()\n          return { success: true, value }\n        } catch (e) {\n          return { success: false, error: (e as Error).message }\n        }\n      default:\n        return { success: false, error: 'Tool not implemented yet' }\n    }\n  }\n\n }\n \n// Export singleton instance\nexport const mcpService = new MCPService()\n"],"names":["mcpService","MCPService","constructor","tools","id","name","description","category","enabled","gateways","githubToken","mcpSessionId","mcpListeners","lastMcpEventAt","window","savedTools","localStorage","getItem","JSON","parse","e","console","error","savedGateways","startMcpStream","initRemoteGitHubMCP","Error","res","fetch","method","headers","body","stringify","ok","status","sid","get","setItem","mcpStreamAbort","abort","ctrl","AbortController","signal","reader","getReader","decoder","TextDecoder","buffer","value","done","read","decode","stream","idx","indexOf","chunk","slice","emitMcpEvent","warn","undefined","stopRemoteGitHubMCP","_","removeItem","startMcpStreaming","stopMcpStreaming","executeGitHubMCP","params","success","message","request","text","sessionId","raw","executeWebSearch","query","results","eventText","Date","now","listener","onMcpEvent","handler","push","offMcpEvent","filter","h","getTools","getGateways","getMcpStatus","connected","streaming","lastEventAt","toggleTool","map","t","connectGitHub","token","existing","find","g","type","gateway","config","disconnectGitHub","executeTool","toolId","tool","fn","Function","expression"],"mappings":"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"}