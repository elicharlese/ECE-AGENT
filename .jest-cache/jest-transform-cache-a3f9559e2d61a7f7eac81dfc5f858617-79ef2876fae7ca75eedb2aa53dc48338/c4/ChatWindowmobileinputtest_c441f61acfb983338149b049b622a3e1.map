{"version":3,"sources":["/Users/elicharlese/CascadeProjects/AGENT/__tests__/components/ChatWindow.mobile-input.test.tsx"],"sourcesContent":["import React from 'react'\nimport { screen, fireEvent, waitFor, act } from '@testing-library/react'\nimport { renderWithAct } from '../utils/test-utils'\n\n// Mock next/dynamic to avoid loading heavy components during tests\njest.mock('next/dynamic', () => () => (props: any) => null)\n\n// Mock Next.js navigation\njest.mock('next/navigation', () => ({\n  useRouter: () => ({ push: jest.fn(), replace: jest.fn(), prefetch: jest.fn(), back: jest.fn() }),\n  usePathname: () => '/messages',\n  useSearchParams: () => ({ get: () => null }),\n}))\n\n// Force credits UI on and a known per-request estimate\njest.mock('@/lib/pricing', () => ({\n  CREDITS_ENABLED: true,\n  CREDITS_PER_AI_REQUEST: 2,\n}))\n\n// Mock credits service to avoid network and provide stable balance\njest.mock('@/services/credit-service', () => ({\n  getCreditBalance: jest.fn(async () => ({ balance: 42 })),\n}))\n\n// Mock conversations hook\njest.mock('@/hooks/use-conversations', () => ({\n  useConversations: () => ({\n    conversations: [\n      { id: 'abc', title: 'Test Conversation', created_at: '', updated_at: '', user_id: 'user-1' },\n    ],\n    loading: false,\n    error: null,\n    inviteParticipants: jest.fn(),\n  }),\n}))\n\n// Prepare a controllable mobile hook -> force mobile\nconst mockUseIsMobile = jest.fn(() => true)\njest.mock('@/hooks/use-mobile', () => ({ useIsMobile: () => mockUseIsMobile() }))\n\n// WebSocket hook mock with spies\nconst sendChatMessage = jest.fn()\njest.mock('@/hooks/use-websocket', () => ({\n  useWebSocket: () => ({\n    isConnected: true,\n    messages: [],\n    typingUsers: {},\n    joinConversation: jest.fn(),\n    sendChatMessage,\n    sendTyping: jest.fn(),\n    sendEditMessage: jest.fn(),\n  }),\n}))\n\n// Supabase client mock: auth.getUser and participant count query\njest.mock('@/lib/supabase/client', () => {\n  const supabase = {\n    auth: {\n      getUser: async () => ({ data: { user: { id: 'me' } } }),\n    },\n    from: (_table: string) => ({\n      select: (_sel: string, _opts?: any) => ({\n        eq: (_col: string, _val: string) => Promise.resolve({ count: 1 }),\n      }),\n    }),\n  }\n  return { supabase }\n})\n\n// Keep MessageBubble simple (no edit UI needed for this suite)\njest.mock('@/components/chat/message-bubble', () => ({\n  MessageBubble: ({ message }: any) => (\n    <div>\n      <div data-testid={`msg-${message.id}`}>{message.content}</div>\n    </div>\n  ),\n}))\n\n// Controllable message service mock\nconst getMessagesMock = jest.fn()\njest.mock('@/services/message-service', () => ({\n  messageService: {\n    getMessages: (...args: any[]) => getMessagesMock(...args),\n  },\n}))\n\nimport { ChatWindow } from '@/components/chat/chat-window'\n\nconst baseProps = {\n  chatId: 'abc',\n  onToggleSidebar: () => {},\n  sidebarCollapsed: false,\n}\n\nbeforeEach(() => {\n  jest.clearAllMocks()\n  mockUseIsMobile.mockReturnValue(true)\n  // Resolve quickly with one message\n  getMessagesMock.mockResolvedValue([\n    {\n      id: 'm1',\n      conversation_id: 'abc',\n      user_id: 'me',\n      content: 'Original message',\n      created_at: new Date().toISOString(),\n      role: 'user',\n      type: 'text',\n      edited_at: null,\n    },\n  ])\n})\n\ndescribe('ChatWindow + MobileMessageInput parity', () => {\n  test('renders MobileMessageInput on mobile and does not render Desktop aria-labeled input', async () => {\n    await renderWithAct(<ChatWindow {...baseProps} />)\n\n    // Desktop aria-labeled input should not exist on mobile\n    await waitFor(() => {\n      expect(screen.queryByLabelText(/message input/i)).not.toBeInTheDocument()\n    })\n\n    // But a textbox should exist for composing\n    const input = screen.getByRole('textbox') as HTMLTextAreaElement\n    expect(input).toBeInTheDocument()\n  })\n\n  test('keyboard shortcuts on mobile: Enter sends; Shift+Enter newline; Ctrl+Enter sends', async () => {\n    await renderWithAct(<ChatWindow {...baseProps} />)\n\n    const input = screen.getByRole('textbox') as HTMLTextAreaElement\n\n    // Type something\n    fireEvent.change(input, { target: { value: 'Hello' } })\n\n    // Enter sends\n    fireEvent.keyDown(input, { key: 'Enter', code: 'Enter' })\n    expect(sendChatMessage).toHaveBeenCalledTimes(1)\n\n    // Type again\n    fireEvent.change(input, { target: { value: 'Hello again' } })\n\n    // Shift+Enter should not send\n    fireEvent.keyDown(input, { key: 'Enter', code: 'Enter', shiftKey: true })\n    expect(sendChatMessage).toHaveBeenCalledTimes(1)\n\n    // Ctrl+Enter sends\n    fireEvent.keyDown(input, { key: 'Enter', code: 'Enter', ctrlKey: true })\n    expect(sendChatMessage).toHaveBeenCalledTimes(2)\n  })\n\n  test('credits UI visible on mobile: estimate and Buy Credits', async () => {\n    await renderWithAct(<ChatWindow {...baseProps} />)\n\n    // Credit estimate\n    expect(await screen.findByText(/est\\. credits:\\s*2/i)).toBeInTheDocument()\n\n    // Buy Credits button\n    expect(screen.getByRole('button', { name: /buy credits/i })).toBeInTheDocument()\n  })\n\n  test('AI mode placeholder is appropriate; toggles if available on mobile', async () => {\n    await renderWithAct(<ChatWindow {...baseProps} />)\n    const input = screen.getByRole('textbox') as HTMLTextAreaElement\n\n    // Initial placeholder\n    expect(input.placeholder.toLowerCase()).toMatch(/type a message|ask ai/i)\n\n    const toggle = screen.queryByRole('button', { name: /enable ai mode/i })\n    if (toggle) {\n      fireEvent.click(toggle)\n      // After enabling\n      expect(screen.getByText(/ai mode/i)).toBeInTheDocument()\n      expect(screen.getByRole('button', { name: /disable ai mode/i })).toBeInTheDocument()\n      // Placeholder should mention AI or remain message-friendly\n      expect(input.placeholder.toLowerCase()).toMatch(/ask ai|type a message/i)\n    } else {\n      // If no toggle on mobile, at least ensure placeholder remains sensible\n      expect(input.placeholder.toLowerCase()).toMatch(/type a message|ask ai/i)\n    }\n  })\n\n  test('skeleton loader shows while loading, then empty state on mobile when no messages', async () => {\n    // Delay messages to assert skeletons, then resolve with []\n    getMessagesMock.mockImplementationOnce(() => new Promise((resolve) => setTimeout(() => resolve([]), 50)))\n\n    const { container } = await renderWithAct(<ChatWindow {...baseProps} />)\n\n    // Skeletons present during load\n    expect(container.querySelectorAll('[data-slot=\"skeleton\"]').length).toBeGreaterThan(0)\n\n    // After load completes, skeletons go away and empty state shows\n    await waitFor(() => {\n      expect(container.querySelectorAll('[data-slot=\"skeleton\"]').length).toBe(0)\n      expect(screen.getByText(/no messages yet\\. say hello!/i)).toBeInTheDocument()\n    })\n  })\n\n  test('action panel opens and tabs switch on mobile', async () => {\n    const { container } = await renderWithAct(<ChatWindow {...baseProps} />)\n\n    // Open the action panel via the + button\n    const openActions = await screen.findByRole('button', { name: /open actions/i })\n    fireEvent.click(openActions)\n\n    // Default tab is Media\n    expect(await screen.findByText(/media & content/i)).toBeInTheDocument()\n\n    // Switch to Apps\n    fireEvent.click(screen.getByRole('button', { name: /apps/i }))\n    expect(await screen.findByText(/quick apps/i)).toBeInTheDocument()\n\n    // Switch to Agents\n    fireEvent.click(screen.getByRole('button', { name: /agents/i }))\n    expect(await screen.findByText(/ai agents/i)).toBeInTheDocument()\n  })\n\n  test('selecting a GIF appends a new message on mobile', async () => {\n    jest.useFakeTimers()\n    const { container } = await renderWithAct(<ChatWindow {...baseProps} />)\n\n    // Start with a single message from the backend\n    await screen.findByTestId('msg-m1')\n    expect(container.querySelectorAll('[data-testid^=\"msg-\"]').length).toBe(1)\n\n    // Open action panel\n    fireEvent.click(await screen.findByRole('button', { name: /open actions/i }))\n    expect(await screen.findByText(/media & content/i)).toBeInTheDocument()\n\n    // Open GIF picker\n    fireEvent.click(screen.getByRole('button', { name: /open gif picker/i }))\n\n    // Wait for GIFs to load (debounced 0ms on initial, but search has 500ms delay)\n    // Ensure popover content is present first\n    await screen.findByPlaceholderText(/search gifs/i)\n    await screen.findByText(/loading gifs/i)\n    await act(async () => {\n      jest.advanceTimersByTime(600)\n    })\n\n    // Click a GIF\n    const gifButton = await screen.findByTitle('Happy Dance')\n    fireEvent.click(gifButton)\n\n    // Message count should increase\n    await waitFor(() => {\n      expect(container.querySelectorAll('[data-testid^=\"msg-\"]').length).toBe(2)\n    })\n\n    jest.useRealTimers()\n  })\n})\n"],"names":["jest","mock","props","useRouter","push","fn","replace","prefetch","back","usePathname","useSearchParams","get","CREDITS_ENABLED","CREDITS_PER_AI_REQUEST","getCreditBalance","balance","useConversations","conversations","id","title","created_at","updated_at","user_id","loading","error","inviteParticipants","useIsMobile","mockUseIsMobile","useWebSocket","isConnected","messages","typingUsers","joinConversation","sendChatMessage","sendTyping","sendEditMessage","supabase","auth","getUser","data","user","from","_table","select","_sel","_opts","eq","_col","_val","Promise","resolve","count","MessageBubble","message","div","data-testid","content","messageService","getMessages","args","getMessagesMock","baseProps","chatId","onToggleSidebar","sidebarCollapsed","beforeEach","clearAllMocks","mockReturnValue","mockResolvedValue","conversation_id","Date","toISOString","role","type","edited_at","describe","test","renderWithAct","ChatWindow","waitFor","expect","screen","queryByLabelText","not","toBeInTheDocument","input","getByRole","fireEvent","change","target","value","keyDown","key","code","toHaveBeenCalledTimes","shiftKey","ctrlKey","findByText","name","placeholder","toLowerCase","toMatch","toggle","queryByRole","click","getByText","mockImplementationOnce","setTimeout","container","querySelectorAll","length","toBeGreaterThan","toBe","openActions","findByRole","useFakeTimers","findByTestId","findByPlaceholderText","act","advanceTimersByTime","gifButton","findByTitle","useRealTimers"],"mappings":";AAIA,mEAAmE;AACnEA,KAAKC,IAAI,CAAC,gBAAgB,IAAM,IAAM,CAACC,QAAe;AAEtD,0BAA0B;AAC1BF,KAAKC,IAAI,CAAC,mBAAmB,IAAO,CAAA;QAClCE,WAAW,IAAO,CAAA;gBAAEC,MAAMJ,KAAKK,EAAE;gBAAIC,SAASN,KAAKK,EAAE;gBAAIE,UAAUP,KAAKK,EAAE;gBAAIG,MAAMR,KAAKK,EAAE;YAAG,CAAA;QAC9FI,aAAa,IAAM;QACnBC,iBAAiB,IAAO,CAAA;gBAAEC,KAAK,IAAM;YAAK,CAAA;IAC5C,CAAA;AAEA,uDAAuD;AACvDX,KAAKC,IAAI,CAAC,iBAAiB,IAAO,CAAA;QAChCW,iBAAiB;QACjBC,wBAAwB;IAC1B,CAAA;AAEA,mEAAmE;AACnEb,KAAKC,IAAI,CAAC,6BAA6B,IAAO,CAAA;QAC5Ca,kBAAkBd,KAAKK,EAAE,CAAC,UAAa,CAAA;gBAAEU,SAAS;YAAG,CAAA;IACvD,CAAA;AAEA,0BAA0B;AAC1Bf,KAAKC,IAAI,CAAC,6BAA6B,IAAO,CAAA;QAC5Ce,kBAAkB,IAAO,CAAA;gBACvBC,eAAe;oBACb;wBAAEC,IAAI;wBAAOC,OAAO;wBAAqBC,YAAY;wBAAIC,YAAY;wBAAIC,SAAS;oBAAS;iBAC5F;gBACDC,SAAS;gBACTC,OAAO;gBACPC,oBAAoBzB,KAAKK,EAAE;YAC7B,CAAA;IACF,CAAA;AAIAL,KAAKC,IAAI,CAAC,sBAAsB,IAAO,CAAA;QAAEyB,aAAa,IAAMC;IAAkB,CAAA;AAI9E3B,KAAKC,IAAI,CAAC,yBAAyB,IAAO,CAAA;QACxC2B,cAAc,IAAO,CAAA;gBACnBC,aAAa;gBACbC,UAAU,EAAE;gBACZC,aAAa,CAAC;gBACdC,kBAAkBhC,KAAKK,EAAE;gBACzB4B;gBACAC,YAAYlC,KAAKK,EAAE;gBACnB8B,iBAAiBnC,KAAKK,EAAE;YAC1B,CAAA;IACF,CAAA;AAEA,iEAAiE;AACjEL,KAAKC,IAAI,CAAC,yBAAyB;IACjC,MAAMmC,WAAW;QACfC,MAAM;YACJC,SAAS,UAAa,CAAA;oBAAEC,MAAM;wBAAEC,MAAM;4BAAEtB,IAAI;wBAAK;oBAAE;gBAAE,CAAA;QACvD;QACAuB,MAAM,CAACC,SAAoB,CAAA;gBACzBC,QAAQ,CAACC,MAAcC,QAAiB,CAAA;wBACtCC,IAAI,CAACC,MAAcC,OAAiBC,QAAQC,OAAO,CAAC;gCAAEC,OAAO;4BAAE;oBACjE,CAAA;YACF,CAAA;IACF;IACA,OAAO;QAAEf;IAAS;AACpB;AAEA,+DAA+D;AAC/DpC,KAAKC,IAAI,CAAC,oCAAoC,IAAO,CAAA;QACnDmD,eAAe,CAAC,EAAEC,OAAO,EAAO,iBAC9B,qBAACC;0BACC,cAAA,qBAACA;oBAAIC,eAAa,CAAC,IAAI,EAAEF,QAAQnC,EAAE,CAAC,CAAC;8BAAGmC,QAAQG,OAAO;;;IAG7D,CAAA;AAIAxD,KAAKC,IAAI,CAAC,8BAA8B,IAAO,CAAA;QAC7CwD,gBAAgB;YACdC,aAAa,CAAC,GAAGC,OAAgBC,mBAAmBD;QACtD;IACF,CAAA;;;;;8DArFkB;wBAC8B;2BAClB;4BAqFH;;;;;;AAlD3B,qDAAqD;AACrD,MAAMhC,kBAAkB3B,KAAKK,EAAE,CAAC,IAAM;AAGtC,iCAAiC;AACjC,MAAM4B,kBAAkBjC,KAAKK,EAAE;AAqC/B,oCAAoC;AACpC,MAAMuD,kBAAkB5D,KAAKK,EAAE;AAS/B,MAAMwD,YAAY;IAChBC,QAAQ;IACRC,iBAAiB,KAAO;IACxBC,kBAAkB;AACpB;AAEAC,WAAW;IACTjE,KAAKkE,aAAa;IAClBvC,gBAAgBwC,eAAe,CAAC;IAChC,mCAAmC;IACnCP,gBAAgBQ,iBAAiB,CAAC;QAChC;YACElD,IAAI;YACJmD,iBAAiB;YACjB/C,SAAS;YACTkC,SAAS;YACTpC,YAAY,IAAIkD,OAAOC,WAAW;YAClCC,MAAM;YACNC,MAAM;YACNC,WAAW;QACb;KACD;AACH;AAEAC,SAAS,0CAA0C;IACjDC,KAAK,uFAAuF;QAC1F,MAAMC,IAAAA,wBAAa,gBAAC,qBAACC,sBAAU;YAAE,GAAGjB,SAAS;;QAE7C,wDAAwD;QACxD,MAAMkB,IAAAA,eAAO,EAAC;YACZC,OAAOC,cAAM,CAACC,gBAAgB,CAAC,mBAAmBC,GAAG,CAACC,iBAAiB;QACzE;QAEA,2CAA2C;QAC3C,MAAMC,QAAQJ,cAAM,CAACK,SAAS,CAAC;QAC/BN,OAAOK,OAAOD,iBAAiB;IACjC;IAEAR,KAAK,oFAAoF;QACvF,MAAMC,IAAAA,wBAAa,gBAAC,qBAACC,sBAAU;YAAE,GAAGjB,SAAS;;QAE7C,MAAMwB,QAAQJ,cAAM,CAACK,SAAS,CAAC;QAE/B,iBAAiB;QACjBC,iBAAS,CAACC,MAAM,CAACH,OAAO;YAAEI,QAAQ;gBAAEC,OAAO;YAAQ;QAAE;QAErD,cAAc;QACdH,iBAAS,CAACI,OAAO,CAACN,OAAO;YAAEO,KAAK;YAASC,MAAM;QAAQ;QACvDb,OAAO/C,iBAAiB6D,qBAAqB,CAAC;QAE9C,aAAa;QACbP,iBAAS,CAACC,MAAM,CAACH,OAAO;YAAEI,QAAQ;gBAAEC,OAAO;YAAc;QAAE;QAE3D,8BAA8B;QAC9BH,iBAAS,CAACI,OAAO,CAACN,OAAO;YAAEO,KAAK;YAASC,MAAM;YAASE,UAAU;QAAK;QACvEf,OAAO/C,iBAAiB6D,qBAAqB,CAAC;QAE9C,mBAAmB;QACnBP,iBAAS,CAACI,OAAO,CAACN,OAAO;YAAEO,KAAK;YAASC,MAAM;YAASG,SAAS;QAAK;QACtEhB,OAAO/C,iBAAiB6D,qBAAqB,CAAC;IAChD;IAEAlB,KAAK,0DAA0D;QAC7D,MAAMC,IAAAA,wBAAa,gBAAC,qBAACC,sBAAU;YAAE,GAAGjB,SAAS;;QAE7C,kBAAkB;QAClBmB,OAAO,MAAMC,cAAM,CAACgB,UAAU,CAAC,wBAAwBb,iBAAiB;QAExE,qBAAqB;QACrBJ,OAAOC,cAAM,CAACK,SAAS,CAAC,UAAU;YAAEY,MAAM;QAAe,IAAId,iBAAiB;IAChF;IAEAR,KAAK,sEAAsE;QACzE,MAAMC,IAAAA,wBAAa,gBAAC,qBAACC,sBAAU;YAAE,GAAGjB,SAAS;;QAC7C,MAAMwB,QAAQJ,cAAM,CAACK,SAAS,CAAC;QAE/B,sBAAsB;QACtBN,OAAOK,MAAMc,WAAW,CAACC,WAAW,IAAIC,OAAO,CAAC;QAEhD,MAAMC,SAASrB,cAAM,CAACsB,WAAW,CAAC,UAAU;YAAEL,MAAM;QAAkB;QACtE,IAAII,QAAQ;YACVf,iBAAS,CAACiB,KAAK,CAACF;YAChB,iBAAiB;YACjBtB,OAAOC,cAAM,CAACwB,SAAS,CAAC,aAAarB,iBAAiB;YACtDJ,OAAOC,cAAM,CAACK,SAAS,CAAC,UAAU;gBAAEY,MAAM;YAAmB,IAAId,iBAAiB;YAClF,2DAA2D;YAC3DJ,OAAOK,MAAMc,WAAW,CAACC,WAAW,IAAIC,OAAO,CAAC;QAClD,OAAO;YACL,uEAAuE;YACvErB,OAAOK,MAAMc,WAAW,CAACC,WAAW,IAAIC,OAAO,CAAC;QAClD;IACF;IAEAzB,KAAK,oFAAoF;QACvF,2DAA2D;QAC3DhB,gBAAgB8C,sBAAsB,CAAC,IAAM,IAAIzD,QAAQ,CAACC,UAAYyD,WAAW,IAAMzD,QAAQ,EAAE,GAAG;QAEpG,MAAM,EAAE0D,SAAS,EAAE,GAAG,MAAM/B,IAAAA,wBAAa,gBAAC,qBAACC,sBAAU;YAAE,GAAGjB,SAAS;;QAEnE,gCAAgC;QAChCmB,OAAO4B,UAAUC,gBAAgB,CAAC,0BAA0BC,MAAM,EAAEC,eAAe,CAAC;QAEpF,gEAAgE;QAChE,MAAMhC,IAAAA,eAAO,EAAC;YACZC,OAAO4B,UAAUC,gBAAgB,CAAC,0BAA0BC,MAAM,EAAEE,IAAI,CAAC;YACzEhC,OAAOC,cAAM,CAACwB,SAAS,CAAC,kCAAkCrB,iBAAiB;QAC7E;IACF;IAEAR,KAAK,gDAAgD;QACnD,MAAM,EAAEgC,SAAS,EAAE,GAAG,MAAM/B,IAAAA,wBAAa,gBAAC,qBAACC,sBAAU;YAAE,GAAGjB,SAAS;;QAEnE,yCAAyC;QACzC,MAAMoD,cAAc,MAAMhC,cAAM,CAACiC,UAAU,CAAC,UAAU;YAAEhB,MAAM;QAAgB;QAC9EX,iBAAS,CAACiB,KAAK,CAACS;QAEhB,uBAAuB;QACvBjC,OAAO,MAAMC,cAAM,CAACgB,UAAU,CAAC,qBAAqBb,iBAAiB;QAErE,iBAAiB;QACjBG,iBAAS,CAACiB,KAAK,CAACvB,cAAM,CAACK,SAAS,CAAC,UAAU;YAAEY,MAAM;QAAQ;QAC3DlB,OAAO,MAAMC,cAAM,CAACgB,UAAU,CAAC,gBAAgBb,iBAAiB;QAEhE,mBAAmB;QACnBG,iBAAS,CAACiB,KAAK,CAACvB,cAAM,CAACK,SAAS,CAAC,UAAU;YAAEY,MAAM;QAAU;QAC7DlB,OAAO,MAAMC,cAAM,CAACgB,UAAU,CAAC,eAAeb,iBAAiB;IACjE;IAEAR,KAAK,mDAAmD;QACtD5E,KAAKmH,aAAa;QAClB,MAAM,EAAEP,SAAS,EAAE,GAAG,MAAM/B,IAAAA,wBAAa,gBAAC,qBAACC,sBAAU;YAAE,GAAGjB,SAAS;;QAEnE,+CAA+C;QAC/C,MAAMoB,cAAM,CAACmC,YAAY,CAAC;QAC1BpC,OAAO4B,UAAUC,gBAAgB,CAAC,yBAAyBC,MAAM,EAAEE,IAAI,CAAC;QAExE,oBAAoB;QACpBzB,iBAAS,CAACiB,KAAK,CAAC,MAAMvB,cAAM,CAACiC,UAAU,CAAC,UAAU;YAAEhB,MAAM;QAAgB;QAC1ElB,OAAO,MAAMC,cAAM,CAACgB,UAAU,CAAC,qBAAqBb,iBAAiB;QAErE,kBAAkB;QAClBG,iBAAS,CAACiB,KAAK,CAACvB,cAAM,CAACK,SAAS,CAAC,UAAU;YAAEY,MAAM;QAAmB;QAEtE,+EAA+E;QAC/E,0CAA0C;QAC1C,MAAMjB,cAAM,CAACoC,qBAAqB,CAAC;QACnC,MAAMpC,cAAM,CAACgB,UAAU,CAAC;QACxB,MAAMqB,IAAAA,WAAG,EAAC;YACRtH,KAAKuH,mBAAmB,CAAC;QAC3B;QAEA,cAAc;QACd,MAAMC,YAAY,MAAMvC,cAAM,CAACwC,WAAW,CAAC;QAC3ClC,iBAAS,CAACiB,KAAK,CAACgB;QAEhB,gCAAgC;QAChC,MAAMzC,IAAAA,eAAO,EAAC;YACZC,OAAO4B,UAAUC,gBAAgB,CAAC,yBAAyBC,MAAM,EAAEE,IAAI,CAAC;QAC1E;QAEAhH,KAAK0H,aAAa;IACpB;AACF"}