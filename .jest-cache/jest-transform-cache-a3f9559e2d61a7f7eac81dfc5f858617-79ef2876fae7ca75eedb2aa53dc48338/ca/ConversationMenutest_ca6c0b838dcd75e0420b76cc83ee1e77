249503f58c0a64dbda623b7e01774ea2
"use strict";
// Mock dropdown menu to render inline without portal behavior
jest.mock("@/components/ui/dropdown-menu", ()=>{
    const React = require("react");
    return {
        DropdownMenu: ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "dropdown-menu",
                children: children
            }),
        DropdownMenuTrigger: ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "dropdown-trigger",
                children: children
            }),
        DropdownMenuContent: ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                role: "menu",
                children: children
            }),
        DropdownMenuItem: ({ children, onClick })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                type: "button",
                onClick: onClick,
                role: "menuitem",
                children: children
            }),
        DropdownMenuSeparator: ({})=>/*#__PURE__*/ (0, _jsxruntime.jsx)("hr", {}),
        DropdownMenuLabel: ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                children: children
            }),
        DropdownMenuCheckboxItem: ({ children, checked, onCheckedChange })=>{
            const [local, setLocal] = React.useState(!!checked);
            return /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                type: "button",
                "aria-pressed": local,
                onClick: ()=>{
                    const next = !local;
                    setLocal(next);
                    onCheckedChange?.(next);
                },
                children: children
            });
        }
    };
});
// Mock alert dialog to render inline content and expose action buttons as simple buttons
jest.mock("@/components/ui/alert-dialog", ()=>{
    const React = require("react");
    return {
        AlertDialog: ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "alert-dialog",
                children: children
            }),
        AlertDialogTrigger: ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                children: children
            }),
        AlertDialogContent: ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                children: children
            }),
        AlertDialogHeader: ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                children: children
            }),
        AlertDialogFooter: ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                children: children
            }),
        AlertDialogTitle: ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                children: children
            }),
        AlertDialogDescription: ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                children: children
            }),
        AlertDialogAction: ({ children, onClick })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                type: "button",
                onClick: onClick,
                children: children
            }),
        AlertDialogCancel: ({ children, onClick })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                type: "button",
                onClick: onClick,
                children: children
            })
    };
});
// Mock user selector dialog to expose a simple confirm button
jest.mock("@/components/chat/UserSelectorDialog", ()=>({
        UserSelectorDialog: ({ onConfirm })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "user-selector-dialog",
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                    type: "button",
                    onClick: ()=>onConfirm([
                            "u1",
                            "u2"
                        ]),
                    children: "Confirm Invite"
                })
            })
    }));
jest.mock("next/navigation", ()=>({
        useRouter: ()=>({
                push: pushMock,
                replace: jest.fn(),
                prefetch: jest.fn(),
                back: jest.fn()
            })
    }));
jest.mock("@/components/ui/use-toast", ()=>({
        toast: (args)=>toastMock(args)
    }));
// Supabase client mock for loading flags
jest.mock("@/lib/supabase/client", ()=>({
        supabase: {
            from: ()=>({
                    select: ()=>({
                            eq: ()=>({
                                    eq: ()=>({
                                            maybeSingle: async ()=>({
                                                    data: {
                                                        is_archived: false
                                                    },
                                                    error: null
                                                })
                                        })
                                })
                        })
                })
        }
    }));
jest.mock("@/services/conversation-service", ()=>({
        conversationService: {
            deleteConversation: (...args)=>deleteConversationMock(...args)
        }
    }));
jest.mock("@/hooks/use-conversations", ()=>({
        useConversations: ()=>({
                archiveConversation: (...args)=>archiveSpy(...args),
                leaveConversation: (...args)=>leaveSpy(...args),
                inviteParticipants: (...args)=>inviteSpy(...args)
            })
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _ConversationMenu = require("../../components/chat/ConversationMenu");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Router mock
const pushMock = jest.fn();
// Toast mock
const toastMock = jest.fn();
// Conversation service delete mock
const deleteConversationMock = jest.fn();
// useConversations spies
const archiveSpy = jest.fn();
const leaveSpy = jest.fn();
const inviteSpy = jest.fn();
describe("ConversationMenu", ()=>{
    const baseProps = {
        chatId: "chat-1",
        currentUserId: "user-1"
    };
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    const openMenu = ()=>{
        // No-op since our mocked dropdown renders content inline
        const trigger = _react1.screen.getByRole("button", {
            name: /conversation options/i
        });
        _react1.fireEvent.click(trigger);
    };
    test('archive -> calls archiveConversation(chatId, true), navigates, onEnded("archived")', async ()=>{
        const onEnded = jest.fn();
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ConversationMenu.ConversationMenu, {
            ...baseProps,
            onEnded: onEnded
        }));
        openMenu();
        _react1.fireEvent.click(await _react1.screen.findByText(/archive conversation/i));
        await (0, _react1.waitFor)(()=>{
            expect(archiveSpy).toHaveBeenCalledWith("chat-1", true);
            expect(pushMock).toHaveBeenCalledWith("/messages");
            expect(onEnded).toHaveBeenCalledWith("archived");
        });
    });
    test("non-creator End chat -> leaveConversation and navigate", async ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ConversationMenu.ConversationMenu, {
            ...baseProps,
            creatorUserId: "creator-xyz"
        }));
        openMenu();
        _react1.fireEvent.click(await _react1.screen.findByText(/end chat/i));
        _react1.fireEvent.click(_react1.screen.getByRole("button", {
            name: /leave/i
        }));
        await (0, _react1.waitFor)(()=>{
            expect(leaveSpy).toHaveBeenCalledWith("chat-1");
            expect(pushMock).toHaveBeenCalledWith("/messages");
            expect(deleteConversationMock).not.toHaveBeenCalled();
        });
    });
    test("creator End chat -> deleteConversation", async ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ConversationMenu.ConversationMenu, {
            ...baseProps,
            creatorUserId: "user-1"
        }));
        openMenu();
        _react1.fireEvent.click(await _react1.screen.findByText(/end chat/i));
        _react1.fireEvent.click(_react1.screen.getByRole("button", {
            name: /^delete$/i
        }));
        await (0, _react1.waitFor)(()=>{
            expect(deleteConversationMock).toHaveBeenCalledWith("chat-1");
            expect(leaveSpy).not.toHaveBeenCalled();
        });
    });
    test("invite participants -> opens selector and confirms with ids", async ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ConversationMenu.ConversationMenu, {
            ...baseProps
        }));
        openMenu();
        _react1.fireEvent.click(await _react1.screen.findByText(/invite participants/i));
        _react1.fireEvent.click(await _react1.screen.findByText(/confirm invite/i));
        await (0, _react1.waitFor)(()=>{
            expect(inviteSpy).toHaveBeenCalledWith("chat-1", [
                "u1",
                "u2"
            ]);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,