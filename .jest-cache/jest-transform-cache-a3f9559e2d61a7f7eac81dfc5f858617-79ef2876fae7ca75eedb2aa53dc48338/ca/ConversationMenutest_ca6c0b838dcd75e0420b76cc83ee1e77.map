{"version":3,"sources":["/Users/elicharlese/CascadeProjects/AGENT/__tests__/components/ConversationMenu.test.tsx"],"sourcesContent":["import React from 'react'\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react'\nimport { ConversationMenu } from '@/components/chat/ConversationMenu'\n\n// Mock dropdown menu to render inline without portal behavior\njest.mock('@/components/ui/dropdown-menu', () => {\n  const React = require('react')\n  return {\n    DropdownMenu: ({ children }: any) => <div data-testid=\"dropdown-menu\">{children}</div>,\n    DropdownMenuTrigger: ({ children }: any) => <div data-testid=\"dropdown-trigger\">{children}</div>,\n    DropdownMenuContent: ({ children }: any) => <div role=\"menu\">{children}</div>,\n    DropdownMenuItem: ({ children, onClick }: any) => (\n      <button type=\"button\" onClick={onClick} role=\"menuitem\">{children}</button>\n    ),\n    DropdownMenuSeparator: ({}) => <hr />,\n    DropdownMenuLabel: ({ children }: any) => <div>{children}</div>,\n    DropdownMenuCheckboxItem: ({ children, checked, onCheckedChange }: any) => {\n      const [local, setLocal] = React.useState(!!checked)\n      return (\n        <button\n          type=\"button\"\n          aria-pressed={local}\n          onClick={() => {\n            const next = !local\n            setLocal(next)\n            onCheckedChange?.(next)\n          }}\n        >\n          {children}\n        </button>\n      )\n    },\n  }\n})\n\n// Mock alert dialog to render inline content and expose action buttons as simple buttons\njest.mock('@/components/ui/alert-dialog', () => {\n  const React = require('react')\n  return {\n    AlertDialog: ({ children }: any) => <div data-testid=\"alert-dialog\">{children}</div>,\n    AlertDialogTrigger: ({ children }: any) => <div>{children}</div>,\n    AlertDialogContent: ({ children }: any) => <div>{children}</div>,\n    AlertDialogHeader: ({ children }: any) => <div>{children}</div>,\n    AlertDialogFooter: ({ children }: any) => <div>{children}</div>,\n    AlertDialogTitle: ({ children }: any) => <div>{children}</div>,\n    AlertDialogDescription: ({ children }: any) => <div>{children}</div>,\n    AlertDialogAction: ({ children, onClick }: any) => (\n      <button type=\"button\" onClick={onClick}>{children}</button>\n    ),\n    AlertDialogCancel: ({ children, onClick }: any) => (\n      <button type=\"button\" onClick={onClick}>{children}</button>\n    ),\n  }\n})\n\n// Mock user selector dialog to expose a simple confirm button\njest.mock('@/components/chat/UserSelectorDialog', () => ({\n  UserSelectorDialog: ({ onConfirm }: any) => (\n    <div data-testid=\"user-selector-dialog\">\n      <button type=\"button\" onClick={() => onConfirm(['u1', 'u2'])}>Confirm Invite</button>\n    </div>\n  ),\n}))\n\n// Router mock\nconst pushMock = jest.fn()\njest.mock('next/navigation', () => ({\n  useRouter: () => ({ push: pushMock, replace: jest.fn(), prefetch: jest.fn(), back: jest.fn() }),\n}))\n\n// Toast mock\nconst toastMock = jest.fn()\njest.mock('@/components/ui/use-toast', () => ({\n  toast: (args: any) => toastMock(args),\n}))\n\n// Supabase client mock for loading flags\njest.mock('@/lib/supabase/client', () => ({\n  supabase: {\n    from: () => ({\n      select: () => ({\n        eq: () => ({\n          eq: () => ({\n            maybeSingle: async () => ({ data: { is_archived: false }, error: null }),\n          }),\n        }),\n      }),\n    }),\n  },\n}))\n\n// Conversation service delete mock\nconst deleteConversationMock = jest.fn()\njest.mock('@/services/conversation-service', () => ({\n  conversationService: {\n    deleteConversation: (...args: any[]) => deleteConversationMock(...args),\n  },\n}))\n\n// useConversations spies\nconst archiveSpy = jest.fn()\nconst leaveSpy = jest.fn()\nconst inviteSpy = jest.fn()\n\njest.mock('@/hooks/use-conversations', () => ({\n  useConversations: () => ({\n    archiveConversation: (...args: any[]) => archiveSpy(...args),\n    leaveConversation: (...args: any[]) => leaveSpy(...args),\n    inviteParticipants: (...args: any[]) => inviteSpy(...args),\n  }),\n}))\n\ndescribe('ConversationMenu', () => {\n  const baseProps = {\n    chatId: 'chat-1',\n    currentUserId: 'user-1',\n  }\n\n  beforeEach(() => {\n    jest.clearAllMocks()\n  })\n\n  const openMenu = () => {\n    // No-op since our mocked dropdown renders content inline\n    const trigger = screen.getByRole('button', { name: /conversation options/i })\n    fireEvent.click(trigger)\n  }\n\n  test('archive -> calls archiveConversation(chatId, true), navigates, onEnded(\"archived\")', async () => {\n    const onEnded = jest.fn()\n    render(<ConversationMenu {...baseProps} onEnded={onEnded} />)\n    openMenu()\n\n    fireEvent.click(await screen.findByText(/archive conversation/i))\n\n    await waitFor(() => {\n      expect(archiveSpy).toHaveBeenCalledWith('chat-1', true)\n      expect(pushMock).toHaveBeenCalledWith('/messages')\n      expect(onEnded).toHaveBeenCalledWith('archived')\n    })\n  })\n\n  test('non-creator End chat -> leaveConversation and navigate', async () => {\n    render(<ConversationMenu {...baseProps} creatorUserId=\"creator-xyz\" />)\n    openMenu()\n\n    fireEvent.click(await screen.findByText(/end chat/i))\n    fireEvent.click(screen.getByRole('button', { name: /leave/i }))\n\n    await waitFor(() => {\n      expect(leaveSpy).toHaveBeenCalledWith('chat-1')\n      expect(pushMock).toHaveBeenCalledWith('/messages')\n      expect(deleteConversationMock).not.toHaveBeenCalled()\n    })\n  })\n\n  test('creator End chat -> deleteConversation', async () => {\n    render(<ConversationMenu {...baseProps} creatorUserId=\"user-1\" />)\n    openMenu()\n\n    fireEvent.click(await screen.findByText(/end chat/i))\n    fireEvent.click(screen.getByRole('button', { name: /^delete$/i }))\n\n    await waitFor(() => {\n      expect(deleteConversationMock).toHaveBeenCalledWith('chat-1')\n      expect(leaveSpy).not.toHaveBeenCalled()\n    })\n  })\n\n  test('invite participants -> opens selector and confirms with ids', async () => {\n    render(<ConversationMenu {...baseProps} />)\n    openMenu()\n\n    fireEvent.click(await screen.findByText(/invite participants/i))\n    fireEvent.click(await screen.findByText(/confirm invite/i))\n\n    await waitFor(() => {\n      expect(inviteSpy).toHaveBeenCalledWith('chat-1', ['u1', 'u2'])\n    })\n  })\n})\n"],"names":["jest","mock","React","require","DropdownMenu","children","div","data-testid","DropdownMenuTrigger","DropdownMenuContent","role","DropdownMenuItem","onClick","button","type","DropdownMenuSeparator","hr","DropdownMenuLabel","DropdownMenuCheckboxItem","checked","onCheckedChange","local","setLocal","useState","aria-pressed","next","AlertDialog","AlertDialogTrigger","AlertDialogContent","AlertDialogHeader","AlertDialogFooter","AlertDialogTitle","AlertDialogDescription","AlertDialogAction","AlertDialogCancel","UserSelectorDialog","onConfirm","useRouter","push","pushMock","replace","fn","prefetch","back","toast","args","toastMock","supabase","from","select","eq","maybeSingle","data","is_archived","error","conversationService","deleteConversation","deleteConversationMock","useConversations","archiveConversation","archiveSpy","leaveConversation","leaveSpy","inviteParticipants","inviteSpy","describe","baseProps","chatId","currentUserId","beforeEach","clearAllMocks","openMenu","trigger","screen","getByRole","name","fireEvent","click","test","onEnded","render","ConversationMenu","findByText","waitFor","expect","toHaveBeenCalledWith","creatorUserId","not","toHaveBeenCalled"],"mappings":";AAIA,8DAA8D;AAC9DA,KAAKC,IAAI,CAAC,iCAAiC;IACzC,MAAMC,QAAQC,QAAQ;IACtB,OAAO;QACLC,cAAc,CAAC,EAAEC,QAAQ,EAAO,iBAAK,qBAACC;gBAAIC,eAAY;0BAAiBF;;QACvEG,qBAAqB,CAAC,EAAEH,QAAQ,EAAO,iBAAK,qBAACC;gBAAIC,eAAY;0BAAoBF;;QACjFI,qBAAqB,CAAC,EAAEJ,QAAQ,EAAO,iBAAK,qBAACC;gBAAII,MAAK;0BAAQL;;QAC9DM,kBAAkB,CAAC,EAAEN,QAAQ,EAAEO,OAAO,EAAO,iBAC3C,qBAACC;gBAAOC,MAAK;gBAASF,SAASA;gBAASF,MAAK;0BAAYL;;QAE3DU,uBAAuB,CAAC,EAAE,iBAAK,qBAACC;QAChCC,mBAAmB,CAAC,EAAEZ,QAAQ,EAAO,iBAAK,qBAACC;0BAAKD;;QAChDa,0BAA0B,CAAC,EAAEb,QAAQ,EAAEc,OAAO,EAAEC,eAAe,EAAO;YACpE,MAAM,CAACC,OAAOC,SAAS,GAAGpB,MAAMqB,QAAQ,CAAC,CAAC,CAACJ;YAC3C,qBACE,qBAACN;gBACCC,MAAK;gBACLU,gBAAcH;gBACdT,SAAS;oBACP,MAAMa,OAAO,CAACJ;oBACdC,SAASG;oBACTL,kBAAkBK;gBACpB;0BAECpB;;QAGP;IACF;AACF;AAEA,yFAAyF;AACzFL,KAAKC,IAAI,CAAC,gCAAgC;IACxC,MAAMC,QAAQC,QAAQ;IACtB,OAAO;QACLuB,aAAa,CAAC,EAAErB,QAAQ,EAAO,iBAAK,qBAACC;gBAAIC,eAAY;0BAAgBF;;QACrEsB,oBAAoB,CAAC,EAAEtB,QAAQ,EAAO,iBAAK,qBAACC;0BAAKD;;QACjDuB,oBAAoB,CAAC,EAAEvB,QAAQ,EAAO,iBAAK,qBAACC;0BAAKD;;QACjDwB,mBAAmB,CAAC,EAAExB,QAAQ,EAAO,iBAAK,qBAACC;0BAAKD;;QAChDyB,mBAAmB,CAAC,EAAEzB,QAAQ,EAAO,iBAAK,qBAACC;0BAAKD;;QAChD0B,kBAAkB,CAAC,EAAE1B,QAAQ,EAAO,iBAAK,qBAACC;0BAAKD;;QAC/C2B,wBAAwB,CAAC,EAAE3B,QAAQ,EAAO,iBAAK,qBAACC;0BAAKD;;QACrD4B,mBAAmB,CAAC,EAAE5B,QAAQ,EAAEO,OAAO,EAAO,iBAC5C,qBAACC;gBAAOC,MAAK;gBAASF,SAASA;0BAAUP;;QAE3C6B,mBAAmB,CAAC,EAAE7B,QAAQ,EAAEO,OAAO,EAAO,iBAC5C,qBAACC;gBAAOC,MAAK;gBAASF,SAASA;0BAAUP;;IAE7C;AACF;AAEA,8DAA8D;AAC9DL,KAAKC,IAAI,CAAC,wCAAwC,IAAO,CAAA;QACvDkC,oBAAoB,CAAC,EAAEC,SAAS,EAAO,iBACrC,qBAAC9B;gBAAIC,eAAY;0BACf,cAAA,qBAACM;oBAAOC,MAAK;oBAASF,SAAS,IAAMwB,UAAU;4BAAC;4BAAM;yBAAK;8BAAG;;;IAGpE,CAAA;AAIApC,KAAKC,IAAI,CAAC,mBAAmB,IAAO,CAAA;QAClCoC,WAAW,IAAO,CAAA;gBAAEC,MAAMC;gBAAUC,SAASxC,KAAKyC,EAAE;gBAAIC,UAAU1C,KAAKyC,EAAE;gBAAIE,MAAM3C,KAAKyC,EAAE;YAAG,CAAA;IAC/F,CAAA;AAIAzC,KAAKC,IAAI,CAAC,6BAA6B,IAAO,CAAA;QAC5C2C,OAAO,CAACC,OAAcC,UAAUD;IAClC,CAAA;AAEA,yCAAyC;AACzC7C,KAAKC,IAAI,CAAC,yBAAyB,IAAO,CAAA;QACxC8C,UAAU;YACRC,MAAM,IAAO,CAAA;oBACXC,QAAQ,IAAO,CAAA;4BACbC,IAAI,IAAO,CAAA;oCACTA,IAAI,IAAO,CAAA;4CACTC,aAAa,UAAa,CAAA;oDAAEC,MAAM;wDAAEC,aAAa;oDAAM;oDAAGC,OAAO;gDAAK,CAAA;wCACxE,CAAA;gCACF,CAAA;wBACF,CAAA;gBACF,CAAA;QACF;IACF,CAAA;AAIAtD,KAAKC,IAAI,CAAC,mCAAmC,IAAO,CAAA;QAClDsD,qBAAqB;YACnBC,oBAAoB,CAAC,GAAGX,OAAgBY,0BAA0BZ;QACpE;IACF,CAAA;AAOA7C,KAAKC,IAAI,CAAC,6BAA6B,IAAO,CAAA;QAC5CyD,kBAAkB,IAAO,CAAA;gBACvBC,qBAAqB,CAAC,GAAGd,OAAgBe,cAAcf;gBACvDgB,mBAAmB,CAAC,GAAGhB,OAAgBiB,YAAYjB;gBACnDkB,oBAAoB,CAAC,GAAGlB,OAAgBmB,aAAanB;YACvD,CAAA;IACF,CAAA;;;;;8DA9GkB;wBACiC;kCAClB;;;;;;AA8DjC,cAAc;AACd,MAAMN,WAAWvC,KAAKyC,EAAE;AAKxB,aAAa;AACb,MAAMK,YAAY9C,KAAKyC,EAAE;AAoBzB,mCAAmC;AACnC,MAAMgB,yBAAyBzD,KAAKyC,EAAE;AAOtC,yBAAyB;AACzB,MAAMmB,aAAa5D,KAAKyC,EAAE;AAC1B,MAAMqB,WAAW9D,KAAKyC,EAAE;AACxB,MAAMuB,YAAYhE,KAAKyC,EAAE;AAUzBwB,SAAS,oBAAoB;IAC3B,MAAMC,YAAY;QAChBC,QAAQ;QACRC,eAAe;IACjB;IAEAC,WAAW;QACTrE,KAAKsE,aAAa;IACpB;IAEA,MAAMC,WAAW;QACf,yDAAyD;QACzD,MAAMC,UAAUC,cAAM,CAACC,SAAS,CAAC,UAAU;YAAEC,MAAM;QAAwB;QAC3EC,iBAAS,CAACC,KAAK,CAACL;IAClB;IAEAM,KAAK,sFAAsF;QACzF,MAAMC,UAAU/E,KAAKyC,EAAE;QACvBuC,IAAAA,cAAM,gBAAC,qBAACC,kCAAgB;YAAE,GAAGf,SAAS;YAAEa,SAASA;;QACjDR;QAEAK,iBAAS,CAACC,KAAK,CAAC,MAAMJ,cAAM,CAACS,UAAU,CAAC;QAExC,MAAMC,IAAAA,eAAO,EAAC;YACZC,OAAOxB,YAAYyB,oBAAoB,CAAC,UAAU;YAClDD,OAAO7C,UAAU8C,oBAAoB,CAAC;YACtCD,OAAOL,SAASM,oBAAoB,CAAC;QACvC;IACF;IAEAP,KAAK,0DAA0D;QAC7DE,IAAAA,cAAM,gBAAC,qBAACC,kCAAgB;YAAE,GAAGf,SAAS;YAAEoB,eAAc;;QACtDf;QAEAK,iBAAS,CAACC,KAAK,CAAC,MAAMJ,cAAM,CAACS,UAAU,CAAC;QACxCN,iBAAS,CAACC,KAAK,CAACJ,cAAM,CAACC,SAAS,CAAC,UAAU;YAAEC,MAAM;QAAS;QAE5D,MAAMQ,IAAAA,eAAO,EAAC;YACZC,OAAOtB,UAAUuB,oBAAoB,CAAC;YACtCD,OAAO7C,UAAU8C,oBAAoB,CAAC;YACtCD,OAAO3B,wBAAwB8B,GAAG,CAACC,gBAAgB;QACrD;IACF;IAEAV,KAAK,0CAA0C;QAC7CE,IAAAA,cAAM,gBAAC,qBAACC,kCAAgB;YAAE,GAAGf,SAAS;YAAEoB,eAAc;;QACtDf;QAEAK,iBAAS,CAACC,KAAK,CAAC,MAAMJ,cAAM,CAACS,UAAU,CAAC;QACxCN,iBAAS,CAACC,KAAK,CAACJ,cAAM,CAACC,SAAS,CAAC,UAAU;YAAEC,MAAM;QAAY;QAE/D,MAAMQ,IAAAA,eAAO,EAAC;YACZC,OAAO3B,wBAAwB4B,oBAAoB,CAAC;YACpDD,OAAOtB,UAAUyB,GAAG,CAACC,gBAAgB;QACvC;IACF;IAEAV,KAAK,+DAA+D;QAClEE,IAAAA,cAAM,gBAAC,qBAACC,kCAAgB;YAAE,GAAGf,SAAS;;QACtCK;QAEAK,iBAAS,CAACC,KAAK,CAAC,MAAMJ,cAAM,CAACS,UAAU,CAAC;QACxCN,iBAAS,CAACC,KAAK,CAAC,MAAMJ,cAAM,CAACS,UAAU,CAAC;QAExC,MAAMC,IAAAA,eAAO,EAAC;YACZC,OAAOpB,WAAWqB,oBAAoB,CAAC,UAAU;gBAAC;gBAAM;aAAK;QAC/D;IACF;AACF"}