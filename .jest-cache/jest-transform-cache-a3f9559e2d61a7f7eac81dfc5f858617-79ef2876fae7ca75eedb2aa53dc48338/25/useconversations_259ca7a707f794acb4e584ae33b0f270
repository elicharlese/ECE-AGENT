faed2f931fbcf462c5aa408c56fed810
"use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useConversations", {
    enumerable: true,
    get: function() {
        return useConversations;
    }
});
const _react = require("react");
const _conversationservice = /*#__PURE__*/ _interop_require_wildcard(require("../services/conversation-service"));
const _client = require("../lib/supabase/client");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
function useConversations() {
    const [conversations, setConversations] = (0, _react.useState)([]);
    const [loading, setLoading] = (0, _react.useState)(true);
    const [error, setError] = (0, _react.useState)(null);
    const fetchConversations = async ()=>{
        try {
            setLoading(true);
            setError(null);
            const data = await _conversationservice.getConversations();
            setConversations(data);
        } catch (err) {
            setError(err instanceof Error ? err.message : "Failed to fetch conversations");
            console.error("Error fetching conversations:", err);
        } finally{
            setLoading(false);
        }
    };
    const createConversation = async (title)=>{
        try {
            const newConversation = await _conversationservice.createConversation(title);
            setConversations((prev)=>[
                    newConversation,
                    ...prev
                ]);
            return newConversation;
        } catch (err) {
            setError(err instanceof Error ? err.message : "Failed to create conversation");
            console.error("Error creating conversation:", err);
            throw err;
        }
    };
    const createConversationWithParticipants = async (title, participantIds = [], agentId)=>{
        try {
            const newConversation = await _conversationservice.createConversationWithParticipants(title, participantIds, agentId);
            setConversations((prev)=>[
                    newConversation,
                    ...prev
                ]);
            return newConversation;
        } catch (err) {
            setError(err instanceof Error ? err.message : "Failed to create conversation");
            console.error("Error creating conversation with participants:", err);
            throw err;
        }
    };
    const updateConversation = async (id, updates)=>{
        try {
            const updatedConversation = await _conversationservice.updateConversation(id, updates);
            setConversations((prev)=>prev.map((conv)=>conv.id === id ? updatedConversation : conv));
            return updatedConversation;
        } catch (err) {
            setError(err instanceof Error ? err.message : "Failed to update conversation");
            console.error("Error updating conversation:", err);
            throw err;
        }
    };
    const deleteConversation = async (id)=>{
        try {
            await _conversationservice.deleteConversation(id);
            setConversations((prev)=>prev.filter((conv)=>conv.id !== id));
        } catch (err) {
            setError(err instanceof Error ? err.message : "Failed to delete conversation");
            console.error("Error deleting conversation:", err);
            throw err;
        }
    };
    const archiveConversation = async (conversationId, archived)=>{
        try {
            await _conversationservice.archiveConversation(conversationId, archived);
            await fetchConversations();
        } catch (err) {
            setError(err instanceof Error ? err.message : "Failed to archive conversation");
            throw err;
        }
    };
    const leaveConversation = async (conversationId)=>{
        try {
            await _conversationservice.leaveConversation(conversationId);
            setConversations((prev)=>prev.filter((c)=>c.id !== conversationId));
        } catch (err) {
            setError(err instanceof Error ? err.message : "Failed to leave conversation");
            throw err;
        }
    };
    const inviteParticipants = async (conversationId, userIds)=>{
        try {
            await _conversationservice.inviteParticipants(conversationId, userIds);
        // No change to list needed; server will emit participant events
        } catch (err) {
            setError(err instanceof Error ? err.message : "Failed to invite participants");
            throw err;
        }
    };
    (0, _react.useEffect)(()=>{
        fetchConversations();
        // Subscribe to conversation updates so sidebar stays fresh
        const channel = _client.supabase.channel("conversations-changes").on("postgres_changes", {
            event: "INSERT",
            schema: "public",
            table: "conversations"
        }, ()=>{
            fetchConversations();
        }).on("postgres_changes", {
            event: "UPDATE",
            schema: "public",
            table: "conversations"
        }, ()=>{
            fetchConversations();
        }).on("postgres_changes", {
            event: "DELETE",
            schema: "public",
            table: "conversations"
        }, ()=>{
            fetchConversations();
        })// Listen for membership flag changes and joins/leaves
        .on("postgres_changes", {
            event: "*",
            schema: "public",
            table: "conversation_participants"
        }, ()=>{
            fetchConversations();
        }).subscribe();
        return ()=>{
            _client.supabase.removeChannel(channel);
        };
    }, []);
    return {
        conversations,
        loading,
        error,
        fetchConversations,
        createConversation,
        createConversationWithParticipants,
        updateConversation,
        deleteConversation,
        archiveConversation,
        leaveConversation,
        inviteParticipants
    };
}

//# sourceMappingURL=data:application/json;base64,