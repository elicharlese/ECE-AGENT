{"version":3,"sources":["/Users/elicharlese/CascadeProjects/AGENT/hooks/use-conversations.ts"],"sourcesContent":["\"use client\"\n\nimport { useState, useEffect } from 'react'\nimport { Conversation } from '@/services/conversation-service'\nimport * as conversationService from '@/services/conversation-service'\nimport { supabase } from '@/lib/supabase/client'\n\nexport function useConversations() {\n  const [conversations, setConversations] = useState<Conversation[]>([])\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState<string | null>(null)\n\n  const fetchConversations = async () => {\n    try {\n      setLoading(true)\n      setError(null)\n      const data = await conversationService.getConversations()\n      setConversations(data)\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to fetch conversations')\n      console.error('Error fetching conversations:', err)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const createConversation = async (title: string) => {\n    try {\n      const newConversation = await conversationService.createConversation(title)\n      setConversations(prev => [newConversation, ...prev])\n      return newConversation\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to create conversation')\n      console.error('Error creating conversation:', err)\n      throw err\n    }\n  }\n\n  const createConversationWithParticipants = async (\n    title: string,\n    participantIds: string[] = [],\n    agentId?: string,\n  ) => {\n    try {\n      const newConversation = await conversationService.createConversationWithParticipants(\n        title,\n        participantIds,\n        agentId,\n      )\n      setConversations(prev => [newConversation, ...prev])\n      return newConversation\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to create conversation')\n      console.error('Error creating conversation with participants:', err)\n      throw err\n    }\n  }\n\n  const updateConversation = async (id: string, updates: Partial<Conversation>) => {\n    try {\n      const updatedConversation = await conversationService.updateConversation(id, updates)\n      setConversations(prev => \n        prev.map(conv => conv.id === id ? updatedConversation : conv)\n      )\n      return updatedConversation\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to update conversation')\n      console.error('Error updating conversation:', err)\n      throw err\n    }\n  }\n\n  const deleteConversation = async (id: string) => {\n    try {\n      await conversationService.deleteConversation(id)\n      setConversations(prev => prev.filter(conv => conv.id !== id))\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to delete conversation')\n      console.error('Error deleting conversation:', err)\n      throw err\n    }\n  }\n\n  const archiveConversation = async (conversationId: string, archived: boolean) => {\n    try {\n      await conversationService.archiveConversation(conversationId, archived)\n      await fetchConversations()\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to archive conversation')\n      throw err\n    }\n  }\n\n  const leaveConversation = async (conversationId: string) => {\n    try {\n      await conversationService.leaveConversation(conversationId)\n      setConversations(prev => prev.filter(c => c.id !== conversationId))\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to leave conversation')\n      throw err\n    }\n  }\n\n  const inviteParticipants = async (conversationId: string, userIds: string[]) => {\n    try {\n      await conversationService.inviteParticipants(conversationId, userIds)\n      // No change to list needed; server will emit participant events\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to invite participants')\n      throw err\n    }\n  }\n\n  useEffect(() => {\n    fetchConversations()\n    // Subscribe to conversation updates so sidebar stays fresh\n    const channel = supabase\n      .channel('conversations-changes')\n      .on('postgres_changes', { event: 'INSERT', schema: 'public', table: 'conversations' }, () => {\n        fetchConversations()\n      })\n      .on('postgres_changes', { event: 'UPDATE', schema: 'public', table: 'conversations' }, () => {\n        fetchConversations()\n      })\n      .on('postgres_changes', { event: 'DELETE', schema: 'public', table: 'conversations' }, () => {\n        fetchConversations()\n      })\n      // Listen for membership flag changes and joins/leaves\n      .on('postgres_changes', { event: '*', schema: 'public', table: 'conversation_participants' }, () => {\n        fetchConversations()\n      })\n      .subscribe()\n\n    return () => {\n      supabase.removeChannel(channel)\n    }\n  }, [])\n\n  return {\n    conversations,\n    loading,\n    error,\n    fetchConversations,\n    createConversation,\n    createConversationWithParticipants,\n    updateConversation,\n    deleteConversation,\n    archiveConversation,\n    leaveConversation,\n    inviteParticipants,\n  }\n}\n"],"names":["useConversations","conversations","setConversations","useState","loading","setLoading","error","setError","fetchConversations","data","conversationService","getConversations","err","Error","message","console","createConversation","title","newConversation","prev","createConversationWithParticipants","participantIds","agentId","updateConversation","id","updates","updatedConversation","map","conv","deleteConversation","filter","archiveConversation","conversationId","archived","leaveConversation","c","inviteParticipants","userIds","useEffect","channel","supabase","on","event","schema","table","subscribe","removeChannel"],"mappings":"AAAA;;;;;+BAOgBA;;;eAAAA;;;uBALoB;6EAEC;wBACZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAElB,SAASA;IACd,MAAM,CAACC,eAAeC,iBAAiB,GAAGC,IAAAA,eAAQ,EAAiB,EAAE;IACrE,MAAM,CAACC,SAASC,WAAW,GAAGF,IAAAA,eAAQ,EAAC;IACvC,MAAM,CAACG,OAAOC,SAAS,GAAGJ,IAAAA,eAAQ,EAAgB;IAElD,MAAMK,qBAAqB;QACzB,IAAI;YACFH,WAAW;YACXE,SAAS;YACT,MAAME,OAAO,MAAMC,qBAAoBC,gBAAgB;YACvDT,iBAAiBO;QACnB,EAAE,OAAOG,KAAK;YACZL,SAASK,eAAeC,QAAQD,IAAIE,OAAO,GAAG;YAC9CC,QAAQT,KAAK,CAAC,iCAAiCM;QACjD,SAAU;YACRP,WAAW;QACb;IACF;IAEA,MAAMW,qBAAqB,OAAOC;QAChC,IAAI;YACF,MAAMC,kBAAkB,MAAMR,qBAAoBM,kBAAkB,CAACC;YACrEf,iBAAiBiB,CAAAA,OAAQ;oBAACD;uBAAoBC;iBAAK;YACnD,OAAOD;QACT,EAAE,OAAON,KAAK;YACZL,SAASK,eAAeC,QAAQD,IAAIE,OAAO,GAAG;YAC9CC,QAAQT,KAAK,CAAC,gCAAgCM;YAC9C,MAAMA;QACR;IACF;IAEA,MAAMQ,qCAAqC,OACzCH,OACAI,iBAA2B,EAAE,EAC7BC;QAEA,IAAI;YACF,MAAMJ,kBAAkB,MAAMR,qBAAoBU,kCAAkC,CAClFH,OACAI,gBACAC;YAEFpB,iBAAiBiB,CAAAA,OAAQ;oBAACD;uBAAoBC;iBAAK;YACnD,OAAOD;QACT,EAAE,OAAON,KAAK;YACZL,SAASK,eAAeC,QAAQD,IAAIE,OAAO,GAAG;YAC9CC,QAAQT,KAAK,CAAC,kDAAkDM;YAChE,MAAMA;QACR;IACF;IAEA,MAAMW,qBAAqB,OAAOC,IAAYC;QAC5C,IAAI;YACF,MAAMC,sBAAsB,MAAMhB,qBAAoBa,kBAAkB,CAACC,IAAIC;YAC7EvB,iBAAiBiB,CAAAA,OACfA,KAAKQ,GAAG,CAACC,CAAAA,OAAQA,KAAKJ,EAAE,KAAKA,KAAKE,sBAAsBE;YAE1D,OAAOF;QACT,EAAE,OAAOd,KAAK;YACZL,SAASK,eAAeC,QAAQD,IAAIE,OAAO,GAAG;YAC9CC,QAAQT,KAAK,CAAC,gCAAgCM;YAC9C,MAAMA;QACR;IACF;IAEA,MAAMiB,qBAAqB,OAAOL;QAChC,IAAI;YACF,MAAMd,qBAAoBmB,kBAAkB,CAACL;YAC7CtB,iBAAiBiB,CAAAA,OAAQA,KAAKW,MAAM,CAACF,CAAAA,OAAQA,KAAKJ,EAAE,KAAKA;QAC3D,EAAE,OAAOZ,KAAK;YACZL,SAASK,eAAeC,QAAQD,IAAIE,OAAO,GAAG;YAC9CC,QAAQT,KAAK,CAAC,gCAAgCM;YAC9C,MAAMA;QACR;IACF;IAEA,MAAMmB,sBAAsB,OAAOC,gBAAwBC;QACzD,IAAI;YACF,MAAMvB,qBAAoBqB,mBAAmB,CAACC,gBAAgBC;YAC9D,MAAMzB;QACR,EAAE,OAAOI,KAAK;YACZL,SAASK,eAAeC,QAAQD,IAAIE,OAAO,GAAG;YAC9C,MAAMF;QACR;IACF;IAEA,MAAMsB,oBAAoB,OAAOF;QAC/B,IAAI;YACF,MAAMtB,qBAAoBwB,iBAAiB,CAACF;YAC5C9B,iBAAiBiB,CAAAA,OAAQA,KAAKW,MAAM,CAACK,CAAAA,IAAKA,EAAEX,EAAE,KAAKQ;QACrD,EAAE,OAAOpB,KAAK;YACZL,SAASK,eAAeC,QAAQD,IAAIE,OAAO,GAAG;YAC9C,MAAMF;QACR;IACF;IAEA,MAAMwB,qBAAqB,OAAOJ,gBAAwBK;QACxD,IAAI;YACF,MAAM3B,qBAAoB0B,kBAAkB,CAACJ,gBAAgBK;QAC7D,gEAAgE;QAClE,EAAE,OAAOzB,KAAK;YACZL,SAASK,eAAeC,QAAQD,IAAIE,OAAO,GAAG;YAC9C,MAAMF;QACR;IACF;IAEA0B,IAAAA,gBAAS,EAAC;QACR9B;QACA,2DAA2D;QAC3D,MAAM+B,UAAUC,gBAAQ,CACrBD,OAAO,CAAC,yBACRE,EAAE,CAAC,oBAAoB;YAAEC,OAAO;YAAUC,QAAQ;YAAUC,OAAO;QAAgB,GAAG;YACrFpC;QACF,GACCiC,EAAE,CAAC,oBAAoB;YAAEC,OAAO;YAAUC,QAAQ;YAAUC,OAAO;QAAgB,GAAG;YACrFpC;QACF,GACCiC,EAAE,CAAC,oBAAoB;YAAEC,OAAO;YAAUC,QAAQ;YAAUC,OAAO;QAAgB,GAAG;YACrFpC;QACF,EACA,sDAAsD;SACrDiC,EAAE,CAAC,oBAAoB;YAAEC,OAAO;YAAKC,QAAQ;YAAUC,OAAO;QAA4B,GAAG;YAC5FpC;QACF,GACCqC,SAAS;QAEZ,OAAO;YACLL,gBAAQ,CAACM,aAAa,CAACP;QACzB;IACF,GAAG,EAAE;IAEL,OAAO;QACLtC;QACAG;QACAE;QACAE;QACAQ;QACAI;QACAG;QACAM;QACAE;QACAG;QACAE;IACF;AACF"}