565fcbead91c7ecc9877de783fd25f0d
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("@testing-library/react");
const _ErrorBoundary = require("../../components/ErrorBoundary");
// Component that throws an error for testing
function ThrowError({ shouldThrow = false }) {
    if (shouldThrow) {
        throw new Error("Test error");
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
        children: "No error"
    });
}
describe("ErrorBoundary", ()=>{
    // Suppress console.error for these tests
    const originalError = console.error;
    beforeAll(()=>{
        console.error = jest.fn();
    });
    afterAll(()=>{
        console.error = originalError;
    });
    it("renders children when there is no error", ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorBoundary.ErrorBoundary, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ThrowError, {})
        }));
        expect(_react.screen.getByText("No error")).toBeInTheDocument();
    });
    it("renders error fallback when child throws error", ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorBoundary.ErrorBoundary, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ThrowError, {
                shouldThrow: true
            })
        }));
        expect(_react.screen.getByText("Something went wrong")).toBeInTheDocument();
        expect(_react.screen.getByText("Test error")).toBeInTheDocument();
        expect(_react.screen.getByRole("button", {
            name: /try again/i
        })).toBeInTheDocument();
    });
    it("calls retry function when retry button is clicked", ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorBoundary.ErrorBoundary, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ThrowError, {
                shouldThrow: true
            })
        }));
        const retryButton = _react.screen.getByRole("button", {
            name: /try again/i
        });
        _react.fireEvent.click(retryButton);
        // After retry, should render children again (no error)
        expect(_react.screen.getByText("No error")).toBeInTheDocument();
    });
    it("calls onError callback when error occurs", ()=>{
        const mockOnError = jest.fn();
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorBoundary.ErrorBoundary, {
            onError: mockOnError,
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ThrowError, {
                shouldThrow: true
            })
        }));
        expect(mockOnError).toHaveBeenCalledWith(expect.any(Error), expect.objectContaining({
            componentStack: expect.any(String)
        }));
    });
    it("renders custom fallback component when provided", ()=>{
        const CustomFallback = ({ error, retry })=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("span", {
                        children: [
                            "Custom error: ",
                            error.message
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                        onClick: retry,
                        children: "Custom retry"
                    })
                ]
            });
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorBoundary.ErrorBoundary, {
            fallback: CustomFallback,
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ThrowError, {
                shouldThrow: true
            })
        }));
        expect(_react.screen.getByText("Custom error: Test error")).toBeInTheDocument();
        expect(_react.screen.getByRole("button", {
            name: /custom retry/i
        })).toBeInTheDocument();
    });
});
describe("ChatErrorBoundary", ()=>{
    const originalError = console.error;
    beforeAll(()=>{
        console.error = jest.fn();
    });
    afterAll(()=>{
        console.error = originalError;
    });
    it("renders chat-specific error fallback", ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorBoundary.ChatErrorBoundary, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ThrowError, {
                shouldThrow: true
            })
        }));
        expect(_react.screen.getByText("Chat unavailable")).toBeInTheDocument();
        expect(_react.screen.getByText("Unable to load the chat interface.")).toBeInTheDocument();
        expect(_react.screen.getByRole("button", {
            name: /retry/i
        })).toBeInTheDocument();
    });
    it("has proper styling for chat context", ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorBoundary.ChatErrorBoundary, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ThrowError, {
                shouldThrow: true
            })
        }));
        const container = _react.screen.getByText("Chat unavailable").closest("div");
        expect(container).toHaveClass("h-full", "flex", "items-center", "justify-center");
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9lbGljaGFybGVzZS9DYXNjYWRlUHJvamVjdHMvQUdFTlQvX190ZXN0c19fL2NvbXBvbmVudHMvRXJyb3JCb3VuZGFyeS50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZW5kZXIsIHNjcmVlbiwgZmlyZUV2ZW50IH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdCdcbmltcG9ydCB7IEVycm9yQm91bmRhcnksIENoYXRFcnJvckJvdW5kYXJ5IH0gZnJvbSAnQC9jb21wb25lbnRzL0Vycm9yQm91bmRhcnknXG5cbi8vIENvbXBvbmVudCB0aGF0IHRocm93cyBhbiBlcnJvciBmb3IgdGVzdGluZ1xuZnVuY3Rpb24gVGhyb3dFcnJvcih7IHNob3VsZFRocm93ID0gZmFsc2UgfTogeyBzaG91bGRUaHJvdz86IGJvb2xlYW4gfSkge1xuICBpZiAoc2hvdWxkVGhyb3cpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1Rlc3QgZXJyb3InKVxuICB9XG4gIHJldHVybiA8ZGl2Pk5vIGVycm9yPC9kaXY+XG59XG5cbmRlc2NyaWJlKCdFcnJvckJvdW5kYXJ5JywgKCkgPT4ge1xuICAvLyBTdXBwcmVzcyBjb25zb2xlLmVycm9yIGZvciB0aGVzZSB0ZXN0c1xuICBjb25zdCBvcmlnaW5hbEVycm9yID0gY29uc29sZS5lcnJvclxuICBiZWZvcmVBbGwoKCkgPT4ge1xuICAgIGNvbnNvbGUuZXJyb3IgPSBqZXN0LmZuKClcbiAgfSlcbiAgYWZ0ZXJBbGwoKCkgPT4ge1xuICAgIGNvbnNvbGUuZXJyb3IgPSBvcmlnaW5hbEVycm9yXG4gIH0pXG5cbiAgaXQoJ3JlbmRlcnMgY2hpbGRyZW4gd2hlbiB0aGVyZSBpcyBubyBlcnJvcicsICgpID0+IHtcbiAgICByZW5kZXIoXG4gICAgICA8RXJyb3JCb3VuZGFyeT5cbiAgICAgICAgPFRocm93RXJyb3IgLz5cbiAgICAgIDwvRXJyb3JCb3VuZGFyeT5cbiAgICApXG4gICAgXG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ05vIGVycm9yJykpLnRvQmVJblRoZURvY3VtZW50KClcbiAgfSlcblxuICBpdCgncmVuZGVycyBlcnJvciBmYWxsYmFjayB3aGVuIGNoaWxkIHRocm93cyBlcnJvcicsICgpID0+IHtcbiAgICByZW5kZXIoXG4gICAgICA8RXJyb3JCb3VuZGFyeT5cbiAgICAgICAgPFRocm93RXJyb3Igc2hvdWxkVGhyb3cgLz5cbiAgICAgIDwvRXJyb3JCb3VuZGFyeT5cbiAgICApXG4gICAgXG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ1NvbWV0aGluZyB3ZW50IHdyb25nJykpLnRvQmVJblRoZURvY3VtZW50KClcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnVGVzdCBlcnJvcicpKS50b0JlSW5UaGVEb2N1bWVudCgpXG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVJvbGUoJ2J1dHRvbicsIHsgbmFtZTogL3RyeSBhZ2Fpbi9pIH0pKS50b0JlSW5UaGVEb2N1bWVudCgpXG4gIH0pXG5cbiAgaXQoJ2NhbGxzIHJldHJ5IGZ1bmN0aW9uIHdoZW4gcmV0cnkgYnV0dG9uIGlzIGNsaWNrZWQnLCAoKSA9PiB7XG4gICAgcmVuZGVyKFxuICAgICAgPEVycm9yQm91bmRhcnk+XG4gICAgICAgIDxUaHJvd0Vycm9yIHNob3VsZFRocm93IC8+XG4gICAgICA8L0Vycm9yQm91bmRhcnk+XG4gICAgKVxuICAgIFxuICAgIGNvbnN0IHJldHJ5QnV0dG9uID0gc2NyZWVuLmdldEJ5Um9sZSgnYnV0dG9uJywgeyBuYW1lOiAvdHJ5IGFnYWluL2kgfSlcbiAgICBmaXJlRXZlbnQuY2xpY2socmV0cnlCdXR0b24pXG4gICAgXG4gICAgLy8gQWZ0ZXIgcmV0cnksIHNob3VsZCByZW5kZXIgY2hpbGRyZW4gYWdhaW4gKG5vIGVycm9yKVxuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdObyBlcnJvcicpKS50b0JlSW5UaGVEb2N1bWVudCgpXG4gIH0pXG5cbiAgaXQoJ2NhbGxzIG9uRXJyb3IgY2FsbGJhY2sgd2hlbiBlcnJvciBvY2N1cnMnLCAoKSA9PiB7XG4gICAgY29uc3QgbW9ja09uRXJyb3IgPSBqZXN0LmZuKClcbiAgICBcbiAgICByZW5kZXIoXG4gICAgICA8RXJyb3JCb3VuZGFyeSBvbkVycm9yPXttb2NrT25FcnJvcn0+XG4gICAgICAgIDxUaHJvd0Vycm9yIHNob3VsZFRocm93IC8+XG4gICAgICA8L0Vycm9yQm91bmRhcnk+XG4gICAgKVxuICAgIFxuICAgIGV4cGVjdChtb2NrT25FcnJvcikudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICBleHBlY3QuYW55KEVycm9yKSxcbiAgICAgIGV4cGVjdC5vYmplY3RDb250YWluaW5nKHtcbiAgICAgICAgY29tcG9uZW50U3RhY2s6IGV4cGVjdC5hbnkoU3RyaW5nKVxuICAgICAgfSlcbiAgICApXG4gIH0pXG5cbiAgaXQoJ3JlbmRlcnMgY3VzdG9tIGZhbGxiYWNrIGNvbXBvbmVudCB3aGVuIHByb3ZpZGVkJywgKCkgPT4ge1xuICAgIGNvbnN0IEN1c3RvbUZhbGxiYWNrID0gKHsgZXJyb3IsIHJldHJ5IH06IHsgZXJyb3I6IEVycm9yOyByZXRyeTogKCkgPT4gdm9pZCB9KSA9PiAoXG4gICAgICA8ZGl2PlxuICAgICAgICA8c3Bhbj5DdXN0b20gZXJyb3I6IHtlcnJvci5tZXNzYWdlfTwvc3Bhbj5cbiAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXtyZXRyeX0+Q3VzdG9tIHJldHJ5PC9idXR0b24+XG4gICAgICA8L2Rpdj5cbiAgICApXG5cbiAgICByZW5kZXIoXG4gICAgICA8RXJyb3JCb3VuZGFyeSBmYWxsYmFjaz17Q3VzdG9tRmFsbGJhY2t9PlxuICAgICAgICA8VGhyb3dFcnJvciBzaG91bGRUaHJvdyAvPlxuICAgICAgPC9FcnJvckJvdW5kYXJ5PlxuICAgIClcbiAgICBcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnQ3VzdG9tIGVycm9yOiBUZXN0IGVycm9yJykpLnRvQmVJblRoZURvY3VtZW50KClcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5Um9sZSgnYnV0dG9uJywgeyBuYW1lOiAvY3VzdG9tIHJldHJ5L2kgfSkpLnRvQmVJblRoZURvY3VtZW50KClcbiAgfSlcbn0pXG5cbmRlc2NyaWJlKCdDaGF0RXJyb3JCb3VuZGFyeScsICgpID0+IHtcbiAgY29uc3Qgb3JpZ2luYWxFcnJvciA9IGNvbnNvbGUuZXJyb3JcbiAgYmVmb3JlQWxsKCgpID0+IHtcbiAgICBjb25zb2xlLmVycm9yID0gamVzdC5mbigpXG4gIH0pXG4gIGFmdGVyQWxsKCgpID0+IHtcbiAgICBjb25zb2xlLmVycm9yID0gb3JpZ2luYWxFcnJvclxuICB9KVxuXG4gIGl0KCdyZW5kZXJzIGNoYXQtc3BlY2lmaWMgZXJyb3IgZmFsbGJhY2snLCAoKSA9PiB7XG4gICAgcmVuZGVyKFxuICAgICAgPENoYXRFcnJvckJvdW5kYXJ5PlxuICAgICAgICA8VGhyb3dFcnJvciBzaG91bGRUaHJvdyAvPlxuICAgICAgPC9DaGF0RXJyb3JCb3VuZGFyeT5cbiAgICApXG4gICAgXG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ0NoYXQgdW5hdmFpbGFibGUnKSkudG9CZUluVGhlRG9jdW1lbnQoKVxuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdVbmFibGUgdG8gbG9hZCB0aGUgY2hhdCBpbnRlcmZhY2UuJykpLnRvQmVJblRoZURvY3VtZW50KClcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5Um9sZSgnYnV0dG9uJywgeyBuYW1lOiAvcmV0cnkvaSB9KSkudG9CZUluVGhlRG9jdW1lbnQoKVxuICB9KVxuXG4gIGl0KCdoYXMgcHJvcGVyIHN0eWxpbmcgZm9yIGNoYXQgY29udGV4dCcsICgpID0+IHtcbiAgICByZW5kZXIoXG4gICAgICA8Q2hhdEVycm9yQm91bmRhcnk+XG4gICAgICAgIDxUaHJvd0Vycm9yIHNob3VsZFRocm93IC8+XG4gICAgICA8L0NoYXRFcnJvckJvdW5kYXJ5PlxuICAgIClcbiAgICBcbiAgICBjb25zdCBjb250YWluZXIgPSBzY3JlZW4uZ2V0QnlUZXh0KCdDaGF0IHVuYXZhaWxhYmxlJykuY2xvc2VzdCgnZGl2JylcbiAgICBleHBlY3QoY29udGFpbmVyKS50b0hhdmVDbGFzcygnaC1mdWxsJywgJ2ZsZXgnLCAnaXRlbXMtY2VudGVyJywgJ2p1c3RpZnktY2VudGVyJylcbiAgfSlcbn0pXG4iXSwibmFtZXMiOlsiVGhyb3dFcnJvciIsInNob3VsZFRocm93IiwiRXJyb3IiLCJkaXYiLCJkZXNjcmliZSIsIm9yaWdpbmFsRXJyb3IiLCJjb25zb2xlIiwiZXJyb3IiLCJiZWZvcmVBbGwiLCJqZXN0IiwiZm4iLCJhZnRlckFsbCIsIml0IiwicmVuZGVyIiwiRXJyb3JCb3VuZGFyeSIsImV4cGVjdCIsInNjcmVlbiIsImdldEJ5VGV4dCIsInRvQmVJblRoZURvY3VtZW50IiwiZ2V0QnlSb2xlIiwibmFtZSIsInJldHJ5QnV0dG9uIiwiZmlyZUV2ZW50IiwiY2xpY2siLCJtb2NrT25FcnJvciIsIm9uRXJyb3IiLCJ0b0hhdmVCZWVuQ2FsbGVkV2l0aCIsImFueSIsIm9iamVjdENvbnRhaW5pbmciLCJjb21wb25lbnRTdGFjayIsIlN0cmluZyIsIkN1c3RvbUZhbGxiYWNrIiwicmV0cnkiLCJzcGFuIiwibWVzc2FnZSIsImJ1dHRvbiIsIm9uQ2xpY2siLCJmYWxsYmFjayIsIkNoYXRFcnJvckJvdW5kYXJ5IiwiY29udGFpbmVyIiwiY2xvc2VzdCIsInRvSGF2ZUNsYXNzIl0sIm1hcHBpbmdzIjoiOzs7Ozt1QkFBMEM7K0JBQ087QUFFakQsNkNBQTZDO0FBQzdDLFNBQVNBLFdBQVcsRUFBRUMsY0FBYyxLQUFLLEVBQTZCO0lBQ3BFLElBQUlBLGFBQWE7UUFDZixNQUFNLElBQUlDLE1BQU07SUFDbEI7SUFDQSxxQkFBTyxxQkFBQ0M7a0JBQUk7O0FBQ2Q7QUFFQUMsU0FBUyxpQkFBaUI7SUFDeEIseUNBQXlDO0lBQ3pDLE1BQU1DLGdCQUFnQkMsUUFBUUMsS0FBSztJQUNuQ0MsVUFBVTtRQUNSRixRQUFRQyxLQUFL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