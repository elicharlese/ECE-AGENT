{"version":3,"sources":["/Users/elicharlese/CascadeProjects/AGENT/__tests__/pages/auth.page.test.ts"],"sourcesContent":["// Mocks for Next.js and Supabase server client used by the auth page\njest.mock('next/navigation', () => ({\n  redirect: jest.fn(),\n}))\n\njest.mock('@/lib/supabase/server', () => ({\n  getSupabaseServer: jest.fn(),\n}))\n\n// Mock LoginForm to avoid heavy client-side deps; we just echo props for assertions\nimport React from 'react'\njest.mock('@/components/login-form', () => ({\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  LoginForm: (props: any) => React.createElement('div', { id: 'mock-login-form', 'data-return-to': props?.returnTo || '' }),\n}))\n\ndescribe('app/auth/page.tsx (AuthPage) behavior', () => {\n  const { redirect } = require('next/navigation') as { redirect: jest.Mock }\n  const { getSupabaseServer } = require('@/lib/supabase/server') as { getSupabaseServer: jest.Mock }\n\n  afterEach(() => {\n    // Do not reset module registry; it breaks the mocked module instance reference.\n    // Instead clear mocks between tests.\n    jest.clearAllMocks()\n    getSupabaseServer.mockReset()\n  })\n\n  test('redirects to /messages when session exists and no returnTo', async () => {\n    getSupabaseServer.mockResolvedValue({\n      auth: {\n        getSession: jest.fn().mockResolvedValue({ data: { session: { user: { id: 'u1' } } } }),\n      },\n    })\n\n    const mod = await import('@/app/auth/page')\n    const AuthPage = mod.default as (args: { searchParams: Promise<{ returnTo?: string }> }) => Promise<unknown>\n\n    await AuthPage({ searchParams: Promise.resolve({}) })\n\n    expect(redirect).toHaveBeenCalledTimes(1)\n    expect(redirect).toHaveBeenCalledWith('/messages')\n  })\n\n  test('redirects to returnTo when session exists and returnTo is a safe path', async () => {\n    getSupabaseServer.mockResolvedValue({\n      auth: {\n        getSession: jest.fn().mockResolvedValue({ data: { session: { user: { id: 'u1' } } } }),\n      },\n    })\n\n    const mod = await import('@/app/auth/page')\n    const AuthPage = mod.default as (args: { searchParams: Promise<{ returnTo?: string }> }) => Promise<unknown>\n\n    await AuthPage({ searchParams: Promise.resolve({ returnTo: '/inbox' }) })\n\n    expect(redirect).toHaveBeenCalledTimes(1)\n    expect(redirect).toHaveBeenCalledWith('/inbox')\n  })\n\n  test('ignores unsafe returnTo and redirects to /messages', async () => {\n    getSupabaseServer.mockResolvedValue({\n      auth: {\n        getSession: jest.fn().mockResolvedValue({ data: { session: { user: { id: 'u1' } } } }),\n      },\n    })\n\n    const mod = await import('@/app/auth/page')\n    const AuthPage = mod.default as (args: { searchParams: Promise<{ returnTo?: string }> }) => Promise<unknown>\n\n    await AuthPage({ searchParams: Promise.resolve({ returnTo: 'https://evil.com' }) })\n\n    expect(redirect).toHaveBeenCalledTimes(1)\n    expect(redirect).toHaveBeenCalledWith('/messages')\n  })\n\n  test('renders LoginForm when no session; passes through returnTo', async () => {\n    getSupabaseServer.mockResolvedValue({\n      auth: {\n        getSession: jest.fn().mockResolvedValue({ data: { session: null } }),\n      },\n    })\n\n    const mod = await import('@/app/auth/page')\n    const AuthPage = mod.default as (args: { searchParams: Promise<{ returnTo?: string }> }) => Promise<any>\n\n    const el = await AuthPage({ searchParams: Promise.resolve({ returnTo: '/messages' }) })\n\n    expect(redirect).not.toHaveBeenCalled()\n    expect(el).toBeTruthy()\n    // Server component returns a React element with props for LoginForm; it is not rendered here.\n    expect((el as any)?.props?.returnTo).toBe('/messages')\n  })\n})\n"],"names":["jest","mock","redirect","fn","getSupabaseServer","LoginForm","props","React","createElement","id","returnTo","describe","require","afterEach","clearAllMocks","mockReset","test","mockResolvedValue","auth","getSession","data","session","user","mod","AuthPage","default","searchParams","Promise","resolve","expect","toHaveBeenCalledTimes","toHaveBeenCalledWith","el","not","toHaveBeenCalled","toBeTruthy","toBe"],"mappings":"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"}