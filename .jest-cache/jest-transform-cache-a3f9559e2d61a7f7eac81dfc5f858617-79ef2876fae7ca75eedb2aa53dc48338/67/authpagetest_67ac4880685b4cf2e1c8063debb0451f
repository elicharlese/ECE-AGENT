731b146c5151c33b01084a10432f4a30
// Mocks for Next.js and Supabase server client used by the auth page
"use strict";
jest.mock("next/navigation", ()=>({
        redirect: jest.fn()
    }));
jest.mock("@/lib/supabase/server", ()=>({
        getSupabaseServer: jest.fn()
    }));
jest.mock("@/components/login-form", ()=>({
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        LoginForm: (props)=>_react.default.createElement("div", {
                id: "mock-login-form",
                "data-return-to": props?.returnTo || ""
            })
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
describe("app/auth/page.tsx (AuthPage) behavior", ()=>{
    const { redirect } = require("next/navigation");
    const { getSupabaseServer } = require("@/lib/supabase/server");
    afterEach(()=>{
        // Do not reset module registry; it breaks the mocked module instance reference.
        // Instead clear mocks between tests.
        jest.clearAllMocks();
        getSupabaseServer.mockReset();
    });
    test("redirects to /messages when session exists and no returnTo", async ()=>{
        getSupabaseServer.mockResolvedValue({
            auth: {
                getSession: jest.fn().mockResolvedValue({
                    data: {
                        session: {
                            user: {
                                id: "u1"
                            }
                        }
                    }
                })
            }
        });
        const mod = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../app/auth/page")));
        const AuthPage = mod.default;
        await AuthPage({
            searchParams: Promise.resolve({})
        });
        expect(redirect).toHaveBeenCalledTimes(1);
        expect(redirect).toHaveBeenCalledWith("/messages");
    });
    test("redirects to returnTo when session exists and returnTo is a safe path", async ()=>{
        getSupabaseServer.mockResolvedValue({
            auth: {
                getSession: jest.fn().mockResolvedValue({
                    data: {
                        session: {
                            user: {
                                id: "u1"
                            }
                        }
                    }
                })
            }
        });
        const mod = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../app/auth/page")));
        const AuthPage = mod.default;
        await AuthPage({
            searchParams: Promise.resolve({
                returnTo: "/inbox"
            })
        });
        expect(redirect).toHaveBeenCalledTimes(1);
        expect(redirect).toHaveBeenCalledWith("/inbox");
    });
    test("ignores unsafe returnTo and redirects to /messages", async ()=>{
        getSupabaseServer.mockResolvedValue({
            auth: {
                getSession: jest.fn().mockResolvedValue({
                    data: {
                        session: {
                            user: {
                                id: "u1"
                            }
                        }
                    }
                })
            }
        });
        const mod = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../app/auth/page")));
        const AuthPage = mod.default;
        await AuthPage({
            searchParams: Promise.resolve({
                returnTo: "https://evil.com"
            })
        });
        expect(redirect).toHaveBeenCalledTimes(1);
        expect(redirect).toHaveBeenCalledWith("/messages");
    });
    test("renders LoginForm when no session; passes through returnTo", async ()=>{
        getSupabaseServer.mockResolvedValue({
            auth: {
                getSession: jest.fn().mockResolvedValue({
                    data: {
                        session: null
                    }
                })
            }
        });
        const mod = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../app/auth/page")));
        const AuthPage = mod.default;
        const el = await AuthPage({
            searchParams: Promise.resolve({
                returnTo: "/messages"
            })
        });
        expect(redirect).not.toHaveBeenCalled();
        expect(el).toBeTruthy();
        // Server component returns a React element with props for LoginForm; it is not rendered here.
        expect(el?.props?.returnTo).toBe("/messages");
    });
});

//# sourceMappingURL=data:application/json;base64,