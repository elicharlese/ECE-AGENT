{"version":3,"sources":["/Users/elicharlese/CascadeProjects/AGENT/__tests__/components/MCPToolsPanel.test.tsx"],"sourcesContent":["import React from 'react'\nimport { render, screen } from '@testing-library/react'\nimport { MCPToolsPanel } from '@/components/mcp/mcp-tools-panel'\n\njest.mock('@/services/mcp-service', () => {\n  const mockTools = [\n    {\n      id: 'db-query',\n      name: 'Database Query',\n      description: 'Execute SQL queries',\n      category: 'database',\n      enabled: true,\n    },\n  ]\n  const listeners: Array<(e: string) => void> = []\n  return {\n    mcpService: {\n      getTools: jest.fn(() => mockTools),\n      getGateways: jest.fn(() => []),\n      getMcpStatus: jest.fn(() => ({ connected: false, sessionId: null, streaming: false, lastEventAt: null })),\n      onMcpEvent: jest.fn((cb: (e: string) => void) => listeners.push(cb)),\n      offMcpEvent: jest.fn((cb: (e: string) => void) => {\n        const i = listeners.indexOf(cb)\n        if (i >= 0) listeners.splice(i, 1)\n      }),\n      toggleTool: jest.fn(),\n      connectGitHub: jest.fn(async () => ({})),\n      disconnectGitHub: jest.fn(),\n      startMcpStreaming: jest.fn(async () => {}),\n      stopMcpStreaming: jest.fn(() => {}),\n      executeTool: jest.fn(async () => ({ success: true })),\n    },\n  }\n})\n\ndescribe('MCPToolsPanel', () => {\n  it('renders header and GitHub gateway section', () => {\n    render(<MCPToolsPanel chatId=\"test-chat\" />)\n\n    expect(screen.getByText('MCP Tools')).toBeInTheDocument()\n    expect(screen.getByText('GitHub Gateway')).toBeInTheDocument()\n  })\n\n  it('renders available tools in the current category', () => {\n    render(<MCPToolsPanel chatId=\"test-chat\" />)\n\n    // Default expanded category is 'database', so our mocked tool should be visible\n    expect(screen.getByText('Database Query')).toBeInTheDocument()\n    expect(screen.getByText('Tools')).toBeInTheDocument()\n  })\n})\n"],"names":["jest","mock","mockTools","id","name","description","category","enabled","listeners","mcpService","getTools","fn","getGateways","getMcpStatus","connected","sessionId","streaming","lastEventAt","onMcpEvent","cb","push","offMcpEvent","i","indexOf","splice","toggleTool","connectGitHub","disconnectGitHub","startMcpStreaming","stopMcpStreaming","executeTool","success","describe","it","render","MCPToolsPanel","chatId","expect","screen","getByText","toBeInTheDocument"],"mappings":";AAIAA,KAAKC,IAAI,CAAC,0BAA0B;IAClC,MAAMC,YAAY;QAChB;YACEC,IAAI;YACJC,MAAM;YACNC,aAAa;YACbC,UAAU;YACVC,SAAS;QACX;KACD;IACD,MAAMC,YAAwC,EAAE;IAChD,OAAO;QACLC,YAAY;YACVC,UAAUV,KAAKW,EAAE,CAAC,IAAMT;YACxBU,aAAaZ,KAAKW,EAAE,CAAC,IAAM,EAAE;YAC7BE,cAAcb,KAAKW,EAAE,CAAC,IAAO,CAAA;oBAAEG,WAAW;oBAAOC,WAAW;oBAAMC,WAAW;oBAAOC,aAAa;gBAAK,CAAA;YACtGC,YAAYlB,KAAKW,EAAE,CAAC,CAACQ,KAA4BX,UAAUY,IAAI,CAACD;YAChEE,aAAarB,KAAKW,EAAE,CAAC,CAACQ;gBACpB,MAAMG,IAAId,UAAUe,OAAO,CAACJ;gBAC5B,IAAIG,KAAK,GAAGd,UAAUgB,MAAM,CAACF,GAAG;YAClC;YACAG,YAAYzB,KAAKW,EAAE;YACnBe,eAAe1B,KAAKW,EAAE,CAAC,UAAa,CAAA,CAAC,CAAA;YACrCgB,kBAAkB3B,KAAKW,EAAE;YACzBiB,mBAAmB5B,KAAKW,EAAE,CAAC,WAAa;YACxCkB,kBAAkB7B,KAAKW,EAAE,CAAC,KAAO;YACjCmB,aAAa9B,KAAKW,EAAE,CAAC,UAAa,CAAA;oBAAEoB,SAAS;gBAAK,CAAA;QACpD;IACF;AACF;;;;;8DAjCkB;wBACa;+BACD;;;;;;AAiC9BC,SAAS,iBAAiB;IACxBC,GAAG,6CAA6C;QAC9CC,IAAAA,cAAM,gBAAC,qBAACC,4BAAa;YAACC,QAAO;;QAE7BC,OAAOC,cAAM,CAACC,SAAS,CAAC,cAAcC,iBAAiB;QACvDH,OAAOC,cAAM,CAACC,SAAS,CAAC,mBAAmBC,iBAAiB;IAC9D;IAEAP,GAAG,mDAAmD;QACpDC,IAAAA,cAAM,gBAAC,qBAACC,4BAAa;YAACC,QAAO;;QAE7B,gFAAgF;QAChFC,OAAOC,cAAM,CAACC,SAAS,CAAC,mBAAmBC,iBAAiB;QAC5DH,OAAOC,cAAM,CAACC,SAAS,CAAC,UAAUC,iBAAiB;IACrD;AACF"}