{"version":3,"sources":["/Users/elicharlese/CascadeProjects/AGENT/services/profile-service.ts"],"sourcesContent":["import { supabase } from '@/lib/supabase/client'\n\nexport interface Profile {\n  user_id: string\n  username: string\n  full_name?: string | null\n  avatar_url?: string | null\n  cover_url?: string | null\n  solana_address?: string | null\n  // Optional JSONB field for user preferences; added via migration 009\n  settings?: Record<string, any> | null\n  created_at: string\n  updated_at: string\n}\n\n// Lookup by supported wallet address fields (currently Solana only)\nexport async function getProfileByWalletAddress(address: string): Promise<Profile | null> {\n  const wallet = address.trim()\n  if (!wallet) return null\n  // Currently only Solana addresses are stored on profiles as `solana_address`\n  const { data, error } = await supabase\n    .from('profiles')\n    .select('*')\n    .eq('solana_address', wallet)\n    .maybeSingle()\n\n  if (error) {\n    console.error('getProfileByWalletAddress error', error)\n    throw new Error(error.message)\n  }\n  return data ?? null\n}\n\nfunction hasCode(e: unknown): e is { code: string } {\n  return typeof (e as { code?: unknown })?.code === 'string'\n}\n\nconst sanitizeUsername = (raw: string) =>\n  raw\n    .trim()\n    .toLowerCase()\n    .replace(/[^a-z0-9_]+/g, '-')\n    .replace(/^-+|-+$/g, '')\n\nexport async function getProfileByUserId(userId: string): Promise<Profile | null> {\n  const { data, error } = await supabase\n    .from('profiles')\n    .select('*')\n    .eq('user_id', userId)\n    .single()\n\n  if (error) {\n    if (hasCode(error) && error.code === 'PGRST116') return null\n    console.error('getProfileByUserId error', error)\n    throw new Error(error.message)\n  }\n  return data\n}\n\nexport async function getProfileByUsername(username: string): Promise<Profile | null> {\n  const normalized = sanitizeUsername(username)\n  const { data, error } = await supabase\n    .from('profiles')\n    .select('*')\n    // Exact match on normalized username\n    .eq('username', normalized)\n    .single()\n\n  if (error) {\n    if (hasCode(error) && error.code === 'PGRST116') return null\n    console.error('getProfileByUsername error', error)\n    throw new Error(error.message)\n  }\n  return data\n}\n\n// Identifier lookup helper: supports username, email (uses email local-part normalization), or user_id (UUID)\nexport async function getProfileByIdentifier(identifier: string): Promise<Profile | null> {\n  const id = identifier.trim()\n  if (!id) return null\n\n  // user_id (UUID v4 or similar)\n  const isUUID = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(id)\n  if (isUUID) {\n    return getProfileByUserId(id)\n  }\n\n  // email -> map to normalized username derived from local part\n  if (id.includes('@')) {\n    const local = id.split('@')[0] ?? ''\n    return getProfileByUsername(local)\n  }\n\n  // fall back to username lookup\n  return getProfileByUsername(id)\n}\n\n// List/search profiles with optional exclusion of the current user\nexport async function listProfiles(options?: { search?: string; excludeSelf?: boolean; limit?: number }): Promise<Profile[]> {\n  const search = options?.search?.trim()\n  const excludeSelf = options?.excludeSelf ?? true\n  const limit = options?.limit ?? 100\n\n  let query = supabase\n    .from('profiles')\n    .select('*')\n    .order('updated_at', { ascending: false })\n    .limit(limit)\n\n  try {\n    if (excludeSelf) {\n      const { data: auth } = await supabase.auth.getUser()\n      if (auth?.user?.id) {\n        query = query.neq('user_id', auth.user.id)\n      }\n    }\n\n    if (search && search.length > 0) {\n      // If an email was typed, search by its local-part normalized like our username policy\n      const normalized = search.includes('@')\n        ? sanitizeUsername(search.split('@')[0] ?? '')\n        : search\n      const pattern = `%${normalized}%`\n      // Search username OR full_name\n      query = query.or(`username.ilike.${pattern},full_name.ilike.${pattern}`)\n    }\n\n    const { data, error } = await query\n    if (error) {\n      console.error('listProfiles error', error)\n      return []\n    }\n    return data ?? []\n  } catch (e) {\n    console.error('listProfiles exception', e)\n    return []\n  }\n}\n\nexport async function ensureProfile(): Promise<Profile> {\n  const { data: auth } = await supabase.auth.getUser()\n  if (!auth?.user) throw new Error('Not authenticated')\n\n  const existing = await getProfileByUserId(auth.user.id)\n  if (existing) return existing\n\n  // Derive a username from email or user id\n  const base = auth.user.email ? sanitizeUsername(auth.user.email.split('@')[0]) : `user-${auth.user.id.slice(0, 8)}`\n\n  // Ensure unique username\n  let candidate = base || `user-${auth.user.id.slice(0, 8)}`\n  for (let i = 0; i < 5; i++) {\n    const { data: taken } = await supabase\n      .from('profiles')\n      .select('user_id')\n      .ilike('username', candidate)\n      .maybeSingle()\n\n    if (!taken) break\n    candidate = `${base}-${Math.floor(1000 + Math.random() * 9000)}`\n  }\n\n  const { data, error } = await supabase\n    .from('profiles')\n    .insert({ user_id: auth.user.id, username: candidate, full_name: auth.user.user_metadata?.full_name ?? null, avatar_url: auth.user.user_metadata?.avatar_url ?? null })\n    .select()\n    .single()\n\n  if (error) {\n    console.error('ensureProfile insert error', error)\n    throw new Error(error.message)\n  }\n  return data\n}\n\nexport async function updateProfile(patch: Partial<Pick<Profile, 'username' | 'full_name' | 'avatar_url' | 'cover_url' | 'solana_address'>>): Promise<Profile> {\n  const { data: auth } = await supabase.auth.getUser()\n  if (!auth?.user) throw new Error('Not authenticated')\n\n  const updates: Partial<Pick<Profile, 'username' | 'full_name' | 'avatar_url' | 'cover_url' | 'solana_address'>> = { ...patch }\n  if (patch.username) updates.username = sanitizeUsername(patch.username)\n\n  const { data, error } = await supabase\n    .from('profiles')\n    .update(updates)\n    .eq('user_id', auth.user.id)\n    .select()\n    .single()\n\n  if (error) {\n    console.error('updateProfile error', error)\n    throw new Error(error.message)\n  }\n  return data\n}\n\n// ----- Settings helpers -----\nexport type WorkspaceSettings = {\n  autoSaveItems?: boolean\n  showItemPreviews?: boolean\n  enableRTC?: boolean\n  showTypingIndicators?: boolean\n  enableReactions?: boolean\n  autoScroll?: boolean\n}\n\nasync function getOwnProfile(): Promise<Profile | null> {\n  const { data: auth } = await supabase.auth.getUser()\n  if (!auth?.user?.id) return null\n  return getProfileByUserId(auth.user.id)\n}\n\nexport async function getSettings(): Promise<Record<string, any>> {\n  const me = await getOwnProfile()\n  return (me?.settings as Record<string, any>) ?? {}\n}\n\nexport async function updateSettings(updates: Record<string, any>): Promise<Profile> {\n  const { data: auth } = await supabase.auth.getUser()\n  if (!auth?.user) throw new Error('Not authenticated')\n  const current = await getSettings()\n  const next = { ...current, ...updates }\n  const { data, error } = await supabase\n    .from('profiles')\n    .update({ settings: next })\n    .eq('user_id', auth.user.id)\n    .select()\n    .single()\n  if (error) {\n    console.error('updateSettings error', error)\n    throw new Error(error.message)\n  }\n  return data\n}\n\nexport async function getWorkspaceSettings(chatId: string | undefined): Promise<WorkspaceSettings> {\n  if (!chatId) return {}\n  const s = await getSettings()\n  return (s.workspaces?.[chatId] as WorkspaceSettings) ?? {}\n}\n\nexport async function setWorkspaceSettings(chatId: string | undefined, ws: WorkspaceSettings): Promise<void> {\n  if (!chatId) return\n  const s = await getSettings()\n  const next = {\n    ...s,\n    workspaces: {\n      ...(s.workspaces ?? {}),\n      [chatId]: ws,\n    },\n  }\n  await updateSettings(next)\n}\n\n// Convenience wrapper API used by components like components/user/user-profile.tsx\nexport const profileService = {\n  // Alias to get by user id\n  async getProfile(userId: string) {\n    return getProfileByUserId(userId)\n  },\n  async updateProfile(\n    id: string,\n    patch: Partial<Pick<Profile, 'username' | 'full_name' | 'avatar_url' | 'cover_url' | 'solana_address'>>\n  ) {\n    const { data: auth } = await supabase.auth.getUser()\n    if (!auth?.user) throw new Error('Not authenticated')\n    if (id && id !== auth.user.id) {\n      throw new Error('Cannot update another user\\'s profile')\n    }\n    // Directly pass the typed patch; updateProfile handles username normalization\n    return updateProfile(patch)\n  },\n  // Settings API\n  getSettings,\n  updateSettings,\n  getWorkspaceSettings,\n  setWorkspaceSettings,\n  getProfileByUserId,\n  getProfileByUsername,\n  getProfileByIdentifier,\n  getProfileByWalletAddress,\n  listProfiles,\n  ensureProfile,\n}\n"],"names":["ensureProfile","getProfileByIdentifier","getProfileByUserId","getProfileByUsername","getProfileByWalletAddress","getSettings","getWorkspaceSettings","listProfiles","profileService","setWorkspaceSettings","updateProfile","updateSettings","address","wallet","trim","data","error","supabase","from","select","eq","maybeSingle","console","Error","message","hasCode","e","code","sanitizeUsername","raw","toLowerCase","replace","userId","single","username","normalized","identifier","id","isUUID","test","includes","local","split","options","search","excludeSelf","limit","query","order","ascending","auth","getUser","user","neq","length","pattern","or","existing","base","email","slice","candidate","i","taken","ilike","Math","floor","random","insert","user_id","full_name","user_metadata","avatar_url","patch","updates","update","getOwnProfile","me","settings","current","next","chatId","s","workspaces","ws","getProfile"],"mappings":"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"}