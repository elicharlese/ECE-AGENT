8c6a7b9904faa86408d6cd3eb5e293f2
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    ensureProfile: function() {
        return ensureProfile;
    },
    getProfileByIdentifier: function() {
        return getProfileByIdentifier;
    },
    getProfileByUserId: function() {
        return getProfileByUserId;
    },
    getProfileByUsername: function() {
        return getProfileByUsername;
    },
    getProfileByWalletAddress: function() {
        return getProfileByWalletAddress;
    },
    getSettings: function() {
        return getSettings;
    },
    getWorkspaceSettings: function() {
        return getWorkspaceSettings;
    },
    listProfiles: function() {
        return listProfiles;
    },
    profileService: function() {
        return profileService;
    },
    setWorkspaceSettings: function() {
        return setWorkspaceSettings;
    },
    updateProfile: function() {
        return updateProfile;
    },
    updateSettings: function() {
        return updateSettings;
    }
});
const _client = require("../lib/supabase/client");
async function getProfileByWalletAddress(address) {
    const wallet = address.trim();
    if (!wallet) return null;
    // Currently only Solana addresses are stored on profiles as `solana_address`
    const { data, error } = await _client.supabase.from("profiles").select("*").eq("solana_address", wallet).maybeSingle();
    if (error) {
        console.error("getProfileByWalletAddress error", error);
        throw new Error(error.message);
    }
    return data ?? null;
}
function hasCode(e) {
    return typeof e?.code === "string";
}
const sanitizeUsername = (raw)=>raw.trim().toLowerCase().replace(/[^a-z0-9_]+/g, "-").replace(/^-+|-+$/g, "");
async function getProfileByUserId(userId) {
    const { data, error } = await _client.supabase.from("profiles").select("*").eq("user_id", userId).single();
    if (error) {
        if (hasCode(error) && error.code === "PGRST116") return null;
        console.error("getProfileByUserId error", error);
        throw new Error(error.message);
    }
    return data;
}
async function getProfileByUsername(username) {
    const normalized = sanitizeUsername(username);
    const { data, error } = await _client.supabase.from("profiles").select("*")// Exact match on normalized username
    .eq("username", normalized).single();
    if (error) {
        if (hasCode(error) && error.code === "PGRST116") return null;
        console.error("getProfileByUsername error", error);
        throw new Error(error.message);
    }
    return data;
}
async function getProfileByIdentifier(identifier) {
    const id = identifier.trim();
    if (!id) return null;
    // user_id (UUID v4 or similar)
    const isUUID = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(id);
    if (isUUID) {
        return getProfileByUserId(id);
    }
    // email -> map to normalized username derived from local part
    if (id.includes("@")) {
        const local = id.split("@")[0] ?? "";
        return getProfileByUsername(local);
    }
    // fall back to username lookup
    return getProfileByUsername(id);
}
async function listProfiles(options) {
    const search = options?.search?.trim();
    const excludeSelf = options?.excludeSelf ?? true;
    const limit = options?.limit ?? 100;
    let query = _client.supabase.from("profiles").select("*").order("updated_at", {
        ascending: false
    }).limit(limit);
    try {
        if (excludeSelf) {
            const { data: auth } = await _client.supabase.auth.getUser();
            if (auth?.user?.id) {
                query = query.neq("user_id", auth.user.id);
            }
        }
        if (search && search.length > 0) {
            // If an email was typed, search by its local-part normalized like our username policy
            const normalized = search.includes("@") ? sanitizeUsername(search.split("@")[0] ?? "") : search;
            const pattern = `%${normalized}%`;
            // Search username OR full_name
            query = query.or(`username.ilike.${pattern},full_name.ilike.${pattern}`);
        }
        const { data, error } = await query;
        if (error) {
            console.error("listProfiles error", error);
            return [];
        }
        return data ?? [];
    } catch (e) {
        console.error("listProfiles exception", e);
        return [];
    }
}
async function ensureProfile() {
    const { data: auth } = await _client.supabase.auth.getUser();
    if (!auth?.user) throw new Error("Not authenticated");
    const existing = await getProfileByUserId(auth.user.id);
    if (existing) return existing;
    // Derive a username from email or user id
    const base = auth.user.email ? sanitizeUsername(auth.user.email.split("@")[0]) : `user-${auth.user.id.slice(0, 8)}`;
    // Ensure unique username
    let candidate = base || `user-${auth.user.id.slice(0, 8)}`;
    for(let i = 0; i < 5; i++){
        const { data: taken } = await _client.supabase.from("profiles").select("user_id").ilike("username", candidate).maybeSingle();
        if (!taken) break;
        candidate = `${base}-${Math.floor(1000 + Math.random() * 9000)}`;
    }
    const { data, error } = await _client.supabase.from("profiles").insert({
        user_id: auth.user.id,
        username: candidate,
        full_name: auth.user.user_metadata?.full_name ?? null,
        avatar_url: auth.user.user_metadata?.avatar_url ?? null
    }).select().single();
    if (error) {
        console.error("ensureProfile insert error", error);
        throw new Error(error.message);
    }
    return data;
}
async function updateProfile(patch) {
    const { data: auth } = await _client.supabase.auth.getUser();
    if (!auth?.user) throw new Error("Not authenticated");
    const updates = {
        ...patch
    };
    if (patch.username) updates.username = sanitizeUsername(patch.username);
    const { data, error } = await _client.supabase.from("profiles").update(updates).eq("user_id", auth.user.id).select().single();
    if (error) {
        console.error("updateProfile error", error);
        throw new Error(error.message);
    }
    return data;
}
async function getOwnProfile() {
    const { data: auth } = await _client.supabase.auth.getUser();
    if (!auth?.user?.id) return null;
    return getProfileByUserId(auth.user.id);
}
async function getSettings() {
    const me = await getOwnProfile();
    return me?.settings ?? {};
}
async function updateSettings(updates) {
    const { data: auth } = await _client.supabase.auth.getUser();
    if (!auth?.user) throw new Error("Not authenticated");
    const current = await getSettings();
    const next = {
        ...current,
        ...updates
    };
    const { data, error } = await _client.supabase.from("profiles").update({
        settings: next
    }).eq("user_id", auth.user.id).select().single();
    if (error) {
        console.error("updateSettings error", error);
        throw new Error(error.message);
    }
    return data;
}
async function getWorkspaceSettings(chatId) {
    if (!chatId) return {};
    const s = await getSettings();
    return s.workspaces?.[chatId] ?? {};
}
async function setWorkspaceSettings(chatId, ws) {
    if (!chatId) return;
    const s = await getSettings();
    const next = {
        ...s,
        workspaces: {
            ...s.workspaces ?? {},
            [chatId]: ws
        }
    };
    await updateSettings(next);
}
const profileService = {
    // Alias to get by user id
    async getProfile (userId) {
        return getProfileByUserId(userId);
    },
    async updateProfile (id, patch) {
        const { data: auth } = await _client.supabase.auth.getUser();
        if (!auth?.user) throw new Error("Not authenticated");
        if (id && id !== auth.user.id) {
            throw new Error("Cannot update another user's profile");
        }
        // Directly pass the typed patch; updateProfile handles username normalization
        return updateProfile(patch);
    },
    // Settings API
    getSettings,
    updateSettings,
    getWorkspaceSettings,
    setWorkspaceSettings,
    getProfileByUserId,
    getProfileByUsername,
    getProfileByIdentifier,
    getProfileByWalletAddress,
    listProfiles,
    ensureProfile
};

//# sourceMappingURL=data:application/json;base64,