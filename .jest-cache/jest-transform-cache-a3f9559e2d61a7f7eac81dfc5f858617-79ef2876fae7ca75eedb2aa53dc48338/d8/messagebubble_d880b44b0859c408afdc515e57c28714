b28fe92c4be46a6b03aa5aedacf3fd0e
"use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "MessageBubble", {
    enumerable: true,
    get: function() {
        return MessageBubble;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _avatar = require("../ui/avatar");
const _badge = require("../ui/badge");
const _mediapreview = require("./media-preview");
const _messageactions = require("./message-actions");
const _swipeactions = require("./swipe-actions");
const _button = require("../ui/button");
const _lucidereact = require("lucide-react");
const _usehaptics = require("../../hooks/use-haptics");
const _usemobile = require("../../hooks/use-mobile");
const _messagereactions = require("./message-reactions");
const _reactmarkdown = /*#__PURE__*/ _interop_require_default(require("react-markdown"));
const _reactsyntaxhighlighter = require("react-syntax-highlighter");
const _prism = require("react-syntax-highlighter/dist/esm/styles/prism");
const _textarea = require("../ui/textarea");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function MessageBubble({ message, onUpdateMessage }) {
    const [isPinned, setIsPinned] = (0, _react.useState)(message.isPinned || false);
    const [isLiked, setIsLiked] = (0, _react.useState)(message.isLiked || false);
    const [likeCount, setLikeCount] = (0, _react.useState)(message.likeCount || 0);
    const [reactions, setReactions] = (0, _react.useState)(message.reactions || []);
    const [showReactionPicker, setShowReactionPicker] = (0, _react.useState)(false);
    const [isEditing, setIsEditing] = (0, _react.useState)(false);
    const [editValue, setEditValue] = (0, _react.useState)(message.content);
    const [saving, setSaving] = (0, _react.useState)(false);
    const { triggerHaptic } = (0, _usehaptics.useHaptics)();
    const isMobile = (0, _usemobile.useIsMobile)();
    const formatTime = (date)=>{
        return date.toLocaleTimeString([], {
            hour: "2-digit",
            minute: "2-digit"
        });
    };
    const handlePin = (messageId)=>{
        setIsPinned(true);
        triggerHaptic("medium");
        console.log("Pinning message:", messageId);
    };
    const handleUnpin = (messageId)=>{
        setIsPinned(false);
        triggerHaptic("light");
        console.log("Unpinning message:", messageId);
    };
    const handleLike = (messageId)=>{
        setIsLiked(true);
        setLikeCount((prev)=>prev + 1);
        triggerHaptic("light");
        console.log("Liking message:", messageId);
    };
    const handleUnlike = (messageId)=>{
        setIsLiked(false);
        setLikeCount((prev)=>Math.max(0, prev - 1));
        triggerHaptic("selection");
        console.log("Unliking message:", messageId);
    };
    const handleReply = (messageId)=>{
        triggerHaptic("medium");
        console.log("Replying to message:", messageId);
    };
    const handleForward = (messageId)=>{
        triggerHaptic("medium");
        console.log("Forwarding message:", messageId);
    };
    const handleCopy = (messageId)=>{
        navigator.clipboard.writeText(message.content);
        triggerHaptic("light");
        console.log("Copied message:", messageId);
    };
    const handleDelete = (messageId)=>{
        triggerHaptic("heavy");
        console.log("Deleting message:", messageId);
    };
    const handleAddReaction = (messageId, emoji)=>{
        setReactions((prev)=>{
            const existingReaction = prev.find((r)=>r.emoji === emoji);
            if (existingReaction) {
                return prev.map((r)=>r.emoji === emoji ? {
                        ...r,
                        count: r.count + 1,
                        hasReacted: true
                    } : r);
            } else {
                return [
                    ...prev,
                    {
                        emoji,
                        count: 1,
                        users: [
                            "current-user"
                        ],
                        hasReacted: true
                    }
                ];
            }
        });
        console.log("Adding reaction:", emoji, "to message:", messageId);
    };
    const handleRemoveReaction = (messageId, emoji)=>{
        setReactions((prev)=>{
            return prev.map((r)=>r.emoji === emoji ? {
                    ...r,
                    count: Math.max(0, r.count - 1),
                    hasReacted: false
                } : r).filter((r)=>r.count > 0);
        });
        console.log("Removing reaction:", emoji, "from message:", messageId);
    };
    const handleLongPress = ()=>{
        if (isMobile) {
            setShowReactionPicker(true);
            triggerHaptic("medium");
        }
    };
    const handleDoubleClick = ()=>{
        if (!isMobile) {
            // Quick reaction with heart
            handleAddReaction(message.id, "❤️");
        }
    };
    // Keep edit value in sync if the parent updates the message content (optimistic update)
    (0, _react.useEffect)(()=>{
        if (!isEditing) setEditValue(message.content);
    }, [
        message.content,
        isEditing
    ]);
    const handleEditSave = async ()=>{
        if (!onUpdateMessage) return setIsEditing(false);
        const trimmed = editValue.trim();
        if (!trimmed) return; // do not allow empty save
        try {
            setSaving(true);
            await onUpdateMessage(message.id, trimmed);
            setIsEditing(false);
            triggerHaptic("success");
        } finally{
            setSaving(false);
        }
    };
    const handleEditCancel = ()=>{
        setEditValue(message.content);
        setIsEditing(false);
        triggerHaptic("selection");
    };
    if (message.type === "system") {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
            className: "flex justify-center",
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                className: "text-xs text-gray-500 dark:text-gray-400 bg-gray-100 dark:bg-gray-800 px-3 py-1 rounded-full",
                children: message.content
            })
        });
    }
    // Markdown renderer with code block copy support
    const CodeRenderer = ({ inline, className, children })=>{
        const [copied, setCopied] = (0, _react.useState)(false);
        const txt = Array.isArray(children) ? children.join("") : String(children);
        const match = /language-(\w+)/.exec(className || "");
        if (inline) {
            return /*#__PURE__*/ (0, _jsxruntime.jsx)("code", {
                className: "px-1 py-0.5 rounded bg-gray-200 dark:bg-gray-700 text-[0.85em]",
                children: children
            });
        }
        const handleCopy = async ()=>{
            try {
                await navigator.clipboard.writeText(txt);
                setCopied(true);
                setTimeout(()=>setCopied(false), 1200);
            } catch (e) {
                console.error("Copy failed", e);
            }
        };
        return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
            className: "relative group",
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                    type: "button",
                    onClick: handleCopy,
                    className: "absolute right-2 top-2 z-10 text-xs bg-black/60 text-white px-2 py-1 rounded opacity-0 group-hover:opacity-100 transition-opacity",
                    "aria-label": "Copy code",
                    children: copied ? "Copied" : /*#__PURE__*/ (0, _jsxruntime.jsxs)("span", {
                        className: "inline-flex items-center gap-1",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Copy, {
                                className: "h-3 w-3"
                            }),
                            " Copy"
                        ]
                    })
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactsyntaxhighlighter.Prism, {
                    language: match && match[1] || undefined,
                    style: _prism.oneDark,
                    customStyle: {
                        margin: 0,
                        borderRadius: 8,
                        padding: "12px"
                    },
                    wrapLongLines: true,
                    children: txt.replace(/\n$/, "")
                })
            ]
        });
    };
    const renderMessageContent = ()=>{
        switch(message.type){
            case "image":
                return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    className: "max-w-xs",
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_mediapreview.MediaPreview, {
                            src: message.mediaUrl || "/placeholder.svg?height=200&width=300",
                            type: "image",
                            alt: message.content,
                            className: "w-full h-48"
                        }),
                        message.content && /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                            className: "mt-2 text-sm",
                            children: message.content
                        })
                    ]
                });
            case "video":
                return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    className: "max-w-sm",
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_mediapreview.MediaPreview, {
                            src: message.mediaUrl || "/placeholder.svg?height=200&width=300",
                            type: "video",
                            className: "w-full h-48"
                        }),
                        message.content && /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                            className: "mt-2 text-sm",
                            children: message.content
                        })
                    ]
                });
            case "audio":
                return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    className: "max-w-xs",
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_mediapreview.MediaPreview, {
                            src: message.mediaUrl || "",
                            type: "audio",
                            className: "w-full"
                        }),
                        message.content && /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                            className: "mt-2 text-sm",
                            children: message.content
                        })
                    ]
                });
            case "document":
                return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    className: "bg-gray-50 dark:bg-gray-700 rounded-lg p-3 max-w-xs",
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                            className: "flex items-center gap-3",
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                    className: "bg-blue-500 rounded-lg p-2",
                                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.FileText, {
                                        className: "h-4 w-4 text-white"
                                    })
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                    className: "flex-1 min-w-0",
                                    children: [
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                                            className: "text-sm font-medium truncate",
                                            children: message.fileName || "Document"
                                        }),
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                                            className: "text-xs text-gray-500 dark:text-gray-400",
                                            children: message.fileSize || "Unknown size"
                                        })
                                    ]
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                                    variant: "ghost",
                                    size: "sm",
                                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Download, {
                                        className: "h-4 w-4"
                                    })
                                })
                            ]
                        }),
                        message.content && /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                            className: "mt-2 text-sm",
                            children: message.content
                        })
                    ]
                });
            case "gif":
                return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    className: "max-w-xs",
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                            className: "relative rounded-lg overflow-hidden bg-gray-100 dark:bg-gray-800",
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsx)("img", {
                                    src: message.gifData?.url || message.mediaUrl || "/placeholder.svg?height=200&width=300",
                                    alt: message.gifData?.title || message.content || "GIF",
                                    className: "w-full h-auto max-h-64 object-cover",
                                    loading: "lazy"
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                    className: "absolute top-2 left-2",
                                    children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_badge.Badge, {
                                        variant: "secondary",
                                        className: "text-xs px-2 py-1 bg-black/70 text-white border-0",
                                        children: [
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.ImageIcon, {
                                                className: "h-3 w-3 mr-1"
                                            }),
                                            "GIF"
                                        ]
                                    })
                                }),
                                message.gifData?.title && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                    className: "absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/70 to-transparent p-2",
                                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                                        className: "text-white text-xs font-medium truncate",
                                        children: message.gifData.title
                                    })
                                })
                            ]
                        }),
                        message.content && message.content !== message.gifData?.title && /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                            className: "mt-2 text-sm",
                            children: message.content
                        })
                    ]
                });
            default:
                if (isEditing && message.isOwn) {
                    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: "space-y-2",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_textarea.Textarea, {
                                value: editValue,
                                onChange: (e)=>setEditValue(e.target.value),
                                rows: Math.min(8, Math.max(2, Math.ceil(editValue.length / 40))),
                                onKeyDown: (e)=>{
                                    if (e.key === "Enter" && !e.shiftKey) {
                                        e.preventDefault();
                                        void handleEditSave();
                                    } else if (e.key === "Escape") {
                                        e.preventDefault();
                                        handleEditCancel();
                                    }
                                },
                                className: "min-h-[60px] text-sm",
                                "aria-label": "Edit message",
                                autoFocus: true
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                className: `flex items-center gap-2 ${message.isOwn ? "justify-end" : "justify-start"}`,
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                                        size: "sm",
                                        onClick: ()=>void handleEditSave(),
                                        disabled: saving || !editValue.trim(),
                                        children: "Save"
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                                        size: "sm",
                                        variant: "ghost",
                                        onClick: handleEditCancel,
                                        disabled: saving,
                                        children: "Cancel"
                                    })
                                ]
                            })
                        ]
                    });
                }
                return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    className: "whitespace-pre-wrap break-words text-sm leading-5",
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactmarkdown.default, {
                        // Only transform code; keep other elements simple
                        components: {
                            code: CodeRenderer,
                            a: ({ href, children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("a", {
                                    href: href,
                                    target: "_blank",
                                    rel: "noopener noreferrer",
                                    className: "underline text-blue-600 dark:text-blue-400",
                                    children: children
                                })
                        },
                        children: message.content
                    })
                });
        }
    };
    const messageContent = /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        className: `flex gap-2 group ${message.isOwn ? "justify-end" : "justify-start"}`,
        children: [
            !message.isOwn && /*#__PURE__*/ (0, _jsxruntime.jsxs)(_avatar.Avatar, {
                className: `${isMobile ? "h-8 w-8" : "h-6 w-6"} mt-1`,
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_avatar.AvatarImage, {}),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_avatar.AvatarFallback, {
                        className: "bg-gradient-to-br from-blue-500 to-purple-600 text-white text-xs",
                        children: message.senderName.split(" ").map((n)=>n[0]).join("")
                    })
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                className: `max-w-xs lg:max-w-md ${message.isOwn ? "order-1" : ""}`,
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        className: `flex items-center gap-1 mb-1 ${message.isOwn ? "justify-end" : "justify-start"}`,
                        children: isPinned && /*#__PURE__*/ (0, _jsxruntime.jsxs)(_badge.Badge, {
                            variant: "secondary",
                            className: "text-xs px-1 py-0",
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Pin, {
                                    className: "h-2 w-2 mr-1"
                                }),
                                "Pinned"
                            ]
                        })
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: "relative",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_messagereactions.MessageReactions, {
                                messageId: message.id,
                                reactions: reactions,
                                onAddReaction: handleAddReaction,
                                onRemoveReaction: handleRemoveReaction,
                                showPicker: showReactionPicker,
                                onTogglePicker: ()=>setShowReactionPicker(false)
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                className: `
            ${message.type === "text" ? `${isMobile ? "px-3 py-2" : "px-4 py-2"}` : "p-1"} rounded-2xl text-sm
            ${message.isOwn ? `${message.type === "text" ? "bg-blue-500 text-white" : "bg-blue-50 dark:bg-blue-900/20"} rounded-br-md` : `${message.type === "text" ? "bg-gray-100 dark:bg-gray-700 text-gray-900 dark:text-white" : "bg-white dark:bg-gray-800"} rounded-bl-md`}
          `,
                                onTouchStart: handleLongPress,
                                onDoubleClick: handleDoubleClick,
                                onContextMenu: (e)=>{
                                    e.preventDefault();
                                    setShowReactionPicker(true);
                                },
                                children: renderMessageContent()
                            }),
                            !isMobile && /*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                                variant: "ghost",
                                size: "sm",
                                className: `absolute top-1 ${message.isOwn ? "-left-10" : "-right-10"} opacity-0 group-hover:opacity-100 transition-opacity h-6 w-6 p-0 rounded-full`,
                                onClick: ()=>setShowReactionPicker(!showReactionPicker),
                                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                    className: "text-sm",
                                    children: "\uD83D\uDE0A"
                                })
                            }),
                            !isMobile && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                className: `absolute top-1 ${message.isOwn ? "-left-8" : "-right-8"}`,
                                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_messageactions.MessageActions, {
                                    messageId: message.id,
                                    isPinned: isPinned,
                                    isLiked: isLiked,
                                    onPin: handlePin,
                                    onUnpin: handleUnpin,
                                    onLike: handleLike,
                                    onUnlike: handleUnlike,
                                    onReply: handleReply,
                                    onForward: handleForward,
                                    onCopy: handleCopy,
                                    onDelete: handleDelete,
                                    onEdit: message.isOwn && message.type === "text" && onUpdateMessage ? ()=>setIsEditing(true) : undefined
                                })
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: `flex items-center gap-2 mt-1 ${message.isOwn ? "justify-end" : "justify-start"}`,
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                className: "text-xs text-gray-500 dark:text-gray-400",
                                children: formatTime(message.timestamp)
                            }),
                            likeCount > 0 && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                className: "flex items-center gap-1",
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Heart, {
                                        className: "h-3 w-3 text-red-500 fill-current"
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                        className: "text-xs text-gray-500 dark:text-gray-400",
                                        children: likeCount
                                    })
                                ]
                            })
                        ]
                    })
                ]
            })
        ]
    });
    // Wrap with swipe actions on mobile
    if (isMobile) {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_swipeactions.SwipeActions, {
            onReply: ()=>handleReply(message.id),
            onPin: isPinned ? ()=>handleUnpin(message.id) : ()=>handlePin(message.id),
            onLike: isLiked ? ()=>handleUnlike(message.id) : ()=>handleLike(message.id),
            onDelete: ()=>handleDelete(message.id),
            children: messageContent
        });
    }
    return messageContent;
}

//# sourceMappingURL=data:application/json;base64,