{"version":3,"sources":["/Users/elicharlese/CascadeProjects/AGENT/__tests__/components/WorkspaceSidebar.test.tsx"],"sourcesContent":["import React from 'react'\nimport { render, screen } from '@testing-library/react'\nimport userEvent from '@testing-library/user-event'\nimport { WorkspaceSidebar } from '@/components/workspace/workspace-sidebar'\n\n// Mock analytics\njest.mock('@/lib/analytics', () => ({\n  trackEvent: jest.fn(),\n}))\n\ndescribe('WorkspaceSidebar', () => {\n  const defaultProps = {\n    panelState: 'expanded' as const,\n    onSetPanelState: jest.fn(),\n    selectedAgentId: 'agent-1',\n    onSelectAgent: jest.fn(),\n    workspaceItems: [],\n    onExecuteTool: jest.fn(),\n    onGenerateMedia: jest.fn(),\n    activeParticipants: 2,\n    isConnected: true,\n  }\n\n  beforeEach(() => {\n    jest.clearAllMocks()\n  })\n\n  it('renders workspace sidebar in expanded state', () => {\n    render(<WorkspaceSidebar {...defaultProps} />)\n    \n    expect(screen.getByText('Workspace')).toBeInTheDocument()\n    expect(screen.getByText('AI Models')).toBeInTheDocument()\n    expect(screen.getByText('Settings')).toBeInTheDocument()\n  })\n\n  it('shows active participants count', () => {\n    render(<WorkspaceSidebar {...defaultProps} />)\n    \n    expect(screen.getByText('2 active')).toBeInTheDocument()\n  })\n\n  it('shows disconnected status when not connected', () => {\n    render(<WorkspaceSidebar {...defaultProps} isConnected={false} />)\n    \n    expect(screen.getByText('Disconnected')).toBeInTheDocument()\n  })\n\n  it('renders collapsed state correctly', () => {\n    render(<WorkspaceSidebar {...defaultProps} panelState=\"collapsed\" />)\n    \n    // Should not render anything when collapsed\n    expect(screen.queryByText('Workspace')).not.toBeInTheDocument()\n  })\n\n  it('renders minimized state with icon buttons', () => {\n    render(<WorkspaceSidebar {...defaultProps} panelState=\"minimized\" />)\n    \n    // Should show icon buttons but not full content\n    expect(screen.queryByText('Workspace')).not.toBeInTheDocument()\n    // Icons should be present\n    const buttons = screen.getAllByRole('button')\n    expect(buttons.length).toBeGreaterThan(0)\n  })\n\n  it('switches between tabs correctly', async () => {\n    const user = userEvent.setup()\n    render(<WorkspaceSidebar {...defaultProps} />)\n    \n    const aiModelsTab = screen.getByRole('tab', { name: /AI Models/i })\n    await user.click(aiModelsTab)\n    \n    // Updated expectations: AIPanelSidebar is rendered under AI Models tab\n    expect(await screen.findByText('AI Panel')).toBeInTheDocument()\n    expect(await screen.findByText('View All Patches')).toBeInTheDocument()\n  })\n\n  it('shows workspace settings in settings tab', async () => {\n    const user = userEvent.setup()\n    render(<WorkspaceSidebar {...defaultProps} />)\n    \n    const settingsTab = screen.getByRole('tab', { name: /Settings/i })\n    await user.click(settingsTab)\n    \n    expect(await screen.findByText('Workspace Settings')).toBeInTheDocument()\n    expect(await screen.findByText('Chat Settings')).toBeInTheDocument()\n  })\n\n  it('handles tool execution', async () => {\n    const user = userEvent.setup()\n    render(<WorkspaceSidebar {...defaultProps} />)\n    \n    const codeButton = screen.getByText('Code')\n    await user.click(codeButton)\n    \n    expect(defaultProps.onExecuteTool).toHaveBeenCalledWith('code_interpreter')\n  })\n\n  it('handles media generation', async () => {\n    const user = userEvent.setup()\n    render(<WorkspaceSidebar {...defaultProps} />)\n    \n    const imageButton = screen.getByText('Image')\n    await user.click(imageButton)\n    \n    expect(defaultProps.onGenerateMedia).toHaveBeenCalledWith('image')\n  })\n\n  it('displays workspace items when provided', () => {\n    const workspaceItems = [\n      {\n        id: 'item-1',\n        type: 'code' as const,\n        content: 'console.log(\"Hello World\")',\n        timestamp: new Date(),\n        author: 'user',\n        status: 'completed' as const,\n      },\n    ]\n\n    render(<WorkspaceSidebar {...defaultProps} workspaceItems={workspaceItems} />)\n    \n    expect(screen.getByText('1')).toBeInTheDocument() // Badge showing count\n  })\n\n  it('shows empty state when no workspace items', () => {\n    render(<WorkspaceSidebar {...defaultProps} />)\n    \n    expect(screen.getByText('No workspace items yet')).toBeInTheDocument()\n    expect(screen.getByText('Use tools and generate media to see items here')).toBeInTheDocument()\n  })\n})\n"],"names":["jest","mock","trackEvent","fn","describe","defaultProps","panelState","onSetPanelState","selectedAgentId","onSelectAgent","workspaceItems","onExecuteTool","onGenerateMedia","activeParticipants","isConnected","beforeEach","clearAllMocks","it","render","WorkspaceSidebar","expect","screen","getByText","toBeInTheDocument","queryByText","not","buttons","getAllByRole","length","toBeGreaterThan","user","userEvent","setup","aiModelsTab","getByRole","name","click","findByText","settingsTab","codeButton","toHaveBeenCalledWith","imageButton","id","type","content","timestamp","Date","author","status"],"mappings":"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"}