73c2b1c2da52e357c2f44944f8af9b55
"use strict";
// Mock analytics
jest.mock("@/lib/analytics", ()=>({
        trackEvent: jest.fn()
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _userevent = /*#__PURE__*/ _interop_require_default(require("@testing-library/user-event"));
const _workspacesidebar = require("../../components/workspace/workspace-sidebar");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
describe("WorkspaceSidebar", ()=>{
    const defaultProps = {
        panelState: "expanded",
        onSetPanelState: jest.fn(),
        selectedAgentId: "agent-1",
        onSelectAgent: jest.fn(),
        workspaceItems: [],
        onExecuteTool: jest.fn(),
        onGenerateMedia: jest.fn(),
        activeParticipants: 2,
        isConnected: true
    };
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    it("renders workspace sidebar in expanded state", ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_workspacesidebar.WorkspaceSidebar, {
            ...defaultProps
        }));
        expect(_react1.screen.getByText("Workspace")).toBeInTheDocument();
        expect(_react1.screen.getByText("AI Models")).toBeInTheDocument();
        expect(_react1.screen.getByText("Settings")).toBeInTheDocument();
    });
    it("shows active participants count", ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_workspacesidebar.WorkspaceSidebar, {
            ...defaultProps
        }));
        expect(_react1.screen.getByText("2 active")).toBeInTheDocument();
    });
    it("shows disconnected status when not connected", ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_workspacesidebar.WorkspaceSidebar, {
            ...defaultProps,
            isConnected: false
        }));
        expect(_react1.screen.getByText("Disconnected")).toBeInTheDocument();
    });
    it("renders collapsed state correctly", ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_workspacesidebar.WorkspaceSidebar, {
            ...defaultProps,
            panelState: "collapsed"
        }));
        // Should not render anything when collapsed
        expect(_react1.screen.queryByText("Workspace")).not.toBeInTheDocument();
    });
    it("renders minimized state with icon buttons", ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_workspacesidebar.WorkspaceSidebar, {
            ...defaultProps,
            panelState: "minimized"
        }));
        // Should show icon buttons but not full content
        expect(_react1.screen.queryByText("Workspace")).not.toBeInTheDocument();
        // Icons should be present
        const buttons = _react1.screen.getAllByRole("button");
        expect(buttons.length).toBeGreaterThan(0);
    });
    it("switches between tabs correctly", async ()=>{
        const user = _userevent.default.setup();
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_workspacesidebar.WorkspaceSidebar, {
            ...defaultProps
        }));
        const aiModelsTab = _react1.screen.getByRole("tab", {
            name: /AI Models/i
        });
        await user.click(aiModelsTab);
        // Updated expectations: AIPanelSidebar is rendered under AI Models tab
        expect(await _react1.screen.findByText("AI Panel")).toBeInTheDocument();
        expect(await _react1.screen.findByText("View All Patches")).toBeInTheDocument();
    });
    it("shows workspace settings in settings tab", async ()=>{
        const user = _userevent.default.setup();
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_workspacesidebar.WorkspaceSidebar, {
            ...defaultProps
        }));
        const settingsTab = _react1.screen.getByRole("tab", {
            name: /Settings/i
        });
        await user.click(settingsTab);
        expect(await _react1.screen.findByText("Workspace Settings")).toBeInTheDocument();
        expect(await _react1.screen.findByText("Chat Settings")).toBeInTheDocument();
    });
    it("handles tool execution", async ()=>{
        const user = _userevent.default.setup();
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_workspacesidebar.WorkspaceSidebar, {
            ...defaultProps
        }));
        const codeButton = _react1.screen.getByText("Code");
        await user.click(codeButton);
        expect(defaultProps.onExecuteTool).toHaveBeenCalledWith("code_interpreter");
    });
    it("handles media generation", async ()=>{
        const user = _userevent.default.setup();
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_workspacesidebar.WorkspaceSidebar, {
            ...defaultProps
        }));
        const imageButton = _react1.screen.getByText("Image");
        await user.click(imageButton);
        expect(defaultProps.onGenerateMedia).toHaveBeenCalledWith("image");
    });
    it("displays workspace items when provided", ()=>{
        const workspaceItems = [
            {
                id: "item-1",
                type: "code",
                content: 'console.log("Hello World")',
                timestamp: new Date(),
                author: "user",
                status: "completed"
            }
        ];
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_workspacesidebar.WorkspaceSidebar, {
            ...defaultProps,
            workspaceItems: workspaceItems
        }));
        expect(_react1.screen.getByText("1")).toBeInTheDocument() // Badge showing count
        ;
    });
    it("shows empty state when no workspace items", ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_workspacesidebar.WorkspaceSidebar, {
            ...defaultProps
        }));
        expect(_react1.screen.getByText("No workspace items yet")).toBeInTheDocument();
        expect(_react1.screen.getByText("Use tools and generate media to see items here")).toBeInTheDocument();
    });
});

//# sourceMappingURL=data:application/json;base64,