{"version":3,"sources":["/Users/elicharlese/CascadeProjects/AGENT/__tests__/observability/TransformationRecorder.test.ts"],"sourcesContent":["import { TransformationRecorder, FileSystemSink } from '../../libs/observability/TransformationRecorder';\nimport { CoreProtection } from '../../libs/observability/CoreProtection';\nimport { RecorderConfig, ConsequenceRecord } from '../../src/types/agent-observability';\nimport { promises as fs } from 'fs';\nimport { execSync } from 'child_process';\n\n// Mock dependencies\njest.mock('fs', () => ({\n  promises: {\n    mkdir: jest.fn(),\n    appendFile: jest.fn(),\n    writeFile: jest.fn(),\n  },\n}));\n\njest.mock('child_process', () => ({\n  execSync: jest.fn(),\n}));\n\njest.mock('../../libs/observability/CoreProtection');\n\ndescribe('TransformationRecorder', () => {\n  let recorder: TransformationRecorder;\n  let mockConfig: RecorderConfig;\n  let mockCoreProtection: jest.Mocked<CoreProtection>;\n\n  beforeEach(() => {\n    mockConfig = {\n      enableFileSystemSink: true,\n      enableSupabaseSink: false,\n      enableCoreProtection: true,\n      redactPatterns: ['.env*', '*secret*'],\n      protectedPaths: ['src/types/agent.ts'],\n      learningPaths: ['docs/patches/**'],\n    };\n\n    mockCoreProtection = {\n      validateTransformation: jest.fn(),\n      auditCoreIntegrity: jest.fn(),\n      isPristineCorePath: jest.fn(),\n      isLearningLayerPath: jest.fn(),\n      enforceProtection: jest.fn(),\n      generateProtectionReport: jest.fn(),\n    } as any;\n\n    (CoreProtection as jest.MockedClass<typeof CoreProtection>).mockImplementation(() => mockCoreProtection);\n\n    recorder = new TransformationRecorder(mockConfig);\n  });\n\n  describe('start', () => {\n    beforeEach(() => {\n      mockCoreProtection.validateTransformation.mockResolvedValue({\n        isValid: true,\n        violations: [],\n        protectedPaths: [],\n        allowedPaths: ['components/chat/chat-window.tsx'],\n        timestamp: new Date().toISOString(),\n      });\n\n      (execSync as jest.Mock).mockReturnValue('abc123def\\n');\n    });\n\n    it('should start transformation recording successfully', async () => {\n      const context = {\n        patchId: 1,\n        branch: 'main',\n        authorId: 'user-123',\n        filesTouched: ['components/chat/chat-window.tsx'],\n      };\n\n      const transformationId = await recorder.start(context);\n\n      expect(transformationId).toMatch(/^patch-1@[a-f0-9]{7}$/);\n      expect(mockCoreProtection.validateTransformation).toHaveBeenCalledWith(context.filesTouched);\n    });\n\n    it('should throw error for critical core violations', async () => {\n      mockCoreProtection.validateTransformation.mockResolvedValue({\n        isValid: false,\n        violations: [{\n          path: 'src/types/agent.ts',\n          reason: 'Pristine core violation',\n          severity: 'critical',\n        }],\n        protectedPaths: ['src/types/agent.ts'],\n        allowedPaths: [],\n        timestamp: new Date().toISOString(),\n      });\n\n      const context = {\n        patchId: 1,\n        branch: 'main',\n        authorId: 'user-123',\n        filesTouched: ['src/types/agent.ts'],\n      };\n\n      await expect(recorder.start(context)).rejects.toThrow('CRITICAL: Pristine core violation detected');\n    });\n\n    it('should allow non-critical violations', async () => {\n      mockCoreProtection.validateTransformation.mockResolvedValue({\n        isValid: false,\n        violations: [{\n          path: 'some-file.ts',\n          reason: 'Minor violation',\n          severity: 'warning',\n        }],\n        protectedPaths: [],\n        allowedPaths: ['some-file.ts'],\n        timestamp: new Date().toISOString(),\n      });\n\n      const context = {\n        patchId: 1,\n        branch: 'main',\n        authorId: 'user-123',\n        filesTouched: ['some-file.ts'],\n      };\n\n      const transformationId = await recorder.start(context);\n      expect(transformationId).toBeDefined();\n    });\n  });\n\n  describe('attachToolCall', () => {\n    beforeEach(async () => {\n      mockCoreProtection.validateTransformation.mockResolvedValue({\n        isValid: true,\n        violations: [],\n        protectedPaths: [],\n        allowedPaths: ['test.tsx'],\n        timestamp: new Date().toISOString(),\n      });\n\n      (execSync as jest.Mock).mockReturnValue('abc123def\\n');\n\n      await recorder.start({\n        patchId: 1,\n        branch: 'main',\n        authorId: 'user-123',\n        filesTouched: ['test.tsx'],\n      });\n    });\n\n    it('should record tool calls normally', async () => {\n      const toolCall = {\n        id: 'tool-1',\n        name: 'Read',\n        timestamp: new Date().toISOString(),\n        parameters: { file_path: 'test.tsx' },\n        duration: 100,\n        coreProtectionCheck: false,\n      };\n\n      await recorder.attachToolCall(toolCall);\n      // No exception should be thrown\n    });\n\n    it('should detect core protection violations in Edit tool calls', async () => {\n      mockCoreProtection.isPristineCorePath.mockReturnValue(true);\n\n      const toolCall = {\n        id: 'tool-1',\n        name: 'Edit',\n        timestamp: new Date().toISOString(),\n        parameters: { file_path: 'src/types/agent.ts' },\n        duration: 100,\n        coreProtectionCheck: false,\n      };\n\n      await recorder.attachToolCall(toolCall);\n\n      expect(mockCoreProtection.isPristineCorePath).toHaveBeenCalledWith('src/types/agent.ts');\n      expect(toolCall.coreProtectionCheck).toBe(true);\n    });\n  });\n\n  describe('finalize', () => {\n    beforeEach(async () => {\n      mockCoreProtection.validateTransformation.mockResolvedValue({\n        isValid: true,\n        violations: [],\n        protectedPaths: [],\n        allowedPaths: ['test.tsx'],\n        timestamp: new Date().toISOString(),\n      });\n\n      mockCoreProtection.auditCoreIntegrity.mockResolvedValue({\n        isValid: true,\n        violations: [],\n        protectedPaths: [],\n        allowedPaths: [],\n        timestamp: new Date().toISOString(),\n      });\n\n      (execSync as jest.Mock)\n        .mockReturnValueOnce('abc123def\\n') // git rev-parse HEAD\n        .mockReturnValueOnce('') // typecheck\n        .mockReturnValueOnce('') // lint\n        .mockReturnValueOnce('All files | 95.2 |') // test coverage\n        .mockReturnValueOnce(''); // build\n\n      await recorder.start({\n        patchId: 1,\n        branch: 'main',\n        authorId: 'user-123',\n        filesTouched: ['test.tsx'],\n      });\n    });\n\n    it('should finalize transformation with all guardrails', async () => {\n      const record = await recorder.finalize('Test transformation', 'proceed');\n\n      expect(record.transformation.id).toMatch(/^patch-1@[a-f0-9]{7}$/);\n      expect(record.summary).toBe('Test transformation');\n      expect(record.decision).toBe('proceed');\n      expect(record.coreIntegrityVerified).toBe(true);\n      expect(record.guardrails).toHaveLength(5); // typecheck, lint, test, build, core_protection\n    });\n\n    it('should handle guardrail failures gracefully', async () => {\n      (execSync as jest.Mock)\n        .mockReturnValueOnce('abc123def\\n') // git rev-parse HEAD (for start)\n        .mockImplementationOnce(() => { // typecheck failure\n          const error = new Error('Type error');\n          (error as any).status = 1;\n          throw error;\n        });\n\n      const record = await recorder.finalize('Test with failures', 'fix_required');\n\n      expect(record.decision).toBe('fix_required');\n      expect(record.guardrails.some(g => g.name === 'typecheck' && g.status === 'fail')).toBe(true);\n    });\n\n    it('should generate learning insights', async () => {\n      await recorder.attachToolCall({\n        id: 'tool-1',\n        name: 'Edit',\n        timestamp: new Date().toISOString(),\n        parameters: { file_path: 'test.tsx' },\n        duration: 100,\n        coreProtectionCheck: false,\n      });\n\n      const record = await recorder.finalize('Test insights', 'proceed');\n\n      expect(record.learningInsights).toBeDefined();\n      expect(record.learningInsights!.length).toBeGreaterThan(0);\n      expect(record.learningInsights!.some(insight => insight.includes('Tools used: Edit'))).toBe(true);\n    });\n  });\n\n  describe('FileSystemSink', () => {\n    let sink: FileSystemSink;\n    let mockRecord: ConsequenceRecord;\n\n    beforeEach(() => {\n      sink = new FileSystemSink('/test/base/path');\n      mockRecord = {\n        transformation: {\n          id: 'patch-1@abc123',\n          patchId: 1,\n          branch: 'main',\n          authorId: 'user-123',\n          timestamp: new Date().toISOString(),\n          categories: ['code'],\n          filesTouched: ['test.tsx'],\n          gitStats: {\n            sha: 'abc123def',\n            additions: 10,\n            deletions: 5,\n            changedFiles: 1,\n          },\n          coreProtectionStatus: 'safe',\n        },\n        events: [],\n        guardrails: [\n          {\n            name: 'typecheck',\n            status: 'pass',\n            timestamp: new Date().toISOString(),\n            duration: 1000,\n            metrics: { errors: 0 },\n            artifacts: [],\n          },\n        ],\n        artifacts: [],\n        toolCalls: [],\n        summary: 'Test transformation',\n        decision: 'proceed',\n        coreIntegrityVerified: true,\n        version: '1.0',\n      };\n    });\n\n    it('should write JSONL ledger and markdown consequences', async () => {\n      await sink.write(mockRecord);\n\n      expect(fs.mkdir).toHaveBeenCalledWith('/test/base/path/docs/patches/patch-1', { recursive: true });\n      expect(fs.appendFile).toHaveBeenCalledWith(\n        '/test/base/path/docs/patches/patch-1/ledger.jsonl',\n        expect.stringContaining('\"id\":\"patch-1@abc123\"'),\n        'utf8'\n      );\n      expect(fs.writeFile).toHaveBeenCalledWith(\n        '/test/base/path/docs/patches/patch-1/CONSEQUENCES.md',\n        expect.stringContaining('# Transformation Consequences - Patch 1'),\n        'utf8'\n      );\n    });\n\n    it('should generate comprehensive markdown report', async () => {\n      mockRecord.guardrails.push({\n        name: 'test',\n        status: 'fail',\n        timestamp: new Date().toISOString(),\n        duration: 2000,\n        metrics: { passed: 0, failed: 1 },\n        artifacts: [],\n      });\n\n      await sink.write(mockRecord);\n\n      const markdownCall = (fs.writeFile as jest.Mock).mock.calls.find(call => \n        call[0].endsWith('CONSEQUENCES.md')\n      );\n      const markdown = markdownCall[1];\n\n      expect(markdown).toContain('**Core Integrity**: ✅ VERIFIED');\n      expect(markdown).toContain('**Decision**: **PROCEED**');\n      expect(markdown).toContain('### ✅ Passed (1)');\n      expect(markdown).toContain('### ❌ Failed (1)');\n      expect(markdown).toContain('- `test.tsx`');\n    });\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n});\n"],"names":["jest","mock","promises","mkdir","fn","appendFile","writeFile","execSync","describe","recorder","mockConfig","mockCoreProtection","beforeEach","enableFileSystemSink","enableSupabaseSink","enableCoreProtection","redactPatterns","protectedPaths","learningPaths","validateTransformation","auditCoreIntegrity","isPristineCorePath","isLearningLayerPath","enforceProtection","generateProtectionReport","CoreProtection","mockImplementation","TransformationRecorder","mockResolvedValue","isValid","violations","allowedPaths","timestamp","Date","toISOString","mockReturnValue","it","context","patchId","branch","authorId","filesTouched","transformationId","start","expect","toMatch","toHaveBeenCalledWith","path","reason","severity","rejects","toThrow","toBeDefined","toolCall","id","name","parameters","file_path","duration","coreProtectionCheck","attachToolCall","toBe","mockReturnValueOnce","record","finalize","transformation","summary","decision","coreIntegrityVerified","guardrails","toHaveLength","mockImplementationOnce","error","Error","status","some","g","learningInsights","length","toBeGreaterThan","insight","includes","sink","mockRecord","FileSystemSink","categories","gitStats","sha","additions","deletions","changedFiles","coreProtectionStatus","events","metrics","errors","artifacts","toolCalls","version","write","fs","recursive","stringContaining","push","passed","failed","markdownCall","calls","find","call","endsWith","markdown","toContain","afterEach","clearAllMocks"],"mappings":"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"}