{"version":3,"sources":["/Users/elicharlese/CascadeProjects/AGENT/hooks/use-haptics.ts"],"sourcesContent":["\"use client\"\n\nimport { useCallback } from \"react\"\n\ntype HapticType = \"light\" | \"medium\" | \"heavy\" | \"selection\" | \"success\" | \"warning\" | \"error\"\n\nexport function useHaptics() {\n  const triggerHaptic = useCallback((type: HapticType = \"light\") => {\n    // Check if device supports haptics\n    if (typeof window !== \"undefined\" && \"navigator\" in window) {\n      // Respect user accessibility preferences\n      const prefersReducedMotion = typeof window.matchMedia === 'function' &&\n        window.matchMedia('(prefers-reduced-motion: reduce)').matches\n\n      // If user requests reduced motion, minimize haptic complexity/intensity\n      const effectiveType: HapticType = prefersReducedMotion\n        ? (type === 'error' || type === 'warning' ? 'light' : 'selection')\n        : type\n\n      // Modern Haptic API\n      if (\"vibrate\" in navigator) {\n        const patterns = {\n          light: [8],\n          medium: [16],\n          heavy: [24],\n          selection: [5],\n          success: [8, 24, 8],\n          warning: [12, 48, 12],\n          error: [20, 60, 20],\n        }\n        navigator.vibrate(patterns[effectiveType])\n      }\n\n      // iOS Haptic Feedback (if available)\n      if (\"hapticFeedback\" in window) {\n        const hapticTypes = {\n          light: \"impactLight\",\n          medium: \"impactMedium\",\n          heavy: \"impactHeavy\",\n          selection: \"selectionChanged\",\n          success: \"notificationSuccess\",\n          warning: \"notificationWarning\",\n          error: \"notificationError\",\n        }\n        // @ts-ignore - iOS specific API\n        window.hapticFeedback?.(hapticTypes[effectiveType])\n      }\n    }\n  }, [])\n\n  return { triggerHaptic }\n}\n"],"names":["useHaptics","triggerHaptic","useCallback","type","window","prefersReducedMotion","matchMedia","matches","effectiveType","navigator","patterns","light","medium","heavy","selection","success","warning","error","vibrate","hapticTypes","hapticFeedback"],"mappings":"AAAA;;;;;+BAMgBA;;;eAAAA;;;uBAJY;AAIrB,SAASA;IACd,MAAMC,gBAAgBC,IAAAA,kBAAW,EAAC,CAACC,OAAmB,OAAO;QAC3D,mCAAmC;QACnC,IAAI,OAAOC,WAAW,eAAe,eAAeA,QAAQ;YAC1D,yCAAyC;YACzC,MAAMC,uBAAuB,OAAOD,OAAOE,UAAU,KAAK,cACxDF,OAAOE,UAAU,CAAC,oCAAoCC,OAAO;YAE/D,wEAAwE;YACxE,MAAMC,gBAA4BH,uBAC7BF,SAAS,WAAWA,SAAS,YAAY,UAAU,cACpDA;YAEJ,oBAAoB;YACpB,IAAI,aAAaM,WAAW;gBAC1B,MAAMC,WAAW;oBACfC,OAAO;wBAAC;qBAAE;oBACVC,QAAQ;wBAAC;qBAAG;oBACZC,OAAO;wBAAC;qBAAG;oBACXC,WAAW;wBAAC;qBAAE;oBACdC,SAAS;wBAAC;wBAAG;wBAAI;qBAAE;oBACnBC,SAAS;wBAAC;wBAAI;wBAAI;qBAAG;oBACrBC,OAAO;wBAAC;wBAAI;wBAAI;qBAAG;gBACrB;gBACAR,UAAUS,OAAO,CAACR,QAAQ,CAACF,cAAc;YAC3C;YAEA,qCAAqC;YACrC,IAAI,oBAAoBJ,QAAQ;gBAC9B,MAAMe,cAAc;oBAClBR,OAAO;oBACPC,QAAQ;oBACRC,OAAO;oBACPC,WAAW;oBACXC,SAAS;oBACTC,SAAS;oBACTC,OAAO;gBACT;gBACA,gCAAgC;gBAChCb,OAAOgB,cAAc,GAAGD,WAAW,CAACX,cAAc;YACpD;QACF;IACF,GAAG,EAAE;IAEL,OAAO;QAAEP;IAAc;AACzB"}