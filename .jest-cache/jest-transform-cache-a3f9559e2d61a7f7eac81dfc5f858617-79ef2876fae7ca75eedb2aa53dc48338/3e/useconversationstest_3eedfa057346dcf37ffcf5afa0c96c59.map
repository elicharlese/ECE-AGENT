{"version":3,"sources":["/Users/elicharlese/CascadeProjects/AGENT/__tests__/hooks/use-conversations.test.ts"],"sourcesContent":["import React from 'react'\nimport { render, act, waitFor } from '@testing-library/react'\nimport { useConversations } from '@/hooks/use-conversations'\n\n// Mock conversation-service function-level exports used by the hook\nconst getConversationsMock = jest.fn()\nconst createConversationMock = jest.fn()\nconst createConversationWithParticipantsMock = jest.fn()\nconst updateConversationMock = jest.fn()\nconst deleteConversationMock = jest.fn()\nconst archiveConversationMock = jest.fn()\nconst leaveConversationMock = jest.fn()\nconst inviteParticipantsMock = jest.fn()\n\njest.mock('@/services/conversation-service', () => ({\n  getConversations: (...args: any[]) => getConversationsMock(...args),\n  createConversation: (...args: any[]) => createConversationMock(...args),\n  createConversationWithParticipants: (...args: any[]) => createConversationWithParticipantsMock(...args),\n  updateConversation: (...args: any[]) => updateConversationMock(...args),\n  deleteConversation: (...args: any[]) => deleteConversationMock(...args),\n  archiveConversation: (...args: any[]) => archiveConversationMock(...args),\n  leaveConversation: (...args: any[]) => leaveConversationMock(...args),\n  inviteParticipants: (...args: any[]) => inviteParticipantsMock(...args),\n}))\n\n// Mock Supabase client for realtime channel\nconst removeChannelMock = jest.fn()\nconst onMock = jest.fn(function (this: any) { return this })\nconst subscribeMock = jest.fn(function (this: any) { return this })\nconst channelMock = jest.fn(() => ({ on: onMock, subscribe: subscribeMock }))\n\njest.mock('@/lib/supabase/client', () => ({\n  supabase: {\n    channel: () => channelMock(),\n    removeChannel: () => removeChannelMock(),\n  },\n}))\n\ndescribe('useConversations', () => {\n  beforeEach(() => {\n    jest.clearAllMocks()\n  })\n\n  function TestHarness({ onReady }: { onReady: (hook: ReturnType<typeof useConversations>) => void }) {\n    const hook = useConversations()\n    React.useEffect(() => { onReady(hook) }, [hook, onReady])\n    return null\n  }\n\n  const convA = { id: 'a', title: 'A', created_at: '', updated_at: '', user_id: 'u1' }\n  const convB = { id: 'b', title: 'B', created_at: '', updated_at: '', user_id: 'u1' }\n\n  test('initial fetch loads conversations', async () => {\n    getConversationsMock.mockResolvedValueOnce([convA, convB])\n\n    let hook: ReturnType<typeof useConversations> | null = null\n    render(React.createElement(TestHarness, { onReady: (h: ReturnType<typeof useConversations>) => { hook = h } }))\n\n    await waitFor(() => expect(getConversationsMock).toHaveBeenCalledTimes(1))\n    await waitFor(() => expect(hook!.conversations.map(c => c.id)).toEqual(['a', 'b']))\n  })\n\n  \n\n  test('archiveConversation calls service and refreshes', async () => {\n    getConversationsMock.mockResolvedValueOnce([convA]) // initial\n    getConversationsMock.mockResolvedValueOnce([convA]) // refresh\n\n    let hook: ReturnType<typeof useConversations> | null = null\n    render(React.createElement(TestHarness, { onReady: (h: ReturnType<typeof useConversations>) => { hook = h } }))\n\n    await waitFor(() => expect(getConversationsMock).toHaveBeenCalled())\n\n    await act(async () => {\n      await hook!.archiveConversation('a', true)\n    })\n\n    expect(archiveConversationMock).toHaveBeenCalledWith('a', true)\n    expect(getConversationsMock).toHaveBeenCalledTimes(2)\n  })\n\n  test('leaveConversation removes from state', async () => {\n    getConversationsMock.mockResolvedValueOnce([convA, convB])\n\n    let hook: ReturnType<typeof useConversations> | null = null\n    render(React.createElement(TestHarness, { onReady: (h: ReturnType<typeof useConversations>) => { hook = h } }))\n\n    await waitFor(() => expect(getConversationsMock).toHaveBeenCalled())\n\n    await act(async () => {\n      await hook!.leaveConversation('a')\n    })\n\n    expect(leaveConversationMock).toHaveBeenCalledWith('a')\n    expect(hook!.conversations.map(c => c.id)).toEqual(['b'])\n  })\n\n  test('inviteParticipants proxies to service', async () => {\n    getConversationsMock.mockResolvedValueOnce([convA])\n\n    let hook: ReturnType<typeof useConversations> | null = null\n    render(React.createElement(TestHarness, { onReady: (h: ReturnType<typeof useConversations>) => { hook = h } }))\n\n    await waitFor(() => expect(getConversationsMock).toHaveBeenCalled())\n\n    await act(async () => {\n      await hook!.inviteParticipants('a', ['x', 'y'])\n    })\n\n    expect(inviteParticipantsMock).toHaveBeenCalledWith('a', ['x', 'y'])\n  })\n\n  test('subscribes to supabase channel and removes on unmount', async () => {\n    getConversationsMock.mockResolvedValueOnce([convA])\n\n    const { unmount } = render(React.createElement(TestHarness, { onReady: () => {} }))\n\n    await waitFor(() => expect(channelMock).toHaveBeenCalled())\n    expect(subscribeMock).toHaveBeenCalled()\n\n    unmount()\n    expect(removeChannelMock).toHaveBeenCalled()\n  })\n})\n"],"names":["jest","mock","getConversations","args","getConversationsMock","createConversation","createConversationMock","createConversationWithParticipants","createConversationWithParticipantsMock","updateConversation","updateConversationMock","deleteConversation","deleteConversationMock","archiveConversation","archiveConversationMock","leaveConversation","leaveConversationMock","inviteParticipants","inviteParticipantsMock","supabase","channel","channelMock","removeChannel","removeChannelMock","fn","onMock","subscribeMock","on","subscribe","describe","beforeEach","clearAllMocks","TestHarness","onReady","hook","useConversations","React","useEffect","convA","id","title","created_at","updated_at","user_id","convB","test","mockResolvedValueOnce","render","createElement","h","waitFor","expect","toHaveBeenCalledTimes","conversations","map","c","toEqual","toHaveBeenCalled","act","toHaveBeenCalledWith","unmount"],"mappings":"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"}