c99c7d02df81d1ac8800aab6ee320afd
"use strict";
jest.mock("@/services/conversation-service", ()=>({
        getConversations: (...args)=>getConversationsMock(...args),
        createConversation: (...args)=>createConversationMock(...args),
        createConversationWithParticipants: (...args)=>createConversationWithParticipantsMock(...args),
        updateConversation: (...args)=>updateConversationMock(...args),
        deleteConversation: (...args)=>deleteConversationMock(...args),
        archiveConversation: (...args)=>archiveConversationMock(...args),
        leaveConversation: (...args)=>leaveConversationMock(...args),
        inviteParticipants: (...args)=>inviteParticipantsMock(...args)
    }));
jest.mock("@/lib/supabase/client", ()=>({
        supabase: {
            channel: ()=>channelMock(),
            removeChannel: ()=>removeChannelMock()
        }
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _useconversations = require("../../hooks/use-conversations");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock conversation-service function-level exports used by the hook
const getConversationsMock = jest.fn();
const createConversationMock = jest.fn();
const createConversationWithParticipantsMock = jest.fn();
const updateConversationMock = jest.fn();
const deleteConversationMock = jest.fn();
const archiveConversationMock = jest.fn();
const leaveConversationMock = jest.fn();
const inviteParticipantsMock = jest.fn();
// Mock Supabase client for realtime channel
const removeChannelMock = jest.fn();
const onMock = jest.fn(function() {
    return this;
});
const subscribeMock = jest.fn(function() {
    return this;
});
const channelMock = jest.fn(()=>({
        on: onMock,
        subscribe: subscribeMock
    }));
describe("useConversations", ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    function TestHarness({ onReady }) {
        const hook = (0, _useconversations.useConversations)();
        _react.default.useEffect(()=>{
            onReady(hook);
        }, [
            hook,
            onReady
        ]);
        return null;
    }
    const convA = {
        id: "a",
        title: "A",
        created_at: "",
        updated_at: "",
        user_id: "u1"
    };
    const convB = {
        id: "b",
        title: "B",
        created_at: "",
        updated_at: "",
        user_id: "u1"
    };
    test("initial fetch loads conversations", async ()=>{
        getConversationsMock.mockResolvedValueOnce([
            convA,
            convB
        ]);
        let hook = null;
        (0, _react1.render)(_react.default.createElement(TestHarness, {
            onReady: (h)=>{
                hook = h;
            }
        }));
        await (0, _react1.waitFor)(()=>expect(getConversationsMock).toHaveBeenCalledTimes(1));
        await (0, _react1.waitFor)(()=>expect(hook.conversations.map((c)=>c.id)).toEqual([
                "a",
                "b"
            ]));
    });
    test("archiveConversation calls service and refreshes", async ()=>{
        getConversationsMock.mockResolvedValueOnce([
            convA
        ]) // initial
        ;
        getConversationsMock.mockResolvedValueOnce([
            convA
        ]) // refresh
        ;
        let hook = null;
        (0, _react1.render)(_react.default.createElement(TestHarness, {
            onReady: (h)=>{
                hook = h;
            }
        }));
        await (0, _react1.waitFor)(()=>expect(getConversationsMock).toHaveBeenCalled());
        await (0, _react1.act)(async ()=>{
            await hook.archiveConversation("a", true);
        });
        expect(archiveConversationMock).toHaveBeenCalledWith("a", true);
        expect(getConversationsMock).toHaveBeenCalledTimes(2);
    });
    test("leaveConversation removes from state", async ()=>{
        getConversationsMock.mockResolvedValueOnce([
            convA,
            convB
        ]);
        let hook = null;
        (0, _react1.render)(_react.default.createElement(TestHarness, {
            onReady: (h)=>{
                hook = h;
            }
        }));
        await (0, _react1.waitFor)(()=>expect(getConversationsMock).toHaveBeenCalled());
        await (0, _react1.act)(async ()=>{
            await hook.leaveConversation("a");
        });
        expect(leaveConversationMock).toHaveBeenCalledWith("a");
        expect(hook.conversations.map((c)=>c.id)).toEqual([
            "b"
        ]);
    });
    test("inviteParticipants proxies to service", async ()=>{
        getConversationsMock.mockResolvedValueOnce([
            convA
        ]);
        let hook = null;
        (0, _react1.render)(_react.default.createElement(TestHarness, {
            onReady: (h)=>{
                hook = h;
            }
        }));
        await (0, _react1.waitFor)(()=>expect(getConversationsMock).toHaveBeenCalled());
        await (0, _react1.act)(async ()=>{
            await hook.inviteParticipants("a", [
                "x",
                "y"
            ]);
        });
        expect(inviteParticipantsMock).toHaveBeenCalledWith("a", [
            "x",
            "y"
        ]);
    });
    test("subscribes to supabase channel and removes on unmount", async ()=>{
        getConversationsMock.mockResolvedValueOnce([
            convA
        ]);
        const { unmount } = (0, _react1.render)(_react.default.createElement(TestHarness, {
            onReady: ()=>{}
        }));
        await (0, _react1.waitFor)(()=>expect(channelMock).toHaveBeenCalled());
        expect(subscribeMock).toHaveBeenCalled();
        unmount();
        expect(removeChannelMock).toHaveBeenCalled();
    });
});

//# sourceMappingURL=data:application/json;base64,