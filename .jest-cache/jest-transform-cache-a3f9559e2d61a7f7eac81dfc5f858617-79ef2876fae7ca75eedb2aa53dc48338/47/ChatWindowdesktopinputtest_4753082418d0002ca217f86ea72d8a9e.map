{"version":3,"sources":["/Users/elicharlese/CascadeProjects/AGENT/__tests__/components/ChatWindow.desktop-input.test.tsx"],"sourcesContent":["import React from 'react'\nimport { screen, fireEvent, waitFor, act } from '@testing-library/react'\nimport { renderWithAct } from '../utils/test-utils'\n\n// Mock next/dynamic to avoid loading heavy components during tests\njest.mock('next/dynamic', () => () => (props: any) => null)\n\n// Mock Next.js navigation to satisfy components that call useRouter/usePathname\njest.mock('next/navigation', () => ({\n  useRouter: () => ({ push: jest.fn(), replace: jest.fn(), prefetch: jest.fn(), back: jest.fn() }),\n  usePathname: () => '/messages',\n  useSearchParams: () => ({ get: () => null }),\n}))\n\n// Force credits UI on and a known per-request estimate\njest.mock('@/lib/pricing', () => ({\n  CREDITS_ENABLED: true,\n  CREDITS_PER_AI_REQUEST: 2,\n}))\n\n// Mock credits service to avoid network and provide stable balance\njest.mock('@/services/credit-service', () => ({\n  getCreditBalance: jest.fn(async () => ({ balance: 42 })),\n}))\n\n// Mock conversations hook\njest.mock('@/hooks/use-conversations', () => ({\n  useConversations: () => ({\n    conversations: [\n      { id: 'abc', title: 'Test Conversation', created_at: '', updated_at: '', user_id: 'user-1' },\n    ],\n    loading: false,\n    error: null,\n    inviteParticipants: jest.fn(),\n  }),\n}))\n\n// Prepare a controllable mobile hook\nconst mockUseIsMobile = jest.fn(() => false)\njest.mock('@/hooks/use-mobile', () => ({ useIsMobile: () => mockUseIsMobile() }))\n\n// WebSocket hook mock with spies\nconst sendChatMessage = jest.fn()\nconst sendEditMessage = jest.fn()\njest.mock('@/hooks/use-websocket', () => ({\n  useWebSocket: () => ({\n    isConnected: true,\n    messages: [],\n    typingUsers: {},\n    joinConversation: jest.fn(),\n    sendChatMessage,\n    sendTyping: jest.fn(),\n    sendEditMessage,\n  }),\n}))\n\n// Supabase client mock: auth.getUser and participant count query\njest.mock('@/lib/supabase/client', () => {\n  const supabase = {\n    auth: {\n      getUser: async () => ({ data: { user: { id: 'me' } } }),\n    },\n    from: (_table: string) => ({\n      select: (_sel: string, _opts?: any) => ({\n        eq: (_col: string, _val: string) => Promise.resolve({ count: 1 }),\n      }),\n    }),\n  }\n  return { supabase }\n})\n\n// Mock message-bubble to expose a test-only Edit action triggering ChatWindow.onUpdateMessage\njest.mock('@/components/chat/message-bubble', () => ({\n  MessageBubble: ({ message, onUpdateMessage }: any) => (\n    <div>\n      <div data-testid={`msg-${message.id}`}>{message.content}</div>\n      <button onClick={() => onUpdateMessage(message.id, 'Hello edited')}>Edit</button>\n    </div>\n  ),\n}))\n\n// Controllable message service mock\nconst getMessagesMock = jest.fn()\nconst updateMessageMock = jest.fn()\njest.mock('@/services/message-service', () => ({\n  messageService: {\n    getMessages: (...args: any[]) => getMessagesMock(...args),\n    updateMessage: (...args: any[]) => updateMessageMock(...args),\n  },\n}))\n\nimport { ChatWindow } from '@/components/chat/chat-window'\n\nconst baseProps = {\n  chatId: 'abc',\n  onToggleSidebar: () => {},\n  sidebarCollapsed: false,\n}\n\nbeforeEach(() => {\n  jest.clearAllMocks()\n  mockUseIsMobile.mockReturnValue(false)\n  // Default: resolve quickly with one message\n  getMessagesMock.mockResolvedValue([\n    {\n      id: 'm1',\n      conversation_id: 'abc',\n      user_id: 'me',\n      content: 'Original message',\n      created_at: new Date().toISOString(),\n      role: 'user',\n      type: 'text',\n      edited_at: null,\n    },\n  ])\n  updateMessageMock.mockResolvedValue({})\n})\n\ndescribe('ChatWindow + DesktopMessageInput integration', () => {\n  test('renders DesktopMessageInput on desktop (Message input present)', async () => {\n    mockUseIsMobile.mockReturnValue(false)\n    await renderWithAct(<ChatWindow {...baseProps} />)\n\n    // Desktop textarea is labeled\n    expect(await screen.findByLabelText(/message input/i)).toBeInTheDocument()\n  })\n\n  test('does not render Desktop aria-labeled input on mobile', async () => {\n    jest.clearAllMocks()\n    mockUseIsMobile.mockReturnValue(true)\n    await renderWithAct(<ChatWindow {...baseProps} />)\n\n    // Mobile textarea has no aria-label \"Message input\"\n    await waitFor(() => {\n      expect(screen.queryByLabelText(/message input/i)).not.toBeInTheDocument()\n    })\n  })\n\n  test('keyboard shortcuts: Enter sends, Shift+Enter does not, Ctrl+Enter sends', async () => {\n    await renderWithAct(<ChatWindow {...baseProps} />)\n    const input = await screen.findByLabelText(/message input/i)\n\n    // Type something\n    fireEvent.change(input, { target: { value: 'Hello' } })\n\n    // Enter sends\n    fireEvent.keyDown(input, { key: 'Enter', code: 'Enter' })\n    expect(sendChatMessage).toHaveBeenCalledTimes(1)\n\n    // Type again\n    fireEvent.change(input, { target: { value: 'Hello again' } })\n\n    // Shift+Enter should not send\n    fireEvent.keyDown(input, { key: 'Enter', code: 'Enter', shiftKey: true })\n    expect(sendChatMessage).toHaveBeenCalledTimes(1)\n\n    // Ctrl+Enter sends\n    fireEvent.keyDown(input, { key: 'Enter', code: 'Enter', ctrlKey: true })\n    expect(sendChatMessage).toHaveBeenCalledTimes(2)\n  })\n\n  test('credit usage UI: shows CreditBadge, BuyCreditsButton and estimate text', async () => {\n    await renderWithAct(<ChatWindow {...baseProps} />)\n\n    // Credit estimate\n    expect(await screen.findByText(/est\\. credits:\\s*2/i)).toBeInTheDocument()\n\n    // Buy Credits button\n    expect(screen.getByRole('button', { name: /buy credits/i })).toBeInTheDocument()\n\n    // Credit balance badge (42) - use more specific selector for mocked component\n    expect(screen.getByTestId('credits-popover-mock')).toBeInTheDocument()\n  })\n\n  test('AI mode toggle updates badge and placeholder', async () => {\n    await renderWithAct(<ChatWindow {...baseProps} />)\n    const input = await screen.findByLabelText(/message input/i)\n\n    // Initial placeholder\n    expect((input as HTMLTextAreaElement).placeholder).toMatch(/type a message/i)\n\n    const toggle = screen.getByRole('button', { name: /enable ai mode/i })\n    fireEvent.click(toggle)\n\n    // After enabling\n    expect(screen.getByText(/ai mode/i)).toBeInTheDocument()\n    expect(screen.getByRole('button', { name: /disable ai mode/i })).toBeInTheDocument()\n    expect((input as HTMLTextAreaElement).placeholder).toMatch(/ask ai or type a message/i)\n  })\n\n  test('inline edit: optimistic update, persistence, and WS broadcast', async () => {\n    await renderWithAct(<ChatWindow {...baseProps} />)\n\n    // Original content visible\n    const original = await screen.findByTestId('msg-m1')\n    expect(original).toHaveTextContent('Original message')\n\n    // Trigger our test-only Edit button in mocked MessageBubble\n    fireEvent.click(screen.getByText('Edit'))\n\n    // Optimistic content change should be immediate\n    expect(screen.getByTestId('msg-m1')).toHaveTextContent('Hello edited')\n\n    // Persistence and broadcast\n    await waitFor(() => {\n      expect(updateMessageMock).toHaveBeenCalledWith('m1', 'Hello edited')\n      expect(sendEditMessage).toHaveBeenCalledWith('m1', 'Hello edited', 'abc')\n    })\n  })\n\n  test('inline edit failure: reverts to previous content', async () => {\n    updateMessageMock.mockRejectedValueOnce(new Error('DB down'))\n    await renderWithAct(<ChatWindow {...baseProps} />)\n\n    // Original content visible\n    expect(await screen.findByTestId('msg-m1')).toHaveTextContent('Original message')\n\n    // Trigger edit\n    fireEvent.click(screen.getByText('Edit'))\n\n    // Optimistic change first\n    expect(screen.getByTestId('msg-m1')).toHaveTextContent('Hello edited')\n\n    // Then revert after failure\n    await waitFor(() => {\n      expect(screen.getByTestId('msg-m1')).toHaveTextContent('Original message')\n    })\n  })\n\n  test('skeleton loader shows while loading, then empty state when no messages', async () => {\n    // Delay messages to assert skeletons\n    getMessagesMock.mockImplementationOnce(() => new Promise((resolve) => setTimeout(() => resolve([]), 50)))\n\n    const { container } = await renderWithAct(<ChatWindow {...baseProps} />)\n\n    // Skeletons present during load\n    expect(container.querySelectorAll('[data-slot=\"skeleton\"]').length).toBeGreaterThan(0)\n\n    // After load completes, skeletons go away and empty state shows\n    await waitFor(() => {\n      expect(container.querySelectorAll('[data-slot=\"skeleton\"]').length).toBe(0)\n      expect(screen.getByText(/no messages yet\\. say hello!/i)).toBeInTheDocument()\n    })\n  })\n\n  test('action panel opens and tabs switch on desktop', async () => {\n    await renderWithAct(<ChatWindow {...baseProps} />)\n\n    // Open the action panel via the + button\n    const openActions = await screen.findByRole('button', { name: /open actions/i })\n    fireEvent.click(openActions)\n\n    // Default tab is Media\n    expect(await screen.findByText(/media & content/i)).toBeInTheDocument()\n\n    // Switch to Apps\n    fireEvent.click(screen.getByRole('button', { name: /apps/i }))\n    expect(await screen.findByText(/quick apps/i)).toBeInTheDocument()\n\n    // Switch to Agents\n    fireEvent.click(screen.getByRole('button', { name: /agents/i }))\n    expect(await screen.findByText(/ai agents/i)).toBeInTheDocument()\n  })\n\n  test('selecting a GIF appends a new message on desktop', async () => {\n    jest.useFakeTimers()\n    const { container } = await renderWithAct(<ChatWindow {...baseProps} />)\n\n    // Start with a single message from the backend\n    await screen.findByTestId('msg-m1')\n    expect(container.querySelectorAll('[data-testid^=\"msg-\"]').length).toBe(1)\n\n    // Open action panel\n    fireEvent.click(await screen.findByRole('button', { name: /open actions/i }))\n    expect(await screen.findByText(/media & content/i)).toBeInTheDocument()\n\n    // Open GIF picker\n    fireEvent.click(screen.getByRole('button', { name: /open gif picker/i }))\n\n    // Wait for GIFs to load\n    await screen.findByPlaceholderText(/search gifs/i)\n    await screen.findByText(/loading gifs/i)\n    await act(async () => {\n      jest.advanceTimersByTime(600)\n    })\n\n    // Click a GIF\n    const gifButton = await screen.findByTitle('Happy Dance')\n    fireEvent.click(gifButton)\n\n    // Message count should increase\n    await waitFor(() => {\n      expect(container.querySelectorAll('[data-testid^=\"msg-\"]').length).toBe(2)\n    })\n\n    jest.useRealTimers()\n  })\n})\n"],"names":["jest","mock","props","useRouter","push","fn","replace","prefetch","back","usePathname","useSearchParams","get","CREDITS_ENABLED","CREDITS_PER_AI_REQUEST","getCreditBalance","balance","useConversations","conversations","id","title","created_at","updated_at","user_id","loading","error","inviteParticipants","useIsMobile","mockUseIsMobile","useWebSocket","isConnected","messages","typingUsers","joinConversation","sendChatMessage","sendTyping","sendEditMessage","supabase","auth","getUser","data","user","from","_table","select","_sel","_opts","eq","_col","_val","Promise","resolve","count","MessageBubble","message","onUpdateMessage","div","data-testid","content","button","onClick","messageService","getMessages","args","getMessagesMock","updateMessage","updateMessageMock","baseProps","chatId","onToggleSidebar","sidebarCollapsed","beforeEach","clearAllMocks","mockReturnValue","mockResolvedValue","conversation_id","Date","toISOString","role","type","edited_at","describe","test","renderWithAct","ChatWindow","expect","screen","findByLabelText","toBeInTheDocument","waitFor","queryByLabelText","not","input","fireEvent","change","target","value","keyDown","key","code","toHaveBeenCalledTimes","shiftKey","ctrlKey","findByText","getByRole","name","getByTestId","placeholder","toMatch","toggle","click","getByText","original","findByTestId","toHaveTextContent","toHaveBeenCalledWith","mockRejectedValueOnce","Error","mockImplementationOnce","setTimeout","container","querySelectorAll","length","toBeGreaterThan","toBe","openActions","findByRole","useFakeTimers","findByPlaceholderText","act","advanceTimersByTime","gifButton","findByTitle","useRealTimers"],"mappings":"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"}