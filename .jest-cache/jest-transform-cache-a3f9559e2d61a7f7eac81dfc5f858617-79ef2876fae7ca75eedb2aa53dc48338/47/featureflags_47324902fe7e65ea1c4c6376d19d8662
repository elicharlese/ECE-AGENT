ed2f10a0cd42bc27cbe6abb8ba6ab1b8
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    FEATURES: function() {
        return FEATURES;
    },
    getAllFeatureFlags: function() {
        return getAllFeatureFlags;
    },
    isFeatureEnabled: function() {
        return isFeatureEnabled;
    },
    setFeatureFlagUserId: function() {
        return setFeatureFlagUserId;
    },
    updateFeatureFlag: function() {
        return updateFeatureFlag;
    }
});
const FEATURES = {
    VIRTUAL_SCROLLING: "virtual_scrolling",
    E2E_ENCRYPTION: "e2e_encryption",
    MULTI_AGENT: "multi_agent",
    ADVANCED_SEARCH: "advanced_search",
    PERFORMANCE_MONITORING: "performance_monitoring",
    LAZY_LOADING: "lazy_loading",
    REALTIME_PRESENCE: "realtime_presence",
    VOICE_MESSAGES: "voice_messages",
    FILE_SHARING: "file_sharing",
    MESSAGE_REACTIONS: "message_reactions",
    IMMERSIVE_CHAT: "immersive_chat"
};
class FeatureFlagsManager {
    constructor(){
        this.flags = new Map();
        this.loadFlags();
    }
    static getInstance() {
        if (!FeatureFlagsManager.instance) {
            FeatureFlagsManager.instance = new FeatureFlagsManager();
        }
        return FeatureFlagsManager.instance;
    }
    loadFlags() {
        // Load from environment variables for now
        // In production, this would fetch from a feature flag service
        const defaultFlags = {
            [FEATURES.VIRTUAL_SCROLLING]: {
                enabled: process.env.NEXT_PUBLIC_FF_VIRTUAL_SCROLLING === "true",
                rolloutPercentage: 100
            },
            [FEATURES.E2E_ENCRYPTION]: {
                enabled: process.env.NEXT_PUBLIC_FF_E2E_ENCRYPTION === "true",
                rolloutPercentage: 0
            },
            [FEATURES.MULTI_AGENT]: {
                enabled: process.env.NEXT_PUBLIC_FF_MULTI_AGENT === "true",
                rolloutPercentage: 50
            },
            [FEATURES.ADVANCED_SEARCH]: {
                enabled: process.env.NEXT_PUBLIC_FF_ADVANCED_SEARCH === "true",
                rolloutPercentage: 100
            },
            [FEATURES.PERFORMANCE_MONITORING]: {
                enabled: process.env.NEXT_PUBLIC_FF_PERFORMANCE_MONITORING === "true",
                rolloutPercentage: 100
            },
            [FEATURES.LAZY_LOADING]: {
                enabled: true,
                rolloutPercentage: 100
            },
            [FEATURES.REALTIME_PRESENCE]: {
                enabled: false,
                rolloutPercentage: 0
            },
            [FEATURES.VOICE_MESSAGES]: {
                enabled: false,
                rolloutPercentage: 0
            },
            [FEATURES.FILE_SHARING]: {
                enabled: true,
                rolloutPercentage: 100
            },
            [FEATURES.MESSAGE_REACTIONS]: {
                enabled: true,
                rolloutPercentage: 100
            },
            [FEATURES.IMMERSIVE_CHAT]: {
                enabled: process.env.NEXT_PUBLIC_FF_IMMERSIVE_CHAT_ENABLED === "true",
                rolloutPercentage: 100
            }
        };
        Object.entries(defaultFlags).forEach(([key, config])=>{
            this.flags.set(key, config);
        });
    }
    setUserId(userId) {
        this.userId = userId;
    }
    isEnabled(feature) {
        const config = this.flags.get(feature);
        if (!config || !config.enabled) return false;
        // Check rollout percentage
        if (config.rolloutPercentage !== undefined && config.rolloutPercentage < 100) {
            if (!this.userId) return false;
            // Simple hash-based rollout
            const hash = this.hashString(this.userId + feature);
            const percentage = hash % 100 + 1;
            return percentage <= config.rolloutPercentage;
        }
        return true;
    }
    hashString(str) {
        let hash = 0;
        for(let i = 0; i < str.length; i++){
            const char = str.charCodeAt(i);
            hash = (hash << 5) - hash + char;
            hash = hash & hash // Convert to 32-bit integer
            ;
        }
        return Math.abs(hash);
    }
    async updateFlag(feature, config) {
        const existing = this.flags.get(feature) || {
            enabled: false
        };
        this.flags.set(feature, {
            ...existing,
            ...config
        });
    }
    getAllFlags() {
        const result = {};
        this.flags.forEach((value, key)=>{
            result[key] = value;
        });
        return result;
    }
}
// Export singleton instance methods
const manager = FeatureFlagsManager.getInstance();
function isFeatureEnabled(feature) {
    return manager.isEnabled(feature);
}
function setFeatureFlagUserId(userId) {
    manager.setUserId(userId);
}
function getAllFeatureFlags() {
    return manager.getAllFlags();
}
async function updateFeatureFlag(feature, config) {
    return manager.updateFlag(feature, config);
}

//# sourceMappingURL=data:application/json;base64,