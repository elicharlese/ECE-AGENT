b9337fb2753589f52950879d51bbad57
"use strict";
// Mock next/dynamic to avoid loading heavy components during tests
jest.mock("next/dynamic", ()=>()=>(props)=>null);
// Mock Next.js navigation to satisfy components that call useRouter/usePathname
jest.mock("next/navigation", ()=>({
        useRouter: ()=>({
                push: jest.fn(),
                replace: jest.fn(),
                prefetch: jest.fn(),
                back: jest.fn()
            }),
        usePathname: ()=>"/messages",
        useSearchParams: ()=>({
                get: ()=>null
            })
    }));
// Force credits UI on and a known per-request estimate
jest.mock("@/lib/pricing", ()=>({
        CREDITS_ENABLED: true,
        CREDITS_PER_AI_REQUEST: 2
    }));
// Mock credits service to avoid network and provide stable balance
jest.mock("@/services/credit-service", ()=>({
        getCreditBalance: jest.fn(async ()=>({
                balance: 42
            }))
    }));
// Mock conversations hook
jest.mock("@/hooks/use-conversations", ()=>({
        useConversations: ()=>({
                conversations: [
                    {
                        id: "abc",
                        title: "Test Conversation",
                        created_at: "",
                        updated_at: "",
                        user_id: "user-1"
                    }
                ],
                loading: false,
                error: null,
                inviteParticipants: jest.fn()
            })
    }));
jest.mock("@/hooks/use-mobile", ()=>({
        useIsMobile: ()=>mockUseIsMobile()
    }));
jest.mock("@/hooks/use-websocket", ()=>({
        useWebSocket: ()=>({
                isConnected: true,
                messages: [],
                typingUsers: {},
                joinConversation: jest.fn(),
                sendChatMessage,
                sendTyping: jest.fn(),
                sendEditMessage
            })
    }));
// Supabase client mock: auth.getUser and participant count query
jest.mock("@/lib/supabase/client", ()=>{
    const supabase = {
        auth: {
            getUser: async ()=>({
                    data: {
                        user: {
                            id: "me"
                        }
                    }
                })
        },
        from: (_table)=>({
                select: (_sel, _opts)=>({
                        eq: (_col, _val)=>Promise.resolve({
                                count: 1
                            })
                    })
            })
    };
    return {
        supabase
    };
});
// Mock message-bubble to expose a test-only Edit action triggering ChatWindow.onUpdateMessage
jest.mock("@/components/chat/message-bubble", ()=>({
        MessageBubble: ({ message, onUpdateMessage })=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        "data-testid": `msg-${message.id}`,
                        children: message.content
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                        onClick: ()=>onUpdateMessage(message.id, "Hello edited"),
                        children: "Edit"
                    })
                ]
            })
    }));
jest.mock("@/services/message-service", ()=>({
        messageService: {
            getMessages: (...args)=>getMessagesMock(...args),
            updateMessage: (...args)=>updateMessageMock(...args)
        }
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _testutils = require("../utils/test-utils");
const _chatwindow = require("../../components/chat/chat-window");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Prepare a controllable mobile hook
const mockUseIsMobile = jest.fn(()=>false);
// WebSocket hook mock with spies
const sendChatMessage = jest.fn();
const sendEditMessage = jest.fn();
// Controllable message service mock
const getMessagesMock = jest.fn();
const updateMessageMock = jest.fn();
const baseProps = {
    chatId: "abc",
    onToggleSidebar: ()=>{},
    sidebarCollapsed: false
};
beforeEach(()=>{
    jest.clearAllMocks();
    mockUseIsMobile.mockReturnValue(false);
    // Default: resolve quickly with one message
    getMessagesMock.mockResolvedValue([
        {
            id: "m1",
            conversation_id: "abc",
            user_id: "me",
            content: "Original message",
            created_at: new Date().toISOString(),
            role: "user",
            type: "text",
            edited_at: null
        }
    ]);
    updateMessageMock.mockResolvedValue({});
});
describe("ChatWindow + DesktopMessageInput integration", ()=>{
    test("renders DesktopMessageInput on desktop (Message input present)", async ()=>{
        mockUseIsMobile.mockReturnValue(false);
        await (0, _testutils.renderWithAct)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_chatwindow.ChatWindow, {
            ...baseProps
        }));
        // Desktop textarea is labeled
        expect(await _react1.screen.findByLabelText(/message input/i)).toBeInTheDocument();
    });
    test("does not render Desktop aria-labeled input on mobile", async ()=>{
        jest.clearAllMocks();
        mockUseIsMobile.mockReturnValue(true);
        await (0, _testutils.renderWithAct)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_chatwindow.ChatWindow, {
            ...baseProps
        }));
        // Mobile textarea has no aria-label "Message input"
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.queryByLabelText(/message input/i)).not.toBeInTheDocument();
        });
    });
    test("keyboard shortcuts: Enter sends, Shift+Enter does not, Ctrl+Enter sends", async ()=>{
        await (0, _testutils.renderWithAct)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_chatwindow.ChatWindow, {
            ...baseProps
        }));
        const input = await _react1.screen.findByLabelText(/message input/i);
        // Type something
        _react1.fireEvent.change(input, {
            target: {
                value: "Hello"
            }
        });
        // Enter sends
        _react1.fireEvent.keyDown(input, {
            key: "Enter",
            code: "Enter"
        });
        expect(sendChatMessage).toHaveBeenCalledTimes(1);
        // Type again
        _react1.fireEvent.change(input, {
            target: {
                value: "Hello again"
            }
        });
        // Shift+Enter should not send
        _react1.fireEvent.keyDown(input, {
            key: "Enter",
            code: "Enter",
            shiftKey: true
        });
        expect(sendChatMessage).toHaveBeenCalledTimes(1);
        // Ctrl+Enter sends
        _react1.fireEvent.keyDown(input, {
            key: "Enter",
            code: "Enter",
            ctrlKey: true
        });
        expect(sendChatMessage).toHaveBeenCalledTimes(2);
    });
    test("credit usage UI: shows CreditBadge, BuyCreditsButton and estimate text", async ()=>{
        await (0, _testutils.renderWithAct)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_chatwindow.ChatWindow, {
            ...baseProps
        }));
        // Credit estimate
        expect(await _react1.screen.findByText(/est\. credits:\s*2/i)).toBeInTheDocument();
        // Buy Credits button
        expect(_react1.screen.getByRole("button", {
            name: /buy credits/i
        })).toBeInTheDocument();
        // Credit balance badge (42) - use more specific selector for mocked component
        expect(_react1.screen.getByTestId("credits-popover-mock")).toBeInTheDocument();
    });
    test("AI mode toggle updates badge and placeholder", async ()=>{
        await (0, _testutils.renderWithAct)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_chatwindow.ChatWindow, {
            ...baseProps
        }));
        const input = await _react1.screen.findByLabelText(/message input/i);
        // Initial placeholder
        expect(input.placeholder).toMatch(/type a message/i);
        const toggle = _react1.screen.getByRole("button", {
            name: /enable ai mode/i
        });
        _react1.fireEvent.click(toggle);
        // After enabling
        expect(_react1.screen.getByText(/ai mode/i)).toBeInTheDocument();
        expect(_react1.screen.getByRole("button", {
            name: /disable ai mode/i
        })).toBeInTheDocument();
        expect(input.placeholder).toMatch(/ask ai or type a message/i);
    });
    test("inline edit: optimistic update, persistence, and WS broadcast", async ()=>{
        await (0, _testutils.renderWithAct)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_chatwindow.ChatWindow, {
            ...baseProps
        }));
        // Original content visible
        const original = await _react1.screen.findByTestId("msg-m1");
        expect(original).toHaveTextContent("Original message");
        // Trigger our test-only Edit button in mocked MessageBubble
        _react1.fireEvent.click(_react1.screen.getByText("Edit"));
        // Optimistic content change should be immediate
        expect(_react1.screen.getByTestId("msg-m1")).toHaveTextContent("Hello edited");
        // Persistence and broadcast
        await (0, _react1.waitFor)(()=>{
            expect(updateMessageMock).toHaveBeenCalledWith("m1", "Hello edited");
            expect(sendEditMessage).toHaveBeenCalledWith("m1", "Hello edited", "abc");
        });
    });
    test("inline edit failure: reverts to previous content", async ()=>{
        updateMessageMock.mockRejectedValueOnce(new Error("DB down"));
        await (0, _testutils.renderWithAct)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_chatwindow.ChatWindow, {
            ...baseProps
        }));
        // Original content visible
        expect(await _react1.screen.findByTestId("msg-m1")).toHaveTextContent("Original message");
        // Trigger edit
        _react1.fireEvent.click(_react1.screen.getByText("Edit"));
        // Optimistic change first
        expect(_react1.screen.getByTestId("msg-m1")).toHaveTextContent("Hello edited");
        // Then revert after failure
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByTestId("msg-m1")).toHaveTextContent("Original message");
        });
    });
    test("skeleton loader shows while loading, then empty state when no messages", async ()=>{
        // Delay messages to assert skeletons
        getMessagesMock.mockImplementationOnce(()=>new Promise((resolve)=>setTimeout(()=>resolve([]), 50)));
        const { container } = await (0, _testutils.renderWithAct)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_chatwindow.ChatWindow, {
            ...baseProps
        }));
        // Skeletons present during load
        expect(container.querySelectorAll('[data-slot="skeleton"]').length).toBeGreaterThan(0);
        // After load completes, skeletons go away and empty state shows
        await (0, _react1.waitFor)(()=>{
            expect(container.querySelectorAll('[data-slot="skeleton"]').length).toBe(0);
            expect(_react1.screen.getByText(/no messages yet\. say hello!/i)).toBeInTheDocument();
        });
    });
    test("action panel opens and tabs switch on desktop", async ()=>{
        await (0, _testutils.renderWithAct)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_chatwindow.ChatWindow, {
            ...baseProps
        }));
        // Open the action panel via the + button
        const openActions = await _react1.screen.findByRole("button", {
            name: /open actions/i
        });
        _react1.fireEvent.click(openActions);
        // Default tab is Media
        expect(await _react1.screen.findByText(/media & content/i)).toBeInTheDocument();
        // Switch to Apps
        _react1.fireEvent.click(_react1.screen.getByRole("button", {
            name: /apps/i
        }));
        expect(await _react1.screen.findByText(/quick apps/i)).toBeInTheDocument();
        // Switch to Agents
        _react1.fireEvent.click(_react1.screen.getByRole("button", {
            name: /agents/i
        }));
        expect(await _react1.screen.findByText(/ai agents/i)).toBeInTheDocument();
    });
    test("selecting a GIF appends a new message on desktop", async ()=>{
        jest.useFakeTimers();
        const { container } = await (0, _testutils.renderWithAct)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_chatwindow.ChatWindow, {
            ...baseProps
        }));
        // Start with a single message from the backend
        await _react1.screen.findByTestId("msg-m1");
        expect(container.querySelectorAll('[data-testid^="msg-"]').length).toBe(1);
        // Open action panel
        _react1.fireEvent.click(await _react1.screen.findByRole("button", {
            name: /open actions/i
        }));
        expect(await _react1.screen.findByText(/media & content/i)).toBeInTheDocument();
        // Open GIF picker
        _react1.fireEvent.click(_react1.screen.getByRole("button", {
            name: /open gif picker/i
        }));
        // Wait for GIFs to load
        await _react1.screen.findByPlaceholderText(/search gifs/i);
        await _react1.screen.findByText(/loading gifs/i);
        await (0, _react1.act)(async ()=>{
            jest.advanceTimersByTime(600);
        });
        // Click a GIF
        const gifButton = await _react1.screen.findByTitle("Happy Dance");
        _react1.fireEvent.click(gifButton);
        // Message count should increase
        await (0, _react1.waitFor)(()=>{
            expect(container.querySelectorAll('[data-testid^="msg-"]').length).toBe(2);
        });
        jest.useRealTimers();
    });
});

//# sourceMappingURL=data:application/json;base64,