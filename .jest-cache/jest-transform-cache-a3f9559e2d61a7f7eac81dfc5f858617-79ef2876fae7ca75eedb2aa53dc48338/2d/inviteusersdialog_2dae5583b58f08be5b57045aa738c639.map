{"version":3,"sources":["/Users/elicharlese/CascadeProjects/AGENT/components/chat/invite-users-dialog.tsx"],"sourcesContent":["\"use client\"\n\nimport { useState } from \"react\"\nimport { \n  Mail, \n  AtSign, \n  Wallet, \n  UserPlus,\n  Search,\n  X,\n  Check,\n  Copy,\n  Share2,\n  QrCode\n} from \"lucide-react\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogDescription,\n} from \"@/components/ui/dialog\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { toast } from \"@/components/ui/use-toast\"\nimport { cn } from \"@/lib/utils\"\n\ninterface InviteUsersDialogProps {\n  isOpen: boolean\n  onClose: () => void\n  chatId?: string\n  chatName?: string\n  isGroupChat?: boolean\n  onInviteUsers: (users: InviteUser[]) => Promise<void>\n}\n\ninterface InviteUser {\n  id?: string\n  identifier: string\n  type: \"email\" | \"username\" | \"wallet\"\n  name?: string\n  avatar?: string\n}\n\nexport function InviteUsersDialog({\n  isOpen,\n  onClose,\n  chatId,\n  chatName,\n  isGroupChat = false,\n  onInviteUsers\n}: InviteUsersDialogProps) {\n  const [activeTab, setActiveTab] = useState(\"email\")\n  const [emailInput, setEmailInput] = useState(\"\")\n  const [usernameInput, setUsernameInput] = useState(\"\")\n  const [walletInput, setWalletInput] = useState(\"\")\n  const [selectedUsers, setSelectedUsers] = useState<InviteUser[]>([])\n  const [isSearching, setIsSearching] = useState(false)\n  const [searchResults, setSearchResults] = useState<InviteUser[]>([])\n  const [customMessage, setCustomMessage] = useState(\"\")\n  const [isInviting, setIsInviting] = useState(false)\n  const [shareLink, setShareLink] = useState(\"\")\n  const [isGeneratingLink, setIsGeneratingLink] = useState(false)\n  const displayChatName = chatName || \"New chat\"\n\n  // Generate secure share link\n  const generateShareLink = async () => {\n    if (!chatId) return undefined\n\n    setIsGeneratingLink(true)\n    try {\n      const response = await fetch('/api/invitations/create-link', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          chatId,\n          chatName: displayChatName,\n          isGroupChat,\n          customMessage: customMessage.trim() || undefined,\n        }),\n      })\n\n      const data = await response.json()\n\n      if (!response.ok) {\n        throw new Error(data.error || 'Failed to generate invite link')\n      }\n\n      const baseUrl = window.location.origin\n      const link = `${baseUrl}/join/${chatId}?invite=${data.inviteToken}`\n      setShareLink(link)\n      return link\n    } catch (error: any) {\n      toast({\n        title: \"Failed to generate link\",\n        description: error.message,\n        variant: \"destructive\"\n      })\n      return undefined\n    } finally {\n      setIsGeneratingLink(false)\n    }\n  }\n\n  // Search for users\n  const searchUsers = async (query: string, type: \"email\" | \"username\" | \"wallet\") => {\n    setIsSearching(true)\n    \n    // Simulate API search\n    await new Promise(resolve => setTimeout(resolve, 500))\n    \n    const mockResults: InviteUser[] = [\n      {\n        id: \"user-1\",\n        identifier: \"\",\n        type,\n        name: \"\",\n        avatar: \"/placeholder.svg\"\n      },\n      {\n        id: \"user-2\",\n        identifier: \"\",\n        type,\n        name: \"\"\n      }\n    ].filter(user => \n      user.identifier.toLowerCase().includes(query.toLowerCase()) ||\n      user.name?.toLowerCase().includes(query.toLowerCase())\n    )\n    \n    setSearchResults(mockResults)\n    setIsSearching(false)\n  }\n\n  // Add user to selection\n  const addUser = (user: InviteUser) => {\n    if (!selectedUsers.find(u => u.identifier === user.identifier)) {\n      setSelectedUsers([...selectedUsers, user])\n    }\n  }\n\n  // Remove user from selection\n  const removeUser = (identifier: string) => {\n    setSelectedUsers(selectedUsers.filter(u => u.identifier !== identifier))\n  }\n\n  // Add custom email/username/wallet\n  const addCustomUser = (type: \"email\" | \"username\" | \"wallet\") => {\n    let identifier = \"\"\n    let isValid = false\n    \n    switch (type) {\n      case \"email\":\n        identifier = emailInput.trim()\n        isValid = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(identifier)\n        break\n      case \"username\":\n        identifier = usernameInput.trim()\n        if (!identifier.startsWith(\"@\")) identifier = \"@\" + identifier\n        isValid = /^@[\\w\\d_]{3,}$/.test(identifier)\n        break\n      case \"wallet\":\n        identifier = walletInput.trim()\n        isValid = /^0x[a-fA-F0-9]{40}$/.test(identifier) || /^[1-9A-HJ-NP-Za-km-z]{32,44}$/.test(identifier)\n        break\n    }\n    \n    if (isValid && !selectedUsers.find(u => u.identifier === identifier)) {\n      addUser({ identifier, type })\n      \n      // Clear input\n      switch (type) {\n        case \"email\":\n          setEmailInput(\"\")\n          break\n        case \"username\":\n          setUsernameInput(\"\")\n          break\n        case \"wallet\":\n          setWalletInput(\"\")\n          break\n      }\n    }\n  }\n\n  // Send invitations\n  const handleInvite = async () => {\n    if (selectedUsers.length === 0) return\n    \n    setIsInviting(true)\n    try {\n      await onInviteUsers(selectedUsers)\n      toast({\n        title: \"Invitations sent!\",\n        description: `Successfully invited ${selectedUsers.length} user${selectedUsers.length > 1 ? 's' : ''} to ${chatName}`,\n      })\n      onClose()\n    } catch (error) {\n      toast({\n        title: \"Failed to send invitations\",\n        description: \"Please try again later\",\n        variant: \"destructive\"\n      })\n    } finally {\n      setIsInviting(false)\n    }\n  }\n\n  // Copy share link\n  const copyShareLink = async () => {\n    try {\n      let linkToCopy: string | undefined = shareLink || undefined\n      if (!linkToCopy) {\n        linkToCopy = await generateShareLink()\n      }\n      if (!linkToCopy) return\n      await navigator.clipboard.writeText(linkToCopy)\n      toast({\n        title: \"Link copied!\",\n        description: \"Share link has been copied to clipboard\"\n      })\n    } catch (err: any) {\n      toast({\n        title: \"Failed to copy\",\n        description: err?.message ?? \"Could not copy link to clipboard\",\n        variant: \"destructive\",\n      })\n    }\n  }\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-2xl\">\n        <DialogHeader>\n          <DialogTitle>Invite to {displayChatName}</DialogTitle>\n          <DialogDescription>\n            Invite users via email, username, or wallet address\n          </DialogDescription>\n        </DialogHeader>\n\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"mt-4\">\n          <TabsList className={`grid w-full ${chatId ? 'grid-cols-4' : 'grid-cols-3'}`}>\n            <TabsTrigger value=\"email\">\n              <Mail className=\"h-4 w-4 mr-1\" />\n              Email\n            </TabsTrigger>\n            <TabsTrigger value=\"username\">\n              <AtSign className=\"h-4 w-4 mr-1\" />\n              Username\n            </TabsTrigger>\n            <TabsTrigger value=\"wallet\">\n              <Wallet className=\"h-4 w-4 mr-1\" />\n              Wallet\n            </TabsTrigger>\n            {chatId && (\n              <TabsTrigger value=\"link\">\n                <Share2 className=\"h-4 w-4 mr-1\" />\n                Link\n              </TabsTrigger>\n            )}\n          </TabsList>\n\n          {/* Email Tab */}\n          <TabsContent value=\"email\" className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label>Email Address</Label>\n              <div className=\"flex gap-2\">\n                <Input\n                  type=\"email\"\n                  placeholder=\"user@example.com\"\n                  value={emailInput}\n                  onChange={(e) => setEmailInput(e.target.value)}\n                  onKeyPress={(e) => e.key === \"Enter\" && addCustomUser(\"email\")}\n                />\n                <Button \n                  onClick={() => addCustomUser(\"email\")}\n                  disabled={!emailInput.trim()}\n                >\n                  Add\n                </Button>\n              </div>\n              <p className=\"text-xs text-gray-500\">\n                Enter email addresses to invite users. They&apos;ll receive an invitation link.\n              </p>\n            </div>\n            \n            {emailInput.length > 2 && (\n              <div className=\"space-y-2\">\n                <Label>Search Results</Label>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => searchUsers(emailInput, \"email\")}\n                  disabled={isSearching}\n                  className=\"w-full\"\n                >\n                  <Search className=\"h-4 w-4 mr-2\" />\n                  Search existing users\n                </Button>\n              </div>\n            )}\n          </TabsContent>\n\n          {/* Username Tab */}\n          <TabsContent value=\"username\" className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label>Username</Label>\n              <div className=\"flex gap-2\">\n                <div className=\"relative flex-1\">\n                  <AtSign className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                  <Input\n                    placeholder=\"username\"\n                    value={usernameInput}\n                    onChange={(e) => setUsernameInput(e.target.value)}\n                    onKeyPress={(e) => e.key === \"Enter\" && addCustomUser(\"username\")}\n                    className=\"pl-9\"\n                  />\n                </div>\n                <Button \n                  onClick={() => addCustomUser(\"username\")}\n                  disabled={!usernameInput.trim()}\n                >\n                  Add\n                </Button>\n              </div>\n              <p className=\"text-xs text-gray-500\">\n                Enter usernames without the @ symbol\n              </p>\n            </div>\n            \n            {usernameInput.length > 2 && (\n              <div className=\"space-y-2\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => searchUsers(usernameInput, \"username\")}\n                  disabled={isSearching}\n                  className=\"w-full\"\n                >\n                  <Search className=\"h-4 w-4 mr-2\" />\n                  Search users\n                </Button>\n              </div>\n            )}\n          </TabsContent>\n\n          {/* Wallet Tab */}\n          <TabsContent value=\"wallet\" className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label>Wallet Address</Label>\n              <div className=\"flex gap-2\">\n                <Input\n                  placeholder=\"0x... or crypto address\"\n                  value={walletInput}\n                  onChange={(e) => setWalletInput(e.target.value)}\n                  onKeyPress={(e) => e.key === \"Enter\" && addCustomUser(\"wallet\")}\n                  className=\"font-mono text-sm\"\n                />\n                <Button \n                  onClick={() => addCustomUser(\"wallet\")}\n                  disabled={!walletInput.trim()}\n                >\n                  Add\n                </Button>\n              </div>\n              <p className=\"text-xs text-gray-500\">\n                Supports Ethereum, Solana, and other wallet addresses\n              </p>\n            </div>\n            \n            <div className=\"flex gap-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"flex-1\"\n              >\n                <Wallet className=\"h-4 w-4 mr-2\" />\n                Connect Wallet\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"flex-1\"\n              >\n                <QrCode className=\"h-4 w-4 mr-2\" />\n                Scan QR\n              </Button>\n            </div>\n          </TabsContent>\n\n          {/* Share Link Tab */}\n          {chatId && (\n            <TabsContent value=\"link\" className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label>Share Link</Label>\n                <div className=\"flex gap-2\">\n                  <Input\n                    value={shareLink || \"Click generate to create invite link\"}\n                    readOnly\n                    className=\"font-mono text-sm\"\n                  />\n                  <Button\n                    onClick={generateShareLink}\n                    variant=\"outline\"\n                    disabled={isGeneratingLink}\n                  >\n                    {isGeneratingLink ? \"Generating...\" : \"Generate\"}\n                  </Button>\n                  <Button\n                    onClick={copyShareLink}\n                    disabled={!shareLink}\n                  >\n                    <Copy className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n                <p className=\"text-xs text-gray-500\">\n                  Share this link to invite anyone to the {isGroupChat ? 'group' : 'chat'}\n                </p>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label>Custom Message (Optional)</Label>\n                <Textarea\n                  placeholder=\"Add a personal message to your invitation...\"\n                  value={customMessage}\n                  onChange={(e) => setCustomMessage(e.target.value)}\n                  rows={3}\n                />\n              </div>\n            </TabsContent>\n          )}\n        </Tabs>\n\n        {/* Search Results */}\n        {searchResults.length > 0 && (\n          <div className=\"space-y-2 mt-4\">\n            <Label>Search Results</Label>\n            <div className=\"space-y-2 max-h-32 overflow-y-auto\">\n              {searchResults.map(user => (\n                <div\n                  key={user.identifier}\n                  className=\"flex items-center justify-between p-2 rounded-lg border hover:bg-gray-50 dark:hover:bg-gray-800\"\n                >\n                  <div className=\"flex items-center gap-2\">\n                    <Avatar className=\"h-8 w-8\">\n                      <AvatarImage src={user.avatar} />\n                      <AvatarFallback>\n                        {user.name?.[0] || user.identifier[0]}\n                      </AvatarFallback>\n                    </Avatar>\n                    <div>\n                      <p className=\"text-sm font-medium\">{user.name || user.identifier}</p>\n                      <p className=\"text-xs text-gray-500\">{user.identifier}</p>\n                    </div>\n                  </div>\n                  <Button\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    onClick={() => addUser(user)}\n                    disabled={selectedUsers.find(u => u.identifier === user.identifier) !== undefined}\n                  >\n                    {selectedUsers.find(u => u.identifier === user.identifier) ? (\n                      <Check className=\"h-4 w-4 text-green-500\" />\n                    ) : (\n                      <UserPlus className=\"h-4 w-4\" />\n                    )}\n                  </Button>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Selected Users */}\n        {selectedUsers.length > 0 && (\n          <div className=\"space-y-2 mt-4\">\n            <Label>Selected Users ({selectedUsers.length})</Label>\n            <div className=\"flex flex-wrap gap-2\">\n              {selectedUsers.map(user => (\n                <Badge\n                  key={user.identifier}\n                  variant=\"secondary\"\n                  className=\"pl-2 pr-1 py-1\"\n                >\n                  <span className=\"mr-1\">{user.identifier}</span>\n                  <button\n                    onClick={() => removeUser(user.identifier)}\n                    className=\"ml-1 hover:bg-gray-200 dark:hover:bg-gray-700 rounded p-0.5\"\n                  >\n                    <X className=\"h-3 w-3\" />\n                  </button>\n                </Badge>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Actions */}\n        <div className=\"flex justify-end gap-2 mt-4\">\n          <Button variant=\"outline\" onClick={onClose}>\n            Cancel\n          </Button>\n          <Button \n            onClick={handleInvite}\n            disabled={selectedUsers.length === 0 || isInviting}\n          >\n            <UserPlus className=\"h-4 w-4 mr-2\" />\n            Send Invitations ({selectedUsers.length})\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  )\n}\n"],"names":["InviteUsersDialog","isOpen","onClose","chatId","chatName","isGroupChat","onInviteUsers","activeTab","setActiveTab","useState","emailInput","setEmailInput","usernameInput","setUsernameInput","walletInput","setWalletInput","selectedUsers","setSelectedUsers","isSearching","setIsSearching","searchResults","setSearchResults","customMessage","setCustomMessage","isInviting","setIsInviting","shareLink","setShareLink","isGeneratingLink","setIsGeneratingLink","displayChatName","generateShareLink","undefined","response","fetch","method","headers","body","JSON","stringify","trim","data","json","ok","Error","error","baseUrl","window","location","origin","link","inviteToken","toast","title","description","message","variant","searchUsers","query","type","Promise","resolve","setTimeout","mockResults","id","identifier","name","avatar","filter","user","toLowerCase","includes","addUser","find","u","removeUser","addCustomUser","isValid","test","startsWith","handleInvite","length","copyShareLink","linkToCopy","navigator","clipboard","writeText","err","Dialog","open","onOpenChange","DialogContent","className","DialogHeader","DialogTitle","DialogDescription","Tabs","value","onValueChange","TabsList","TabsTrigger","Mail","AtSign","Wallet","Share2","TabsContent","div","Label","Input","placeholder","onChange","e","target","onKeyPress","key","Button","onClick","disabled","p","size","Search","QrCode","readOnly","Copy","Textarea","rows","map","Avatar","AvatarImage","src","AvatarFallback","Check","UserPlus","Badge","span","button","X"],"mappings":"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"}